title,user,talk_type,description,icon_url,twitter_id,detail_url,talk_date,talk_site,is_adopted,video_url,slide_url
ぼっちiOSエンジニアがアプリ開発〜リリースまでに取り組んできたこと,asmz,15m,"サーバサイドエンジニアは多いけどiOS/Androidなどのネイティブアプリエンジニアは少ない、という会社さんは結構多いのではないでしょうか？

私はこれまで、何の因果か社内やプロジェクトの中でiOSアプリ担当が自分だけ（他のエンジニアはみんなサーバサイド担当）という「ぼっち」環境で数年くらい過ごしてきました。

また、現在仙台に住んでいるということもあり、東京のように頻繁に勉強会が開催されているわけではないため、あんまりiOSエンジニアのお友達が多くなく、情報共有やキャッチアップする機会も少ないという状況です。

このトークでは、そんなぼっちiOSエンジニアが新たなアプリを開発してリリースするためにやってきた以下のような取り組みや、その過程で起きた出来事を余すところなくお伝えし、最終的にはこのiOSDCで少しでも多くのiOSエンジニアのお友達を作りたいと思っています。

- ぼっちだからこそ、自動化・省力化
- ぼっちだからこそ、早めのアウトプット
- ぼっちだけど、APIも設計
- ぼっちなので、デザインもやろう
- ぼっちなのに、Androidも！？
- ぼっちだけど、ぼっちじゃない

もし同じような悩みを抱える方いらっしゃれば、聞いていただけると幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/2f60be8a-b54d-4ef7-93c7-096e8c472189.png,_asmz,https://fortee.jp/iosdc-japan-2019/proposal/2178d95d-cb03-4bee-8e82-045d2f795f99,,,False,,
Flutterアプリで環境毎に設定を変えてビルド及び配信まで行う,amu,15m,"近年、Flutterでのアプリ開発が急速に広がりを見せております。

5月のGoogle I/O 2019ではFlutter for WebのTechnical Preview版も発表され、
シングルコードベースのマルチプラットフォームとして、開発元のGoogleもより一層Flutterの普及に力を入れていると言えます。

ここから本題ですが、実際にアプリ開発を行う際、
環境毎に設定を変えてビルド及び配信まで行う環境構築が必須ではないでしょうか。

今回は皆さんご存知のiOSアプリでなくFlutterアプリでの設定方法、
及びBitriseを使用したCI/CDの実現方法についてFlutter初心者の方にも一通り分かるようにお伝えします。

Flutterでの開発経験を通じて、今まで以上にiOS/Android周りに関して
多角的に捉えられるようになるキッカケの一助となれば幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/b11daba8-ff07-4c0b-ba31-dc7a6b9b22d1.jpg,yumatan8,https://fortee.jp/iosdc-japan-2019/proposal/1a354dc0-67a3-4a44-8903-2b08df37826f,,,False,,
大規模アプリケーションで技術的負債を抱えたコードと向き合うために行ったことをお話しします,Tamappe,15m,"技術的負債の定義は例えば次のようなケースが存在することを指します。

- depricatedになっているコードが存在するクラス
- Swiftのバージョンが古すぎてバージョンを上げた時のリスクがわからない状態
- 使っていたライブラリが最新バージョンのSwiftに対応していないので長年放置された状態
- ライブラリのバージョンが開発初期のバージョンのまま放置されている状態
- storyboard,xibがAutolayoutに部分的に対応していたり、対応していない状態
- そもそもデグレやデッドロックしている挙動が謎な機能が一部存在する
- Objective-CからSwiftへの書き換え作業
- UIWebViewとかいう過去の遺産
- etc

このような技術的負債が存在してそれに立ち向かわなければならない時のエンジニア的な対応方法と過去のエピソードなどをお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/4f755bb4-6d84-477f-831d-faf011ddeaa0.png,tamapppe,https://fortee.jp/iosdc-japan-2019/proposal/cb629717-8735-41d6-9d2c-36cc5bd406be,,,False,,
Firebaseで実現するiOSアプリ開発,Tatsuya Nishikawa,LT_R,"最近Firebaseを使ったサーバーレス開発が話題です。
本トークではFirebaseを使ってアプリを運用してきて得た知見をお話します。

- Firestore
- Cloud Functions
- Remote Config
- Storage
- Authentication",https://fortee.jp/files/iosdc-japan-2019/speaker/ddda9a11-5eee-4f74-a12b-408beade8322.jpg,tatsuya73206018,https://fortee.jp/iosdc-japan-2019/proposal/f8419d09-28a4-41fb-9ed8-2b490dcdab09,,,False,,
簡単！FlutterでiOSのPush通知を出すところまで作ってみよう。,嶽雅也,15m,"Flutterについてご存知でしょうか。
Googleが公式で出しているモバイル向けクロスプラットフォームで、iOS/Andoirdを同一のViewで作成できます。
Android界隈では試してみたなどをよく聞きますが、iOS界隈ではあまり聞きません。
今回、FlutterのインストールからOneSignalを導入して、Push通知を実際に飛ばせるところまでを0から作って、
皆さんに導入の容易さをお伝えできればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/b2f77ead-3a7f-4712-b884-a42e64d63139.jpg,azarashi1229,https://fortee.jp/iosdc-japan-2019/proposal/9c163083-f9db-4780-9cde-2723dafd5a5a,,,False,,
GoogleSpeechToTextを活用して音声を動画にした話,ようせい,15m,"# 説明
Radiotalkは、音声配信プラットフォームで、誰でもラジオのようにトークを配信することができます。
最近、ワイヤレスイヤホンが普及などもあり、音声が注目されるようになってきました。
しかし、音声は、以下のような再生までのハードルが高い課題がありました。
・環境によっては今すぐ再生できない(音を出せる環境、ヘッドホンしているかなど)
・再生するトークを選ぶ際に、タイトルや詳細、画像などでしか判断できない(トークのテンションや声などは判断できない)

その課題を解決するために、音声の一部を書き起こして、テロップ動画でシェアできる機能を作成しました。
音声から動画を作成するまでの話と作り方をお話したいと思います。

## 発表内容
・開発の流れ
　・なぜ音声を動画にすることになったのか
　・動画のテンプレートを作るまでの流れ
　・実装の一連の流れ
・音声トリミング方法
・音声の解析方法
　・GoogleSpeechToTextなぜ採用したか
　・GoogleSpeechToTextの仕様
　・GoogleSpeechToText精度
・テロップ動画作成エディタのUI/UX
・静止画動画作成方法
・音声と動画の合成方法",https://fortee.jp/files/iosdc-japan-2019/speaker/540adc60-5c49-4838-b9b9-91e7a2c28048.jpg,fairy_engineer,https://fortee.jp/iosdc-japan-2019/proposal/1c01507d-2dd5-48d8-bcd0-9898e09d3916,,,False,,
iOSとアクセシビリティ,林和弘,15m,"iOSには年に一回のバージョンアップで必ずアップデートされる領域がいくつも存在します。
アクセシビリティもその一つで、年々その機能は強化されており扱いやすくなってきています。

このトークではDynamic Type・Voice OverなどといったiOSのアクセシビリティ機能全般がどのように強化されてきたかの歴史をまとめます。
そして、それを受けて現在どのようなことができるのかを整理したいと思います。
特にOSバージョンによる機能差とメンテナンス性に注目しつつ、できる限り導入していくにはどのように実装をするのがいいのかを議論できればと思います。

本トークをきっかけにアクセシビリティの実装がより広まることを期待します。",https://fortee.jp/files/iosdc-japan-2019/speaker/848f0d06-ffa1-41ab-a36b-dce778f16639.jpg,kazuhiro494949,https://fortee.jp/iosdc-japan-2019/proposal/6c726f7f-0164-4a5f-ac9f-f9b536b4b1a0,,,False,,
型が解決されたSwiftのコードから、オブジェクト指向プログラミングにおける複雑度判定をしたい,林和弘,15m,"オブジェクト指向プログラミング(OOP)には、コードの複雑さを評価するための指標がいくつか存在します。それらはクラス間の関係性から各クラスの構造的な複雑さを評価し、一定のリファクタリング指針を提供しています。

その代表として、CKメトリクスというものが存在します。汎用的な指標のため、様々な言語でツールが実装されているのですが、Swiftへ適用しようとすると言語特有の問題に直面します。一番大きな問題が、型推論です。表現力の高い言語であるSwiftは型の省略がいたるところでされており、素のソースコードを見ただけではクラスがどのクラスに依存しているのかわかりません。

そこで、このトークではコンパイラによって生成された中間言語やIDE用のツールを駆使しながら構造的複雑さの評価を試みます。そして、メトリクスをベースにより良いクラス設計にしていく方法について議論したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/848f0d06-ffa1-41ab-a36b-dce778f16639.jpg,kazuhiro494949,https://fortee.jp/iosdc-japan-2019/proposal/e03c24a6-be68-4082-be70-0e90e9b3a2df,,,False,,
ARKitにおける平面検出のUX,林和弘,15m,"ARKitを利用すると、ほんの少しのコードでAR空間上へ3Dオブジェクトを配置できます。

そのため導入するのは非常に簡単なのですが、実際のアプリを開発するにはいくつかハードルを超えなければなりません。
その一つが「平面検出状態のUX」です。
例えば、カメラが向いている方向に認識された空間があるのか、ユーザーへ直感的に伝える必要があるでしょう。
また、ARKitは様々な状態を常に切り替えながら空間を認識しており、それも伝える必要があります。

このトークではユーザー・カメラ・AR空間の相互作用によって生まれる状態を視覚的に表す方法について議論します。
そして、ARKitの各クラスをどう協調させて実装するかデモを交えて話そうと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/848f0d06-ffa1-41ab-a36b-dce778f16639.jpg,kazuhiro494949,https://fortee.jp/iosdc-japan-2019/proposal/f17d384f-fe2c-4778-bc26-63b58c7513c8,,,False,,
Appleが提供してきたテスト周りの機能をふりかえる,tarappo,15m,"Appleは年々、テスト周りにおいてもいろいろな機能を提供してきてくれています。

今までにどのタイミングでどのような機能が提供されたか知っていますか？
そして、それはどのようなことが出来るかを知っていますか？

このトークではテスト周りに関するどのような機能をAppleは提供してきたのかWWDC2015の時代からふりかえってみます。
ふりかえりの中では次について説明をします。

 * どのような機能が提供されたか
 * どのような目的のものなのか

そして、この歴史を知ることにより、これから先はどのような変化があるのだろうかという話をします。",https://fortee.jp/files/iosdc-japan-2019/speaker/f91b366d-a45c-4dde-bc23-8d9540b6aa4b.jpg,tarappo,https://fortee.jp/iosdc-japan-2019/proposal/e7597aaf-b628-4ca5-9788-9ad5b4d24a76,,,False,,
コンポーネント指向 for iOS,はるふ,15m,"フロントエンド開発の中で、よくコンポーネント指向、アトミックデザインという言葉を聞きます。
昨年のiOSDCで話題になったMicroViewControllerは、コンポーネント志向と近い考えがあると考えています。
そこで、新しく発表されたSwift UIも含めて、iOS開発とコンポーネント指向との関連について考えます。",https://fortee.jp/files/iosdc-japan-2019/speaker/870ee312-1495-4f02-aaae-7e9e5fd817f9.png,_ha1f,https://fortee.jp/iosdc-japan-2019/proposal/c333e111-4df1-4cfa-a73c-bed7082b5cb3,,,False,,
大規模画面を支えるコードを分割する技術,はるふ,LT_R,"一つの画面にいろいろな機能が載ってしまうことは多々あります。
そんな時、ViewModelを作って分離するだけで満足してませんか？
機能自体が多いとそれだけでは不十分で、
他にもprotocol extensionやサービスの切り出しなどで、更にドメインごとに、コードを分割しています。
その具体例をお伝えします。",https://fortee.jp/files/iosdc-japan-2019/speaker/870ee312-1495-4f02-aaae-7e9e5fd817f9.png,_ha1f,https://fortee.jp/iosdc-japan-2019/proposal/7e5dc017-5e8a-48d7-9976-21a979159ca3,,,False,,
画面全部UIStackViewに載せた,はるふ,LT_R,"様々な画面で、画面内のオブジェクトをすべてUIStackViewに載せることで、統一的に、よりロバストに画面のレイアウトを開発できるようになりました。
最初は挙動が把握しづらく、扱いづらいイメージですが、比較的複雑なレイアウトでも実現できます。
具体的な例を出しつつ、どんな風にUIStackViewでレイアウトを組んでいるのかご紹介します！",https://fortee.jp/files/iosdc-japan-2019/speaker/870ee312-1495-4f02-aaae-7e9e5fd817f9.png,_ha1f,https://fortee.jp/iosdc-japan-2019/proposal/ccc11ff8-d68f-4ef2-ab0b-5359073a7681,,,False,,
スタートアップのエンジニアあるある,KBOY,LT,1年の正社員としてのシード期スタートアップのエンジニア生活、１年半のシリーズA~Bスタートアップでの正社員生活。そして今フリーランスとして携わる多くのスタートアップとのエンジニア生活、これらを通して僕が感じたスタートアップのエンジニアあるあるをお送りします。,https://fortee.jp/files/iosdc-japan-2019/speaker/67bc9ca7-139f-4429-9234-bf9ea772cfca.jpg,kboy_silvergym,https://fortee.jp/iosdc-japan-2019/proposal/28445457-6d68-450e-bd45-5256bee589cd,,,False,,
YouTuberから見たエンジニア界隈の闇,KBOY,LT,2019年1月からエンジニア系YouTuberを始めました。すると、今まで見えなかった初心者エンジニア界隈や、プログラミングスクール、その生徒たち、対立するエンジニア系インフルエンサーなどが見えてきました。本トークでは私から見るエンジニア界隈の闇をできるだけポップにお話します。,https://fortee.jp/files/iosdc-japan-2019/speaker/67bc9ca7-139f-4429-9234-bf9ea772cfca.jpg,kboy_silvergym,https://fortee.jp/iosdc-japan-2019/proposal/2eb649fe-52ff-468c-8bf8-64e0cfd71402,,,False,,
今こそwatchOS,堤 修一,15m,"Apple Watchが登場し、WatchKitフレームワークが発表された当時は各社こぞって対応アプリ（実態はApp Extension）をリリースしたものでした。しかしApple Watchのデバイスとしての性能はとても貧弱でできることは非常に限られており、また開発環境は著しく不安定だったこともあり、watchOS 2の頃には開発者の間でのwatchOSアプリ開発ブームは去っていきました。

しかしそれから数年経ち、Apple Watchの性能は大きく向上し、watchOS 6ではついにIndependent Appも作れるようになりました。多くの機能（フレームワーク）がApple Watch側で動作することになり、「こんなアプリがウォッチ上で動いたらいいな」というアイデアの実現可能性は昔とは比べるべくもないほどに上がっています。

本トークでは、Apple Watch / watchOSリリース当初はできなかったが今ではできるようになったことを中心に、「watchOSアプリ開発の今」についてお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/784bd4a1-8530-484e-a6f0-72e8ee9677f7.jpg,shu223,https://fortee.jp/iosdc-japan-2019/proposal/aed43999-373f-40fc-9cf9-c15cc32bc670,,,False,,
ARKitを日本一長時間触っている男が語るARKit3.0とAR Glassの未来,KBOY,15m,僕がGraffity Inc.というARスタートアップで仕事した時間は尋常じゃないと自負しています。めちゃくちゃ働きました。その仕事のほとんどがARKitです。今トークでは、ARKit3.0の注目どころやAppleから出るであろうAR Glassの展望、そしてARKitに特化して勝負している僕の今後のポジション戦略などをお話します。,https://fortee.jp/files/iosdc-japan-2019/speaker/67bc9ca7-139f-4429-9234-bf9ea772cfca.jpg,kboy_silvergym,https://fortee.jp/iosdc-japan-2019/proposal/97c3a50e-d3d1-40dd-9b2e-984693e74d5f,,,False,,
iOSでAB Testing,kouhei takamatsu,15m,"ABTestって面倒くさいですよね
分岐によってコード量は増え、将来的には除却しなければなりません。
しかし、どのコードがABTestのコードなのか、また、それらのコードはコードベース上のどこにいるのかわかりづらい場合が多いです。
また、Firebaseを使うのか、Adobe Targetを使うのか、ABテスト基盤の変更も発生したりすると地獄が待っています。

そういう辛みと戦うために、抽象化できるところは抽象化したり、ABテストのコードはABテストのコードだとわかりやすいように管理する方法を取る必要があります。
本セッションでは、オブジェクト指向の考え方に沿って、ABテストの運用にあった実装を考えてみたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/c3976ae0-4987-4472-a815-afd753857d44.gif,gaopin1534,https://fortee.jp/iosdc-japan-2019/proposal/d22cdf31-dbfd-4332-aa3c-d3077ee4af4a,,,False,,
完全攻略App Notarization,Noritaka Kamiya,15m,"macOS Catalinaではアプリの動作要件にApp Notarizationが追加されました。

今使っているアプリは動かなくなってしまうのか?
App Notarizationとは何で、何のために必要なのか?
アプリ本体だけでなく、パッケージにも署名が必要な理由とは?
OSSでビルド済みバイナリを配布するには?

今後iPad Apps for Macで盛り上がる、macOSアプリ開発に向けて、App Notarizationを中心にmacOSのセキュリティモデルについて解説します。",https://fortee.jp/files/iosdc-japan-2019/speaker/7e9ba49b-3d2d-44dd-bc15-628b029ca23c.jpeg,nolili,https://fortee.jp/iosdc-japan-2019/proposal/c463ec22-de18-4487-ba74-3636b67efd26,,,False,,
iOS 13 Sampler,堤 修一,15m,iOS 13は非常に多くの新機能が発表されました。Swift UI、Combine、Sign In with Apple、ダークモードといった誰もが注目する機能「以外」にも、Sound AnalysisやCore Hapticsといった新フレームワークからCore MLやVision、AVFoundationの追加APIも含め、アプリ開発の可能性を大きく広げる多くの新機能が追加されています。本トークでは、各新機能について、実際にどういうAPIになっていて何がどこまでできるのか、ドキュメントからはわからない実性能等にも踏み込んで、デモを交えつつ解説します。,https://fortee.jp/files/iosdc-japan-2019/speaker/784bd4a1-8530-484e-a6f0-72e8ee9677f7.jpg,shu223,https://fortee.jp/iosdc-japan-2019/proposal/31079705-754a-4ad6-b89f-0226e3f09dec,,,False,,
Storyboardとprotocolを使った画面遷移の個人的ベストプラクティス,417.72KI,15m,"去年のiOSDC2018で「プロトコルでStoryboardともっと仲良くなる」というタイトルでSegueを使いこなすことについてお話させていただきましたが、
その後の開発で動的な画面制御など、Segueだけではどうしても辛い場面が出てきてしまいました。

そこで、本セッションではprotocol extensionを使ったModal View表示の抽象化を提案しつつ、画面遷移の種類によるSegueとの使い分けについて個人的なベストプラクティスを紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/3ec83c33-0b05-4920-a512-b1199523d6ce.jpg,417_72ki,https://fortee.jp/iosdc-japan-2019/proposal/b67cb621-cc05-4c39-b095-49e191a62c45,,,False,,
日本語を話せない HomePod ちゃんとうまく付き合ういくつかのコツ,monoqlo,LT,"HomePod「ごめんなさい、わたしまだ日本語話せないの…」
ぼく「大丈夫だよ、気にしないで。ぼくたちきっとうまくやれると思う」
HomePod「でも… あなた英語全然話せないじゃない！うまくいきっこないわ…！！」
ぼく「と、とらすとみー」

このトークは、英語が堪能ではない私がアメリカで買ってきた HomePod を、
なんとか便利に使えないか奮闘する軌跡を綴ったショートストーリーです。

このトークを聞けば、きっとあなたも HomePod が欲しくなる…かもしれません。",https://fortee.jp/files/iosdc-japan-2019/speaker/ac51af72-ee48-418e-9a35-6e6de4cd3804.jpg,monoqlo,https://fortee.jp/iosdc-japan-2019/proposal/3e661b3b-f3d6-40d8-9c2f-5e7ea8888ad8,,,False,,
3DレンダリングエンジンをSwiftで自作する - Remix,堤 修一,15m,"ARやVRが盛り上がり、iPhoneではデプス撮影可能なカメラが搭載され、またiOS 13の標準UIも「奥行き」を意識させるようなものになっており、我々アプリ開発者も2Dの世界から3Dの世界へ意識を向けなければならない時代が来ようとしています。

しかしたった一次元増えただけの3Dは思いの外難しく、特に3Dレンダリングパイプラインは初心者にとって非常にハードルが高いものです。そんな中、昨年のiOSDCでの@ta_ka_tsu氏のセッション「作ってわかるレンダリングパイプライン」は、MetalやOpenGLが行っている3Dレンダリング処理を自作してみるという非常に興味深いものでした。確かに自分でつくってみるという経験は理解を一気に進めることができます。

本セッションは、原作@ta_ka_tsu氏の3Dレンダリングエンジンを自作するというコンセプトをお借りし、3Dを長らく難しいと感じてきた自身の視点から噛み砕いて再構成して、iOSエンジニアが3Dと仲良くなる入り口となるようなトークにしたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/784bd4a1-8530-484e-a6f0-72e8ee9677f7.jpg,shu223,https://fortee.jp/iosdc-japan-2019/proposal/2dce0d53-855b-4332-a505-9c0b96e7c5f3,,,False,,
デザイナー→Webエンジニア→iOSエンジニアと渡り歩いた僕なりのSwiftとの向き合い方と生かす戦略,酒井文也,iOS,"タイトルの通りなのですが、私のキャリアは割と複雑かつ一貫性が全くないキャリアにも見えるかもしれません。「エンジニア」になり、iOSアプリ開発という分野でのキャリアを歩んでいくことを決めた際に、「これまでの知見を捨て去るのではなく、上手に生かした戦略を見出そう」というテーマを持って今日まで幸運にもiOSアプリ開発に携わることができています。

この発表では、これまでの経験や興味・関心をベースとした切り口からどのようにSwiftひいてはiOSアプリ開発に対してのアプローチをしたか？そしてSwiftと向き合い、楽しみ方を見出したかという点についてお話できればと考えております。",https://fortee.jp/files/iosdc-japan-2019/speaker/84f53b23-5836-41dc-9bb2-3c17b18319d3.jpg,fumiyasac,https://fortee.jp/iosdc-japan-2019/proposal/1d98ab17-b7f7-43a3-ba59-a86d4c920684,,,False,,
マイクロインタラクションの効果的な活用方法について,鈴木慎吾,15m,"アプリやWebサービスを使っていると、些細だけど使いやすさに繋がっていたり、他のアプリにはない特徴となっているインタラクションに出会うことがあります。
こうしたマイクロインタラクションを有効に活用しているアプリの事例を通して、その目的やユーザーに及ぼす効果を検証します。

また自身が導入した際のモックづくりやデザイナー、エンジニア間でのコミュニケーションについてもお話しします。

本人による参考記事
https://note.mu/shingo2000/n/n51b7903c5192
https://note.mu/shingo2000/n/na55e4bf48468
https://note.mu/shingo2000/n/na0dd9ee70ea0",https://fortee.jp/files/iosdc-japan-2019/speaker/3de31361-9084-4488-bb45-7ecb5abac192.jpg,shingo2000,https://fortee.jp/iosdc-japan-2019/proposal/66698084-6bc1-4f9b-8890-026fb3990187,,,False,,
「非」音楽アプリのための音声処理,堤 修一,15m,"音声（オーディオ）データの処理といえば音楽向けのエフェクター等のような用途を想像してしまう方も多いかも知れません。しかし音声処理はもっと幅広い可能性のあるものです。たとえば動画は基本的に音声を持つので、話者を識別して特定話者のフレームだけを抽出してサイズを圧縮するといったことも可能ですし、マイクからの入力を利用して外界の状況をセンシングするのにも使えます。

iOSの音声処理系のフレームワークは、画像処理系のそれと比べて長らく大きな進化はしていませんでしたが、ここにきてついに機械学習の技術が取り入れられるようになり、多様な用途で役立つ可能性が飛躍的にアップしました。

本トークでは、「非」音楽アプリでの実用アイデアを示しつつ、それらを実現するための実装について解説します。iOSの最新の音声処理系のAPIについて習熟するとともに、あなたのアプリでの応用アイデアが浮かぶようなトークにします。",https://fortee.jp/files/iosdc-japan-2019/speaker/784bd4a1-8530-484e-a6f0-72e8ee9677f7.jpg,shu223,https://fortee.jp/iosdc-japan-2019/proposal/947c666b-58cc-41c5-b172-d901d66f4bf5,,,False,,
Memoji Stickersってどうやってアプリに組み込むの？,行木 千春,LT,"WWDC19のKeynoteで発表されたiOS 13の新機能、Memoji Stickers！
自分の顔に似せたり、メイクしたり、楽しそうですよね！

さて、技術的にはこれはどういうものなんでしょう。おや？セッションにもAPI Diffsにもそれらしい情報が見当たりません。でもキーボードには出てくるしどうしたら良いのかしら...？

本LTでは実際に動かしてみて得た知見を、キーボード入力の仕組みに触れつつ共有したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/452c773d-1a39-4ed7-b4cc-24ddc7fe439c.jpg,Ridwy,https://fortee.jp/iosdc-japan-2019/proposal/62b67a30-fd2d-409d-a4be-d87d6fbff6b7,,,False,,
ReactorKitのAndroid版を作った話,くぼぼ,15m,"iOSとAndroidでアーキテクチャや実装パターンが異なり、互いの実装がわからない、実装や挙動が異なるといった状況になったことはないでしょうか？
我々の開発しているアプリは、去年iOSのフルリニューアルを行いました。
その後、Androidアプリも機能ごとに段階的にリニューアルをすることになったのですが、アーキテクチャの選定に頭を悩ませていました。
そこでiOSで採用していたReactorKitのAndroid版を作成し、この問題を解決しました。
このトークでは、ReactorKitの解説や、そのAndroid版をどう実装したか、それによりもたらされた利点などについてお話しするつもりです。
iOSとAndroid双方のアーキテクチャ選定に迷っている方向けの内容です。",https://fortee.jp/files/iosdc-japan-2019/speaker/dc0050e0-72be-44ef-b488-0512844ed58c.jpg,swiz_ard,https://fortee.jp/iosdc-japan-2019/proposal/c703f293-b025-4790-98c2-2bdc34f17825,,,False,,
今こそ整理のとき！！「セミモーダル？」「ハーフモーダル？」「フローティングパネル？」,佐藤俊輔,LT_R,"Apple純正の「マップ」「株価」アプリなどのあのUI、皆さんは何と呼んでいますか？
「セミモーダル？」
「ハーフモーダル？」
「フローティングパネル？」
WWDC2019で標準UIとして公開されることも個人的には期待していましたが、そのような発表はされず、この呼び名についてはまだフワっとしたままです。

また最近では、例えばTwitterのツイートに対するアクションモーダル（とここでは呼んでみます。）のような、似たようなUIも普及してきました。

これらのようなUIをアプリに組み込もうと思ったとき、その利用用途と呼び名をチーム内で理解・共有しておかないと、コミュニケーションがとてもchaoticになってしまいます。

さらに厄介なのは、AndroidのMaterialDesignが提供しているUIも理解しておかなければならないことです。

このLTでは、これらを整理することで、より相応しいUIの選択とチーム内でのコミュニケーションに役立てればと思っています。",https://fortee.jp/files/iosdc-japan-2019/speaker/903d2e33-f864-4993-b276-1d52d1136f21.jpg,ushisantoasobu,https://fortee.jp/iosdc-japan-2019/proposal/4609715e-c73a-4591-ba41-8e41f2941da0,,,False,,
Bazelで実現するiOSアプリビルドの夢,Yutaro Muta,15m,"Bazel (https://bazel.build) は、Google主導で開発されているビルドツールのOSSです。特徴として以下が挙げられます。
- StarlarkというPythonベースの言語で書き、人間が読みやすく、理解しやすい
- ビルドが速く、キャッシュを利用したモジュールレベルの差分ビルド、テストが容易
- Linux、macOS、Windows上で動作し、サーバーサイド言語だけでなく、モバイルアプリのビルドも可能なマルチプラットフォームサポート
- 既に多くの言語がサポートされており、その他の言語やフレームワークもサポートできるようにBazelを拡張可能
Androidアプリ開発では、今年のGoogle I/Oで “Building Android Apps with Bazel” というCode Labが登場しましたが、Bazelの恩恵はiOSアプリ開発、Swift/Objective-Cでも享受することができます。
iOSではフレームワークを分割し、差分ビルドを活用する手法は一般化してきましたが、仕組みとしての理解は難しいものです。普段Xcodeで開発するだけでは、なかなかメリットを測ることができないですが、未来に覇権を握る可能性のあるツールのBazelについて、知っておくことは有用でしょう。
私自身、Bazelを触れ始めた初学者ではありますが、Bazelについて知り、興味を持つきっかけとなるトークをしたいと思います。

- Bazelとは何者なのか
    - Bazelでできること
    - Bazelのロードマップ
    - Starlark
- Bazelでビルドする
    - Swift
    - iOS
- iOSでBazelを使う上でのメリット/デメリット
- まとめ",https://fortee.jp/files/iosdc-japan-2019/speaker/d54de9ae-098b-4ade-bc92-cd7680b6a880.jpg,yutailang0119,https://fortee.jp/iosdc-japan-2019/proposal/54b3b858-721a-455e-83ef-708e3964cbd4,,,False,,
Modern Audio Programming in Swift,行木 千春,15m,"WWDC19ではCryptoKitやURLSessionWebSocketTaskが登場し、最後までCやC++のAPIとして残っていた領域のものがモダンな利用しやすい形になった印象があります。オーディオ処理についてもいくつもの古いAPIがiOS 13で非推奨となり、昔ながらのアプリはよりモダンな形への進化を迫られています。どんな対応が必要なのか？逆にパワフルになったSDKやハードウェアで何ができようになったのか？具体的なコードを交えながら話したいと思います。
音楽制作アプリ界隈を盛り上げる一助になれば幸いです！",https://fortee.jp/files/iosdc-japan-2019/speaker/452c773d-1a39-4ed7-b4cc-24ddc7fe439c.jpg,Ridwy,https://fortee.jp/iosdc-japan-2019/proposal/c399ffcd-967f-41e4-a937-7e4f12df5164,,,False,,
初心者でもわかる。 Speech / Natural Language Framework 🎤,だっちゃん,15m,"先日行われた SPAJAM 2019 の 関西予選にて「Speech Framework と Natural Language Framework」をつかったアプリを作り、優秀賞を受賞しました。

初めて使った Framework。Speech と Natural Language。

導入から実装。
そしてはまりにハマった「音声入力待ち状態」と「音声再生」。

実装ポイントや注意点をサンプルコードやデモンストレーションを交えて、初心者でも簡単に始められる `Speech Framework` と `Natural Language Framework` を紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/4be1b3d4-3c32-4db5-8484-619be2daf107.jpg,dchn2904,https://fortee.jp/iosdc-japan-2019/proposal/c35d3534-16f4-4698-bb4d-2b54345055d9,,,False,,
詳解！Swift PackagesのLinux対応を知ってみよう・やってみよう,Sho Ikeda（いけしょー）,15m,"WWDC 19で発表されたXcode 11の新機能の中でもとても喜ばしいものの1つは、XcodeとSwift Package Manager（SwiftPM）の統合でしょう。これまで主にサーバーサイドSwiftやCLIツールの開発でなければ使用できなかったSwift PackagesがXcodeとiOSアプリ開発で使用することができるようになったのです！言語公式のパッケージマネージャーがIDEと統合され、iOSアプリの開発にも使えるようになったのは一大事です。徐々にCocoaPodsやCarthageなどのサードパーティー製のツールを置き換えていくことや、SwiftPM対応ライブラリが増えることが期待できます。

一方で、SwiftはLinux（Ubuntu）にも対応しており、Swift Server Work Group（SSWG）による標準化やサーバーサイド向けのライブラリーの開発も進んでいます。iOSアプリ向けに増えるであろうSwift PackagesをLinuxにも対応させることは、サーバーサイドSwift、ひいてはSwift言語自体の盛り上げるにも繋がるはずです。

本トークでは次の内容についての紹介とライブデモを通じて、Swift PackageとサーバーサイドSwiftの盛り上げに貢献したいと思います！

- macOSとLinuxでの、SwiftとSwiftPMの違い
- Swift PackageをLinuxに対応させるためのTipsや注意点
- SwiftPMでのLinux用のテスト方法
- Swiftのスナップショットバージョンでの互換性確認
  - swiftenvを使った複数バージョンインストール
- Dockerを使った、手元の開発環境での動作確認
- Dockerやswiftenvを使った、CI環境での動作確認",https://fortee.jp/files/iosdc-japan-2019/speaker/b7b8c4f3-0727-4883-b0e0-bf056cb6d5f8.jpg,ikesyo,https://fortee.jp/iosdc-japan-2019/proposal/6c658bfc-3621-447c-8b91-6e3ab35847d0,,,False,,
Carthage 操作をシェルに置き換えて作業効率をあげたお話,だっちゃん,LT,"みんさん Carhage を使ってますか？
使ってますよね？
私は使っています。

- carthage bootstrap
- carthage build
- carthage update

などなど、これらをシェルに置き換えることで作業効率をあげたお話をさせていただきます。

また Carthage の管理からライブラリを削除した際のゴミファイル削除機能の紹介もさせていただきます。
これはおすすめですよ。",https://fortee.jp/files/iosdc-japan-2019/speaker/4be1b3d4-3c32-4db5-8484-619be2daf107.jpg,dchn2904,https://fortee.jp/iosdc-japan-2019/proposal/04052050-226d-4b6a-b75f-96e455730675,,,False,,
情報を見つけ出しコードを生成する,bannzai,15m,"皆さんコードは書いていますか？僕も業務でほぼ毎日書いていると思います。iOSアプリ開発や構成、テスト手法もだんだんと成熟してきたと言えアプリを作る上で各コード・実現したいことがパターン化されてきている部分も多く出てきたと思います。例えばリモートサーバーにあるデータに対してのAPI通信は多くのアプリが行っており、jsonのフォーマットでやり取りした内容をCodableでマッピングするコードなどパターン化していると言えます。これらのボイラープレートと化したコードを都度書くのではなく機械的にコード生成もできるようなツールも出てきました。OpenAPI Generatorはその一つです。この仕組はAPIのRequestやResponseの形式を仕様書を用意することで実現できています。その仕様書はルールに則って書かれており、そこからSwiftの構造体を作り出すことを実現しています。機械的なコード生成は人が書くよりもミスが起きにくく人が手を動かすよりも多くのコードを短い時間で作り出してくれます。

このトークではこういった定義情報を積極的に見つけ出しコードを生成する方法をお話していこうと思います。具体的には上記の例に出したAPIに対してのコードについて、またSourcery等を利用した既存のSwiftコードをメタ情報としてそこからコードを生み出す方法。Sketchから何か作ることはできないか。などなどを探し体験したことをもとにお話をしていこうと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/3b7851eb-166d-416c-9080-26391a48d465.jpg,_bannzai_,https://fortee.jp/iosdc-japan-2019/proposal/0e6d5d5e-e51c-4fdd-b3d0-044d7fc2c80f,,,False,,
あなたの知らない Xcodeショートカット 30連発,カシハラ,LT_R,"日本中のiOSエンジニアの皆さん、こんにちは！ Xcode で開発していて生産性にお困りではありませんか？

開発生産性を一番簡単に上げる方法は、ショートカットを覚えることです(断言)
しかしながら、意識しないと覚えられないのがショートカットでもあります

このトークでは Xcode のショートカットについて、普段使いするものから知っておくと便利というものまで余すところなくご紹介いたします
会場にいる皆さんの 開発にかかる一日あたりの時間を 1分/1人 短縮して、日本の iOSアプリ開発 の生産性を向上させることがトークの目標です！

さて、クイズです。次のショートカットは何でしょうか
・⌘ + T 連打 → ⌘ + ⇧ + バックスラッシュ 
（初めて知ったって方は☆をクリックしていただけると嬉しいです）",https://fortee.jp/files/iosdc-japan-2019/speaker/b4873752-2ddb-4be4-ad70-3d411b0f7264.jpg,kashihararara,https://fortee.jp/iosdc-japan-2019/proposal/adc4db2f-f535-4746-a445-68c7bde980ad,,,False,,
アプリを最小コストで海外で使えるようにする,to4iki,LT,"サービスのグローバル化が進行し、海外用にアプリを拡張させることがあります。
本トークでは、ローカライゼーションを行い別アプリ化するアプローチではなく、
既存のコードベースを元に最小コストで対応する際の注意すべき実装観点とデバッグ手法を紹介します。

- GDPRの考慮
- if 海外 { 機能を削る }
- サマータイムを踏まえた上での日付操作
- VPNを用いたマニュアルデバッグ
- アプリ申請時の設定",https://fortee.jp/files/iosdc-japan-2019/speaker/ae47f9e0-1cef-478f-b360-30e390c61020.jpg,to4iki,https://fortee.jp/iosdc-japan-2019/proposal/df9031ff-7295-4c0a-9667-4ee8fe2d7758,,,False,,
WWDCの最新情報キャッチアップをいかに早く・詳細にできるかの方法を考える！,Haseken,LT_R,"毎年WWDCが開催されると、Apple製品向けにプロダクトを展開している方は最新情報のキャッチアップを開始されるかと思いますが、
その量は多く、また個人でキャッチアップした内容は本当に正しいのか？また拾い切れているのか不安になるかと思います。

そこで、WWDCの情報キャッチアップのために、どのような方法が考えられるのか、セッション動画を見るときのコツ、またどのようなツールなどを利用すればキャッチアップしやすいかを個人的に行っている方法からお話しさせていただければと思います。

自分と同じようにキャッチアップに苦労している方の助けになれば & 他に良い方法があったら参加者の方より聞いてお話もできればと思っています。",https://fortee.jp/files/iosdc-japan-2019/speaker/e132ea13-fae9-4684-82f6-e35a3aa0c8b4.jpg,haseken_dev,https://fortee.jp/iosdc-japan-2019/proposal/1746ab9c-fee9-4953-b77d-a191e4cb7a68,,,False,,
型安全なコードレイアウトシステム,Takeda Kosuke,15m,"iOS では UIVIew.frame や Auto Layout のようなレイアウトシステムを使うことによって、多彩なレイアウトを実現している。特に最近では、SwiftUIの登場によってViewのレイアウトをコードで表現する需要が高まっている。

Auto Layout は連立方程式を解くことにより、柔軟なレイアウトを実現できる。Xib や Storyboard によるレイアウトチェックが備わっているが、コードで Auto Layout を行うと 、頭で複雑なレイアウトを組み立てる必要があるため、かなり高負荷な作業となる。他方、Swiftでは静的な型システムである種の間違いをチェックすることによって、プログラマにより安全なコーディングを提供している。

本発表では、型システムで Auto Layout のレイアウトチェックを限定的に再現することによって、柔軟で安全な書き方を紹介する。型システムでレイアウトチェックすることによって、 Xib や Storyboard ではできない動的なレイアウトでも制約が十分であることを保証できる。また、UIView.frameを使ったレイアウト, Auto Layoutや SwiftUI で使われているレイアウトシステムと比較を行う。",https://fortee.jp/files/iosdc-japan-2019/speaker/08e6f73d-3a71-46c1-804b-016a8221ba57.jpg,daketake,https://fortee.jp/iosdc-japan-2019/proposal/d2ffce79-8795-4131-b67d-ac5dd1415d73,,,False,,
セマンティックなアプリを開発しよう,三縞勇輝,15m,"画面サイズの違い、ダークモード、アクセシビリティ、ローカライズ・・・
アプリが使われる状況はさまざまあり、アプリ制作者が考えなければならないことは年々増えています。
すべての状況を考えての開発は現実的に難しいことが多いのではないでしょうか。

しかしSwiftUIの登場によってこの状況は変わりそうです。
今までよりももっとセマンティックなアプリを作れるようになり、それによりさまざまな状況に簡単に対応できるようになるでしょう。

このトークでは、アプリ制作者が考慮しなければならない事項を振り返りつつ、抽象度が高くセマンティックでできるだけ多くの状況に対応できるアプリをどのように作ればいいかをお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/0df56827-8445-41d0-97da-deea756a5680.jpg,mishimaybe,https://fortee.jp/iosdc-japan-2019/proposal/cfd408dc-90fb-447a-9c51-056ac4f08db1,,,False,,
マッチングアプリ開発に伴うAPIモックをクライアントのみで実現する,高橋友貴,LT,"マッチングアプリには「相手」が存在することが必要条件です。
そのような条件がある中でAPIの実装待ちなどで実装スピードが落ちないように、Peer to Peer通信で任意の相手をAPIモックの中に注入し表示できるデバッグモードを実装しました。
そのデバッグモードをどのように実現したのかをお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/9662228b-70e9-415a-9837-c4aee1a1c1e0.jpg,tomosan_dev,https://fortee.jp/iosdc-japan-2019/proposal/1af925f8-68a0-4f25-8352-0ff851308df8,,,False,,
あなたの知らない Xcodeショートカット 30連発,カシハラ,LT,"日本中のiOSエンジニアの皆さん、こんにちは！ Xcode で開発していて生産性にお困りではありませんか？

開発生産性を一番簡単に上げる方法は、ショートカットを覚えることです(断言)
しかしながら、意識しないと覚えられないのがショートカットでもあります

このトークでは Xcode のショートカットについて、普段使いするものから知っておくと便利というものまで余すところなくご紹介いたします
会場にいる皆さんの 開発にかかる一日あたりの時間を 1分/1人 短縮して、日本の iOSアプリ開発 の生産性を向上させることがトークの目標です！

さて、クイズです。次のショートカットは何でしょうか
・⌘ + T 連打 → ⌘ + ⇧ + バックスラッシュ 
（初めて知ったって方は☆をクリックしていただけると嬉しいです）",https://fortee.jp/files/iosdc-japan-2019/speaker/b4873752-2ddb-4be4-ad70-3d411b0f7264.jpg,kashihararara,https://fortee.jp/iosdc-japan-2019/proposal/75fc236f-3d89-485f-bb3a-8c2fcf8d77c7,,,False,,
社内アプリ配布システムをFirebaseで構築した話,scenee,LT,"この度、YappliにてFirebaseを用いたアプリ配布システムを構築しました。

Firebase Functions/Storage/Hosting/Authenticationを活用することで、とても簡単に素早くシステム構築できたことに大変驚きました。

この経験から私は、Firebaseはアプリ開発だけではなくその開発を支える社内インフラ全体でも大いに活用が見込めると考えるようになっています。

本LTでは、Firebaseでの社内配布システム構築で経験したFirebaseのPros/ConsをAWSとも比較しながら述べていきます。

また、実際に運用してはまった・失敗したポイントを共有します。

このLTをきっかけにFirebaseの社内インフラ活用ノウハウをみなさんと深めていけると嬉しいです。


* アプリ配布システム構築の動機
* Firebaseでの社内システム構築のAWSとの比較
	* Functions
	* Hosting
	* Storage
	* Authentication
* Firebase Functions/Hostingでのハマりポイント
* 今後実施していきたいこと",https://fortee.jp/files/iosdc-japan-2019/speaker/65c82854-45de-4512-9857-f2c1495846db.jpg,scenee,https://fortee.jp/iosdc-japan-2019/proposal/adb41631-5f7e-4b6d-9cfe-43aebb89a034,,,False,,
歴史あるWebAPIとCodable対応,Go Takagi,LT_R,"WebAPIと通信して取得したJSONをオブジェクトにマップする。
多くのiOSアプリではこの作業を実現するためにJSONのデータ構造を表現したEntityを用意し、変換しています。
Swift4でCodableが登場してこれらのマッピングはより簡潔な構造で記述することが可能となりました。
しかし、実際には運用するWebAPIの構造に応じて、Codableを単純には導入できないケースが出現し、細かい対応が必要となります。
本トークでは、既存のプロダクトにCodableを導入するにあたって、利用しているWebAPIのデータ構造に応じて、どの程度の記述量でコーダブレル(Codable)のかをまとめました。
新卒1年目が会社の既存プロダクトのCodable対応を通して得られた知見の発表です。初級者向けです！",https://fortee.jp/files/iosdc-japan-2019/speaker/18520707-c752-4567-a418-40dbc83f39b4.jpg,shimastriper,https://fortee.jp/iosdc-japan-2019/proposal/0f1d31c3-e7e3-4e5e-9628-6b62d56afb9c,,,False,,
App Store Connect as Code,カシハラ,15m,"2019年5月の弊社にて、退職された方のアカウントが App Store Connect に残っていることが見つかり、ちょっとした事件になりました(汗
ユーザー管理などをブラウザ上で行うのはカジュアルさに一定の利があるものの、会社として運用を行うに当たっては履歴が取れなかったり、アカウントの管理権限が様々な人に渡ってしまうなどの問題が簡単に発生してしまいます。

そこでアカウント情報などをコードで管理する手法を使うと、退職フローでアカウントの削除が適切に行われたかどうかをコミットログに残すことができます

また、コードで管理することで 依頼(プルリクエストの作成) と 承認 （Approve）の体制が自然と導入されて、過度な権限委譲や間違いなども未然に防げるメリットがあることも発見でした

このトークでは
・コードで管理する利点
・App Store Connect API での管理手法
・運用していく中で得た知見

についてご紹介いたします",https://fortee.jp/files/iosdc-japan-2019/speaker/b4873752-2ddb-4be4-ad70-3d411b0f7264.jpg,kashihararara,https://fortee.jp/iosdc-japan-2019/proposal/9fca08d9-e968-41a3-8021-0cc2fdc39eba,,,False,,
SwiftUI vs React Native,Masayuki Iwai,30m,"かたやWWDC 2019で発表された新しい宣言的UIフレームワーク・SwiftUI。かたやJSXという構文によって宣言的にUIを記述するマルチプラットフォームのフレームワーク・React Native。

両者は共にコンポーネント指向の思想に基づいてUIを設計・記述する、いわば同門のフレームワークです。

この講演では、言語の違いを超えてSwiftUIとReact Nativeを徹底比較。関連するCombineやReduxといったフレームワークにも触れつつ、両フレームワークのメリット・デメリットから、動作の仕組み、設計、既存プロジェクトからの移行、テストやデバッグなど、実践的な視点でお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/8a7abe81-3a29-4f9a-97a0-2e5355c03e2b.jpg,myb,https://fortee.jp/iosdc-japan-2019/proposal/baed69f6-d0bc-43f6-b8ab-c570395b46ce,,,False,,
Metal でレイトレースレンダリング,x67x6fx74x6f,LT,"WWDC 2018 のセッションで Metal Performance Shaders を使用した iOS や macOS で、
3DCG を使用するレイトレースレンダリングの実装が発表されました。

レイトレースレンダリングの概要と WWDC 2019 追加された Denoiser などの機能などを話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/eb52cf47-8696-49fe-957a-73a3bb8e77d9.jpg,x67x6fx74x6f,https://fortee.jp/iosdc-japan-2019/proposal/16f4e268-3838-44c9-a7f0-06296e5862be,,,False,,
SwiftUI vs React Native,Masayuki Iwai,15m,"かたやWWDC 2019で発表された新しい宣言的UIフレームワーク・SwiftUI。かたやJSXという構文によって宣言的にUIを記述するマルチプラットフォームのフレームワーク・React Native。

両者は共にコンポーネント指向の思想に基づいてUIを設計・記述する、いわば同門のフレームワークです。

この講演では、言語の違いを超えてSwiftUIとReact Nativeを徹底比較。関連するCombineやReduxといったフレームワークにも触れつつ、両フレームワークのメリット・デメリットから、動作の仕組み、設計、既存プロジェクトからの移行、テストやデバッグなど、実践的な視点でお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/8a7abe81-3a29-4f9a-97a0-2e5355c03e2b.jpg,myb,https://fortee.jp/iosdc-japan-2019/proposal/fb2beedf-4315-47ce-8925-aafac102c480,,,False,,
英文法でAPI Designを解析する,ころすけ,30m,"皆さんは学校で学んだ英文法についてしっかり覚えていますか？
このセッションでは高校までで学習する英文法を使ってUIKitなどAppleが用意したよく使うFrameworkのAPIを紐解いてお話します。
このセッションを聴くことによってAppleのFrameworkという例を基により良いAPI Designのヒントや実際に使える英文法についての知識を得られることでしょう。

【予定している発表内容】
- 英文法の前提知識の導入
- UIKitのメソッドを文型などの型を使って分類し、使われてる型、使われていない型について
- 上で分類したことを使って実際にどういう時にはどういう風に名前付けが行われているか
- よく使われてる動詞、時制、言い回しの紹介
- APIが作られた年代別に何か変化したか
などを予定しています。",https://fortee.jp/files/iosdc-japan-2019/speaker/f7f5b6c9-9ddc-4eea-bd37-59d70cddd031.jpg,cor0suke_k,https://fortee.jp/iosdc-japan-2019/proposal/c693d774-58a9-4ea0-a2d9-fbc24aa1eae9,,,False,,
ボイラーテンプレートを撲滅しよう！Sourceryを使ったメタプログラミング,東原,LT_R,"SourceryとはテンプレートよりSwiftのコードを生成するツールです。我々の開発スピードを上げたり、ヒューマンエラーを減らしてくれます。それによりdeveloperはより価値のある課題に取り組むことができます。
本トークではSourcey、stencilの解説、どんなテンプレートを書けば便利になるのか、導入したときのハマりどころなどを実際のプロジェクトをお見せして、リアルタイムに反映されるところまでご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/436fa283-191b-4f98-9d15-f066af0ba051.jpg,HideakiTouhara,https://fortee.jp/iosdc-japan-2019/proposal/28e64210-a3e9-4503-b967-ce33a1f50d89,,,False,,
日々の開発効率向上のための自動化への道,senogku akihisa,LT_R,"開発者が開発に集中するために、重要な自動化！！
大切だと分かっていても、なかなかやるのがめんどくさい自動化。

どのように自動化の開発を運用をしているかについて話します。

- 自動化初めの1歩
- メンテナンスについて
- いつやるのか？
- CIの移設
- 自動化の例
- etc..",https://fortee.jp/files/iosdc-japan-2019/speaker/6a60c0b7-7719-4689-93fa-fe45ddb3165f.jpeg,akihisasen,https://fortee.jp/iosdc-japan-2019/proposal/657a0719-ad82-424e-9059-626be6c39db1,,,False,,
英文法でAPI Designを解析する,ころすけ,15m,"皆さんは学校で学んだ英文法についてしっかり覚えていますか？
このセッションでは高校までで学習する英文法を使ってUIKitなどAppleが用意したよく使うFrameworkのAPIを紐解いてお話します。
このセッションを聴くことによってAppleのFrameworkという例を基により良いAPI Designのヒントや実際に使える英文法についての知識を得られることでしょう。

【予定している発表内容】
- 英文法の前提知識の導入
- UIKitのメソッドを文型などの型を使って分類し、使われてる型、使われていない型について
- 上で分類したことを使って実際にどういう時にはどういう風に名前付けが行われているか
- よく使われてる動詞、時制、言い回しの紹介
- APIが作られた年代別に何か変化したか
などを予定しています。",https://fortee.jp/files/iosdc-japan-2019/speaker/f7f5b6c9-9ddc-4eea-bd37-59d70cddd031.jpg,cor0suke_k,https://fortee.jp/iosdc-japan-2019/proposal/3a37ce1c-f63e-4823-ab19-d8fc31d72fa4,,,False,,
スクリーン配信機能の実装が大変だったので知見をお伝えします,FromAtom,15m,"iOSで画面を収録してライブ配信を行うにはReplayKit2を利用し、Upload Extension経由で画面を配信する必要があります。
さて、そのUpload ExtensionをXcodeで追加すると BroadcastSetupViewController というUIViewControllerが追加されます。

「これ……なに……？」

なんとか謎のViewControllerの正体を暴いた後、次の壁にぶつかりました。
Upload Extensionの動作時にはiOS側の制限で約50MBのメモリ制限がかかっているため、
気楽に処理を書くとすぐにメモリが枯渇してしまうのです。

「気軽に処理書くとiOSに殺されるんだが……？」

このトークでは、将来スクリーン配信機能をつくる誰かが少しでも楽になることを主目的とし、
スクリーン配信機能の作り方をまとめながら、ハマりどころやデバッグのコツをお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/90d30785-dcb9-417f-bfcb-54c039f32274.png,FromAtom,https://fortee.jp/iosdc-japan-2019/proposal/f7084cd9-d65f-41da-94e1-1eda2836e490,,,False,,
コードの複雑性を最小化するN個のコンセプト,shingt,15m,"日々アプリに機能実装をしていく中で、我々はコードに複雑性 (Complexity) を加え続けています。システムの理解を困難にする複雑性は開発スピードを落とし、バグを生じさせ、それが更に開発スピードを落とすという悪循環を引き起こします。

“A Philosophy of Software Design” という本があります。ソフトウェア開発における複雑性が何であるかを定義し、それを最小化するためのコンセプトを例とともに21章に渡り記述した本ですが、このトークではこのうちいくつかを抜粋して紹介し、実際にiOSアプリ開発のプロジェクトにどのように適用できるか、ということも交えた上でお話しします。

例として以下のような内容に関し話す予定です。
- Modules Should Be Deep
- Write The Comments First",https://fortee.jp/files/iosdc-japan-2019/speaker/e89ae9d9-4ff2-415c-84c3-3cadd7778a97.jpg,_shingt,https://fortee.jp/iosdc-japan-2019/proposal/5c1233cc-745c-4b3f-87c6-b16f6a90a64f,,,False,,
5分でわかる！Xcode 11から使えるXCFrameworks,Sho Ikeda（いけしょー）,LT,"WWDC 19で発表されたXcode 11の新機能の中でも喜ばしいものの1つは、XCFrameworksという、フレームワークの新しいバイナリ配布フォーマットです。これまでフレームワークの配布には"".framework""という拡張子のフォーマット（バンドル）が使われていました。しかし"".framework""のバイナリの配布では、1つのバンドルでシミューレーターとデバイス両方で使用できるようにするためのビルド手順の複雑さ、iOS用とmacOS用、tvOS用など対応プラットフォーム毎にバンドルを分離する必要（この場合は3つ）などの問題がありました。

Xcode 11から使える"".xcframework""という新しいフォーマットは、まさにこれらの問題を解決しているのですが、どのように解決しているのか、またどうしてXcode 11のタイミングで導入されたのでしょうか？本LTではXCFrameworksの構造や作成方法、そしてこの形式が導入された理由（の推測）に迫っていきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/b7b8c4f3-0727-4883-b0e0-bf056cb6d5f8.jpg,ikesyo,https://fortee.jp/iosdc-japan-2019/proposal/54d74689-a15f-4807-89e4-08e5ceab0372,,,False,,
マシンパワーに頼るだけじゃない！あなたのビルド待ち時間を短くする方法,東原,LT_R,"Xcodeのビルド時間はすべてのiOSエンジニアを困らせている問題です。しかし、解決できれば、その分我々の生産性を大きく上げてくれます。マシンパワーに頼らず、ビルド時間を短縮する方法を実際の事例とともにご紹介します。
どんなコードが遅くなるのか、その見直し方に興味がある方におすすめです。
本トークではあなたのプロジェクトのボトルネックをどうやって探すのか、調査~解決までの方法をお伝えし、実際にライブコーディングで披露します。",https://fortee.jp/files/iosdc-japan-2019/speaker/436fa283-191b-4f98-9d15-f066af0ba051.jpg,HideakiTouhara,https://fortee.jp/iosdc-japan-2019/proposal/c87c2256-7443-4342-9810-b2c42cdf4843,,,False,,
リアルタイム更新アプリの開発をして分かったこと,田口翔一,15m,"AWSでは、AppSyncというリアルタイム更新が容易に可能なサービスが展開されています。

AppSyncを利用すればリモートのDBが変更されたタイミングで
クライアントのデータを即時更新することができます。


昨今ではSNSやリアルタイム性が重要な情報が多くあります。
そういった情報の配信にAppSyncは非常に有用です。

ユーザーが能動的にPull to Refreshする必要がなく、画面を開いているだけで即時情報が更新されていくアプリを開発できます。
わざわざソケット通信を実装する手間もなく、AWSAppSyncライブラリを導入することで解決します。

このトークでは、
AppSyncを実際にプロダクトに導入した感想や、得たノウハウをご紹介できればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/b29f50db-5350-46f9-81b9-2462e0fdedbe.jpg,dokkoi_shoichi,https://fortee.jp/iosdc-japan-2019/proposal/c411cf4d-3e62-476d-9840-d88ada520480,,,False,,
5分でわかる!! Speech Framework と Natural Language Framework,だっちゃん,LT,"先日行われた SPAJAM 2019 の 関西予選にて「Speech Framework と Natural Language Framework」をつかったアプリを作り、優秀賞を受賞しました。

初めて使った Framework。Speech と Natural Language。

初めての導入から、実装、はまりにはまった音声入力待ち状態と音声再生などをサンプルコードを交えて紹介したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/4be1b3d4-3c32-4db5-8484-619be2daf107.jpg,dchn2904,https://fortee.jp/iosdc-japan-2019/proposal/fb4950dd-14da-47f0-a230-732bcc3f3510,,,False,,
ハッカソンで Speech と Natural Language を使って優秀賞を取った話,だっちゃん,LT_R,"先日行われた SPAJAM 2019 の 関西予選にて「Speech Framework と Natural Language Framework」をつかったアプリを作り、優秀賞を受賞しました。

初めて使った Framework。Speech と Natural Language。

初めての導入から、実装、はまりにはまった音声入力待ち状態と音声再生などをサンプルコードを交えて紹介したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/4be1b3d4-3c32-4db5-8484-619be2daf107.jpg,dchn2904,https://fortee.jp/iosdc-japan-2019/proposal/9abd3d53-f6f9-4892-ad36-98fc3d163956,,,False,,
SonarQubeを用いた技術的負債の可視化,しお,LT_R,"iOSプロジェクトで使うことの出来る静的解析ツールの一つとして、SonarQubeがあります。
SonarQubeには、
・Linting
・循環的複雑度の計測
・脆弱性を含む可能性のあるコードへの指摘
・カバレッジの推移の集計
などの機能があり、これらをグラフィカルに確認することができます。
今回はCIと組み合わせる事で、継続的にコードを解析して、自動レビューなどで品質を維持する方法を紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/59ae7731-91d6-4ad4-8eb0-6a286cc3b4c1.jpg,Scior,https://fortee.jp/iosdc-japan-2019/proposal/add027ee-8725-484f-b55a-164ffd713e98,,,False,,
iOS 13 から始めるゲームコントローラー,x67x6fx74x6f,LT,"次期 iOS, macOS, tvOS の Game Controller framework から MFi の専用コントローラー以外に PlayStation4 と Xbox One のコントローラーが使用できるようになりました。

新しくなった Game Controller framework の違いと新しい機能について紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/eb52cf47-8696-49fe-957a-73a3bb8e77d9.jpg,x67x6fx74x6f,https://fortee.jp/iosdc-japan-2019/proposal/6a2b2947-f90c-4e5d-bbb0-857bef8ba2a0,,,False,,
先生のことをお母さんって呼んでも大丈夫。そうObjecive-Cならね,bannzai,LT,"日本ではほぼすべての人が義務教育期間を経て立派な大人になっていくと思います。そして、そんな意識が曖昧な期間の人々は大きな過ちを犯しがちです。そう。例えば「先生」に対して「お母さん」と呼んでしまう問題は鉄板の過ちと言えるでしょう。人間は過ちを犯すものです。脳内では「先生」と「お母さん」は区別はついているはずなのに呼び間違えてしまう事象が発生してしまいます。脳内に常にバグがあります。そんな我々が書くプログラムにおいてもそのようなバグが混在しないと言えるでしょうか？いいえ。発生しないなんて言い切れないです。特にSwiftのような実行前に厳格にチェックが入るシステムなら事故は減らすことができると思います。しかし、私達が普段扱っているのはSwiftで記述できますが、未だに@objcなどの存在がちらほら見えるUIKitやFoundationを支えているであろう Objective-C の存在を感じざるを得ません。Objective-Cでは非常に動的にメソッドを呼び出すことが可能です。これはつまり「先生」を「お母さん」と呼び間違える可能性が出てくるということです。Objective-Cの世界では「先生」に対して「お母さん」と呼び間違えたら自分が羞恥心でクラッシュします。

このトークではObjective-Cにおいて、「先生」を「お母さん」と呼び間違えてしまった場合の復帰策についてお話していきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/3b7851eb-166d-416c-9080-26391a48d465.jpg,_bannzai_,https://fortee.jp/iosdc-japan-2019/proposal/221dd883-bbfe-4534-8590-18025178a5c1,,,False,,
SwiftUIの今後,Ka Ryu,LT,"今年のWWDCにてSwiftUIが発表されました。
SwiftUIを組み込んで、洗練されたアプリケーションUI構築を可能になっています。
デザインナーとの連携も容易になって、UI開発が大幅に効率化になりそうです。

今立ち上げているプロジェクトにSwiftUIを導入するかどうかを検討しています。
このトークでは、今までのUI開発とSwiftUI開発を比較し、
導入のメリットとデメリットをまとめて、SwiftUIの今後を話に行きたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/de117767-dab3-48e4-8b22-8d7d17c12f48.jpg,kane_liu,https://fortee.jp/iosdc-japan-2019/proposal/c7d381e0-130f-443b-98c2-1e8313d21011,,,False,,
Bow.swiftで始めるFP入門 Tagless Finalのサンプル説明まで,嶽雅也,15m,"Higher Kind Typeをサポートしたライブラリとして、Bow.swiftがあります。
SwiftでのFunctional Programingの入門についても最適であり、そちらの各種サンプルの説明やRx Swiftとの結合について話します。
また、この中でTagless Finalのサンプルもあり、こちらについてもカバーしたいと思います。

時間的に可能であれば、実際のユースケースまでカバーします。",https://fortee.jp/files/iosdc-japan-2019/speaker/b2f77ead-3a7f-4712-b884-a42e64d63139.jpg,azarashi1229,https://fortee.jp/iosdc-japan-2019/proposal/359e4355-aff3-4a73-99c5-8fe1942002c0,,,False,,
新卒がAppSyncを用いたリアルタイム更新アプリケーションの開発に配属された件,田口翔一,LT,"新卒入社した会社でAppSyncを利用したリアルタイム更新アプリケーションの開発に配属されました。
AppSync？graphQLとはなんぞやというところから、
リモートのDBが更新されたらクライアントに即時リアルタイム更新を実装するまでの過程をご紹介できればと思います。

昨今アプリ開発においてリアルタイム性が重要になってきているように感じます。
しかし一定間隔でAPIを叩いたりサイレントPushを使用するのは現実的ではありません。

このトークではAppSyncを0から学び始めた知見やキャッチアップ、実装方法を共有します。",https://fortee.jp/files/iosdc-japan-2019/speaker/b29f50db-5350-46f9-81b9-2462e0fdedbe.jpg,dokkoi_shoichi,https://fortee.jp/iosdc-japan-2019/proposal/71d38968-0ade-45f3-8116-aef93750da01,,,False,,
iOSネイティブ開発から離れみて気づいたこと。,HONDA,LT_R,"PWA, Cordova, React Native,とネイティブ開発から離れて、Web技術でアプリを作ることで得た気づきと、ネイティブで作る場合との違いについてLTします。",https://fortee.jp/files/iosdc-japan-2019/speaker/4c8e76ad-00ec-450d-9ef2-4ee7e1a2398f.jpg,1wa46,https://fortee.jp/iosdc-japan-2019/proposal/79136b8f-6805-4302-8d4e-5d84fae64138,,,False,,
AutoLayoutのワーニングを解消するためにやったこと,Rin Kochi,LT,"Autolayoutを利用する際、誰でも「Unable to simultaneously satisfy constraints.Probably at least one of the constraints in the following list is one you don't want.」みたいなワーニングを一度見たことがあると思います。
複雑な画面で、誤った制約を探し出すために私がやったことを紹介します。
・Autolayoutのデバック
・chiselの導入と使い方",https://fortee.jp/files/iosdc-japan-2019/speaker/75e62971-6a78-4f35-b1cf-f1299fa365ce.jpg,chichilam86,https://fortee.jp/iosdc-japan-2019/proposal/e6941a69-bbc3-4224-b27b-7046b7030d53,,,False,,
爆速に開発するためのXcode Templateカスタマイズ,Yoshitaka Shindo,LT_R,"エンジニアに求められるのは圧倒的開発効率であり、そのためには日々の作業時間を如何に減らせるかが重要です。
最近のテスト・設計の議論の流れから取り入れたアーキテクチャによって、
プロジェクトにおけるモジュール作成に必要なファイル数やボイラープレートが増加していませんか？
Xcode Templateを有効に使うことで、それらを作成する時間を大幅に削減する方法を紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/bbdfa3b5-a205-4448-a257-0db31d2ed3d2.jpg,shindyu,https://fortee.jp/iosdc-japan-2019/proposal/49a5717e-9270-4f7f-83b9-2180fde02766,,,False,,
Violet Evergardenに学ぶリモートワーク文字コミュニケーション,y.imajo,LT,"ヴァイオレット・エヴァーガーデンは、「自動手記人形」と呼ばれる手紙の代筆屋の少女を中心に繰り広げられる群像劇であり、第5回京都アニメーション大賞の大賞受賞作です。2018年1月には京都アニメーションによりアニメ化もされました。

物語は少女兵として戦うことしか知らず、人の心が理解できない主人公ヴァイオレットが戦争終結後に手紙の代筆屋として言葉を仲介する仕事を通じて人と触れ合いながら成長していくストーリーです。

現在、iOSアプリ開発をしていく我々の仕事は単にプログラミングをするだけではなく、Pull Requestのレビューを含め、様々な同僚や顧客とコミュニケーションを行って最良の手段をとることが必須となってきました。そして昨今のインターネット回線の充実によって場所を選ばない開発と相まって、コミュニケーション手段は文字コミュニケーションの比重は高くなっています。しかし、その文字コミュニケーションによって、時には人を意図せず感情的にさせてしまう。そのような問題も多くあるでしょう。

我々はそのような問題を回避するため、何を理解しようとすべきなのか、
心を伝えようともがくヴァイオレット・エヴァーガーデンに重ね学んでいきましょう。",https://fortee.jp/files/iosdc-japan-2019/speaker/739bb25a-c20d-431f-a87c-f9d63bbdd05d.jpg,yimajo,https://fortee.jp/iosdc-japan-2019/proposal/d9cec3cb-e3a9-43ce-91b4-feb1d8f3f06a,,,False,,
Advanced Segue （2019年のSegue事情）,所友太,15m,"Segueでできること、できないこと、とにかくSegue（UIStoryboardSegue）について凝縮して紹介します。
通常の使い方からUnwindSegueを使うメリット、Xcode 11から利用できるようになったIBSegueActionまで。
Segueを愛して7年の私が、これまでSegueを避けてきた皆さんにもSegueの魅力を知っていただけるようなトークができればと考えています。",https://fortee.jp/files/iosdc-japan-2019/speaker/2d8721c3-4a04-40e3-ac84-ed0893d97f68.jpg,tokorom,https://fortee.jp/iosdc-japan-2019/proposal/cde5fefc-f899-4dea-b356-bd556f625b83,,,False,,
ベジエ曲線のその先へ 〜ベジエ曲線とその拡張〜,Youichi Takatsu,30m,"みんな大好きベジエ曲線。
とても便利なベジエ曲線。
コンピューターで計算するのに適した構造をしているため、「カタチ」を扱うアプリケーションのあらゆる分野で利用されています。

大変便利な曲線ですが、制約がある以上もちろん万能ではありません。

例えばUIBezierPathでは円弧の描画(addArc)もサポートされていますが、実は厳密には円弧はどう頑張ってもベジエ曲線で表現することはできません。
円弧を正確に表現するには有理ベジエ曲線と呼ばれる曲線に拡張する必要があります。

本セッションではまずベジエ曲線の定義から始めて、その諸性質を確認します。
そしてその拡張である有理ベジエ曲線、B-スプライン曲線、NURBSなどにおいてベジエ曲線からどのような拡張がなされているのかを見ていきます。

また、曲面への拡張についても紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/09ec1eb6-908d-43ea-8948-4b85168745bf.jpg,ta_ka_tsu,https://fortee.jp/iosdc-japan-2019/proposal/1959a59d-f5db-4c13-829f-c95836bf86ea,,,False,,
MVVMからの脱却、RIBsアーキテクチャ採用への道のり,今入庸介,15m,"アーキテクチャの選定はアプリの開発・運用を行うにあたって非常に重要です。
約半年かけてMVVMからRIBsへアーキテクチャの変更を行いました。既存アプリに潜んでいた問題点や課題を始め、なぜアーキテクチャを変更する必要があったのか、どのようにしてアーキテクチャの変更を行ったのかを紹介します。
また、アーキテクチャを変更してから1年が経ち、実際に運用して得られた知見やアーキテクチャ変更時のつらみについても述べます。


【発表内容の概要】
- アーキテクチャ変更したきっかけ
  - 既存の問題点
  - あるべき姿
- アーキテクチャを選定する上でのポイント
  - 自社アプリに最適なアーキテクチャは何か
- どのようにしてアーキテクチャの変更を行ったのか
  - アーキテクチャ変更時のつらみ
- アーキテクチャを変更して得られたこと
- アーキテクチャ変更と同時に行った改善",https://fortee.jp/files/iosdc-japan-2019/speaker/8db079aa-df7b-4418-a6ca-a4630caa687f.png,kamekiti,https://fortee.jp/iosdc-japan-2019/proposal/c6598246-4bc7-4eee-a85c-313f2ce88c3c,,,False,,
みんなの知らない広告の世界,kotobuki,15m,"アプリ開発者の収入源の1つとして重要な広告。その裏側はiOSやSwiftと同じく日々進化しています。

私が開発しているアプリでは、1つの広告SDKを使うシンプルな実装から、複数の広告SDK対応を利用する複雑な実装への切り替え、そして自社広告枠の導入と大きな変化をしてきました。

このトークでは広告導入時の悩み、原因究明が難しい広告起因のクラッシュ対応方法、適切なオプトアウトなど、広告に隠された細やかな表示制御についてお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/afeee364-a1fb-4f04-b38d-cba3d7b2779b.jpg,Engyokun,https://fortee.jp/iosdc-japan-2019/proposal/f6672582-c44a-421e-8dea-536a041f6ac6,,,False,,
Kotlin Native Multiplatform入門,Kentaro Kawakami,LT,"Xamarin、Flutter、React Nativeなどクロスプラットフォーム戦が激化する中で、今最もアツい（と勝手に思っている）Kotlin Native Multiplatform（MPP）の入門をiOSエンジニア視点から見てみたいと思います。

MPPの入門を実際に行い、それらから見える良いこと、他のクロスプラットフォームとの違い、iOS側の辛みやCIについてどうするのか等お話できればと思っています。",https://fortee.jp/files/iosdc-japan-2019/speaker/23cb6a23-136d-41b1-bb18-1db0db3afbbb.jpg,Knschwarze,https://fortee.jp/iosdc-japan-2019/proposal/0875ed7b-e910-4365-98f2-33a7c75e2431,,,False,,
5分でわかる！Swift PackagesのLinux対応を知ってみよう・やってみよう,Sho Ikeda（いけしょー）,LT,"WWDC 19で発表されたXcode 11の新機能の中でもとても喜ばしいものの1つは、XcodeとSwift Package Manager（SwiftPM）の統合でしょう。これまで主にサーバーサイドSwiftやコマンドラインツールの開発でなければ使用できなかったSwift PackagesがXcodeとiOSアプリ開発で使用することができるようになったのです！言語公式のパッケージマネージャーがIDEと統合され、iOSアプリの開発にも使えるようになったのは一大事です。徐々にCocoaPodsやCarthageなどのサードパーティー製のツールを置き換えていくことや、SwiftPMに対応したライブラリが増えることが期待できます。

一方で、SwiftはLinux（Ubuntu）にも対応しており、Swift Server Work Group（SSWG）による標準化やサーバーサイド向けのライブラリーの開発も進んでいます。iOSアプリ開発向けに増えるであろうSwift PackagesをLinuxにも対応させることは、サーバーサイドSwiftを盛り上げ、Swift言語自体を盛り上げることにも繋がるはずです。

本LTでは次の内容について紹介し、Swift PackageとサーバーサイドSwiftの盛り上げに貢献したいと思います！

- Swift PackageをLinuxに対応させるためのTipsや注意点
- 手元の開発環境での動作確認
- CI環境での動作確認",https://fortee.jp/files/iosdc-japan-2019/speaker/b7b8c4f3-0727-4883-b0e0-bf056cb6d5f8.jpg,ikesyo,https://fortee.jp/iosdc-japan-2019/proposal/48027bb4-9afb-43f2-8f78-e1c257ab7246,,,False,,
10年モノアプリ刷新プロジェクトのお話,miki_shunsaku,15m,"私が開発しているアプリはリリースから約10年経過している古株アプリです。
今年アプリの刷新・リアーキテクチャを行いました。
その際にシステム的にもサービス的にもより良くしていくために行った開発プロセスを公開していきます！
- 既存アプリのお話
- リアーキテクチャのお話
- デザインスプリントのお話
- CI周りのお話
- βテストのお話",https://fortee.jp/files/iosdc-japan-2019/speaker/ed9d8b47-27a6-4031-9dd5-97a05a46ad38.jpg,shun_sakuuuu,https://fortee.jp/iosdc-japan-2019/proposal/3af5b603-c2ef-455a-ac38-c9c4254a7b35,,,False,,
Swift CLI with Package Manager,Yutaro Muta,LT,"Swift Package Manager (SwiftPM) は、ついにXcode 11からIDEの機能として使えるようになります！
我々が使用しているサードパーティライブラリのいくつかは、実は既にSwiftPM対応しているものも多く存在しています。しかし、現状のCocoaPodsやCarthageに依存したプロジェクトを扱う中に、更にSwift Packageを同居させるのは少々ハードルが高く感じてしまいます。iOSやmacOS開発で使用する時が来る前の初歩として、まずはCLIツールの実例からSwiftPMを始めるきっかけにしましょう。
また、SwiftPMはOSSであり、普段の開発では触れることがないようなAPIも垣間見え、非常に魅力的なコードです。
このLTでは、SwiftPMについての概要から使用までをノンストップで説明し、SwftPMの魅力についても触れながら、チャレンジのきっかけとなるトークにしたいと思います。

- SwiftPMとは
    - Modules
    - Packages
    - Products
    - Dependencies
- 現状での制約
- CLI作成からSwiftPMにチャレンジする
    - 事始め
    - 実装におけるTips
- SwiftPMの魅力と今後",https://fortee.jp/files/iosdc-japan-2019/speaker/d54de9ae-098b-4ade-bc92-cd7680b6a880.jpg,yutailang0119,https://fortee.jp/iosdc-japan-2019/proposal/09978c70-fb4c-4bb5-adea-edb5fd43cb1f,,,False,,
Auto-Renewable Subscriptionsの新しいオファー使ってますか？,m_orishi,30m,"2019年2月にAppleがAuto-Renewable Subscriptionsの新しいオファーである「プロモーションオファー」を公開しました。
現在登録中のユーザー、または以前登録を行っていたユーザーに対して、期間限定で割引価格を提供できるというものです。

このトークでは、既存のお試しオファーと比較を行うことで、プロモーションオファーではどのようなことができるのか？をお話しします。

また、オファーを設定する際に選択することになる
・無料トライアル
・都度払い
・前払い
の3つのオファータイプについても紹介し、
これらを組み合わせて実際にユーザーに提供するにあたって発生した問題や注意点についてお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/c6e39d32-1ff4-4fe4-aa93-912d972c8d31.jpg,m_orishi,https://fortee.jp/iosdc-japan-2019/proposal/686b36fd-8206-4eea-97fe-de841eba55b3,,,False,,
カスタムInstrumentsの簡単レシピ,行木 千春,LT,"Instrumentsといえば、「リーク検出などに便利なのは知っているけれど、とにかく重くてまともに動かない...」なんて印象を持たれている方もいるのではないでしょうか。実はXcodeの進化の陰で、Instrumentsも10から生まれ変わったようにパフォーマンスが向上し、できることが増えました。

特にカスタムInstrumentsはとても強力です。
アプリに機能を実装し、UIが良い感じに動いているのを確認し、リリースしてみたら...ログがうまく送れていなかったり、必要以上にAPIを叩いてしまっているのが発覚、なんて経験はありませんか？カスタムInstrumentsを作ってアプリ内のイベントを可視化すれば、こうした問題も一目瞭然です！
また、見たい処理だけにフォーカスすればパフォーマンスのネックも見つけやすく、高速化にも役立つでしょう。

作成にはCLIPSという言語を利用したり、パラメータの渡し方に若干の癖とコツが必要だったりという所もあるのですが、大量のコードは必要ありません。本LTではいくつかのユースケースについて作り方のレシピを紹介します。是非、あなたのアプリにも組み込んでみてください。",https://fortee.jp/files/iosdc-japan-2019/speaker/452c773d-1a39-4ed7-b4cc-24ddc7fe439c.jpg,Ridwy,https://fortee.jp/iosdc-japan-2019/proposal/44cba00e-b5cf-4a05-898a-b7f57eb3bbe0,,,False,,
ゆるふわFlux,熊本浩紀,LT,"iOSではMVC, MVP, MVVM, Fluxなど様々なデザインパターンが使って開発していると思います。
iOSでFlux適用する場合、web frontendの世界で実質デファクトなっているFluxの実装reduxをSwiftで実装したReSwiftなどがよく知られています。
しかし、iOSではreactのような差分更新の仕組みがないため、reduxで管理されたstateをViewに反映するには、ひと工夫必要だと感じています。
また、reduxでは非同期処理を書くことができず、別途middlewareを用意する必要があります。
ReSwiftを導入しようとしたもののコストが高いと感じたので、それらをより手軽扱える、ゆるくfluxできるライブラリを自作した話をしたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/c6a35735-0ec4-49c8-b4a6-fd6c15acd730.png,twitter,https://fortee.jp/iosdc-japan-2019/proposal/a3e927f8-2ead-44ee-89d7-bcc5f9870d54,,,False,,
プライバシーから見えるiOS 13とその対応,scenee,15m,"WWDC'19で「Sign in with Apple」が発表されたことは記憶に新しいかと思います。

賛否両論ありますが、実際に実装してみると、認証のUI/UXを変える技術として大変魅力に感じています。

これはデバイスと密に連携してセキュリティとプライバシーを追求した認証技術であり、アップルは誰が情報を保持しコントロールすべきかを明確に示しました。

しかし、プライバシーや認証関連のアップデートは「Sign in with Apple」だけではありません。その他にも興味深い発表が多数ありました。

WWDCのセッションを見通して、「プライバシー」が大きなテーマの一つであり、他社との差別化も含めて非常に重要視されていることがわかります。

このセッションでは、アップルの考えるプライバシーの基本理念を解説し、「Sign in with Apple」をはじめとしてiOS13に焦点を当ててながらWWDC'19のアップデートをまとめます。そして、それらから見えるアップルの方向性、私たちの対応・活用方法を考察していきます。

Topics

* Apple Privacy Principle
* Sign in with Apple
* WebAuthn
* 機械学習とプライバシー
* プライバシーから見るアップルの未来",https://fortee.jp/files/iosdc-japan-2019/speaker/65c82854-45de-4512-9857-f2c1495846db.jpg,scenee,https://fortee.jp/iosdc-japan-2019/proposal/d28057b5-ff26-4bd7-83d2-882443479630,,,False,,
Auto Layout パフォーマンスチューニング,Jiro Nagashima,15m,"Auto Layoutは過度に制約が複雑になり過ぎるとビューのサイズや位置の計算に著しく時間を要することがあります。UIStackViewは複雑な制約を指定せずにAuto Layoutによるレイアウトの仕組みを利用できる一方で、幾層にも入れ子にするなど複数のUIStackViewを単一画面内で用いると複雑な制約を扱うことになり兼ねません。

このトークでは、複数のUIStackViewを扱うことで生じていた画面描画の遅延の実例を取り上げ、計測による問題箇所の特定と解決までのプロセスを紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/9694fe2e-c968-4ee1-bc6b-d8a5c7629ce3.jpeg,hedjirog,https://fortee.jp/iosdc-japan-2019/proposal/abd146cc-7257-463e-8f60-745fc99ceecb,,,False,,
フリーランスiOSアプリ開発者という選択,所友太,15m,"こういうセッションがあっても良いかなと思い投稿させていただきます。
フリーランスとしての仕事のしかたは人によって様々と思いますので、４人くらいの座談会形式のほうが適切なのかもしれません。
時間も私１名なら３０分程度でまとめるのが良いかなと考えていますが、複数人なら適切な時間でやるべきかもしれません。

私の経歴は、
- 受託開発メインの会社に勤務 12年
- 自社サービスを持つ会社に勤務 2年
- 上記と重複しつつ個人事業主（フリーランス）としての活動 5年
- 法人化してのデザイナーさんと２名での活動 2年
といったところです。

私１名でやる場合は、フリーランスとして活動して良かった面、辛かった面の両面をできるだけどちらかに片寄らせずに紹介していければと思います。
具体的な内容としては、

- フリーランスになって良かったこと
- フリーランスになる前のほうが良かったこと
- 受託開発時代にいやいややっていたがフリーランスになって役立っている知識や経験
- フリーランスになる前から将来フリーランスになったときのために心がけていたこと
- 金額の見積もり時に注意していること
- 個人事業主/法人化を経験してみてのPros/Cons
- 顧客とのコミュニケーション
- 受ける仕事の数やボリュームについて感じていること

などをイメージしています。",https://fortee.jp/files/iosdc-japan-2019/speaker/2d8721c3-4a04-40e3-ac84-ed0893d97f68.jpg,tokorom,https://fortee.jp/iosdc-japan-2019/proposal/dbe76a16-0fd7-4185-a7ed-9eae7d382da9,,,False,,
SwiftShot、SwiftStrikeを参考にAR対戦ゲームを作ろう,satoshi0212,30m,"RKitは毎年新機能が追加され洗練され続けています。
WWDC 2018ではSwiftShot、WWDC 2019ではSwiftStrikeというAR対戦ゲームがプレイアブルデモとして紹介され、開発者にはソースも公開されています。

2つのアプリの実装を読み解き、それを参考にオリジナルのAR対戦ゲームを作る流れを解説していきます。

この発表では以下の内容について話す予定です:
- SwiftShot、SwiftStrikeの実装概要解説
- P2P通信について
- プロトコルについて
- オンボーディングについて
- ゲーム進行について
- デモ",https://fortee.jp/files/iosdc-japan-2019/speaker/4c276844-a3e6-4afd-a1c7-568ae49478ce.jpg,shmdevelop,https://fortee.jp/iosdc-japan-2019/proposal/6c585997-d0ac-42ec-a425-f0d06d871da1,,,False,,
FirebaseからAWS環境下へ移行した際に気をつけた10のこと,Masakazu Sano,15m,"最近取り組んでいたプロジェクトでは、とある事情から

「FirebaseからAWS環境下のREST APIに全て乗り換えなければならない」

という大きな課題がありました。

ご存知の通り、FirebaseはmBaaSです。また本プロジェクトで採用されていたFirebase Realtime Databaseについても、ローカルデータ同期という特性上、それぞれ理想とする設計上のポイントが通常のアプリとはやや異なります。
今回の発表では、移行作業に際して、

- どのようなアプリアーキテクチャに寄せていったのか
- どのような改善を行い、またどのような改善を行わなかったのか
- 移行作業を通して、ユーザーや開発者にどのような利益をもたらしたか

という点を踏まえ、10のケースとしてご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/eec31ab3-d9c6-42e8-aa23-6d6cff8e641b.jpg,kz56cd,https://fortee.jp/iosdc-japan-2019/proposal/bcef0631-7701-4c60-a5de-8096c099b216,,,False,,
FirebaseからAWS環境下へ移行した際に気をつけた10のこと,Masakazu Sano,LT,"最近取り組んでいたプロジェクトでは、とある事情から

「FirebaseからAWS環境下のREST APIに全て乗り換えなければならない」

という大きな課題がありました。

ご存知の通り、FirebaseはmBaaSです。また本プロジェクトで採用されていたFirebase Realtime Databaseについても、ローカルデータ同期という特性上、それぞれ理想とする設計上のポイントが通常のアプリとはやや異なります。
今回の発表では、移行作業に際して、

- どのようなアプリアーキテクチャに寄せていったのか
- どのような改善を行い、またどのような改善を行わなかったのか
- 移行作業を通して、ユーザーや開発者にどのような利益をもたらしたか

という点を踏まえ、10のケースとしてご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/eec31ab3-d9c6-42e8-aa23-6d6cff8e641b.jpg,kz56cd,https://fortee.jp/iosdc-japan-2019/proposal/ff7285a5-111a-4e3f-bd30-ce720423f663,,,False,,
Auto-Renewable Subscriptionsの新しいオファー使ってますか？,m_orishi,15m,"2019年2月にAppleがAuto-Renewable Subscriptionsの新しいオファーである「プロモーションオファー」を公開しました。
現在登録中のユーザー、または以前登録を行っていたユーザーに対して、期間限定で割引価格を提供できるというものです。

このトークでは、既存のお試しオファーと比較を行うことで、プロモーションオファーではどのようなことができるのか？をお話しします。

また、オファーを設定する際に選択することになる
・無料トライアル
・都度払い
・前払い
の3つのオファータイプについても紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/c6e39d32-1ff4-4fe4-aa93-912d972c8d31.jpg,m_orishi,https://fortee.jp/iosdc-japan-2019/proposal/24653016-9625-499e-abfb-1440aec3cd90,,,False,,
FirebaseからAWS環境下へ移行した際に気をつけた10のこと,Masakazu Sano,LT_R,"最近取り組んでいたプロジェクトでは、とある事情から

「FirebaseからAWS環境下のREST APIに全て乗り換えなければならない」

という大きな課題がありました。

ご存知の通り、FirebaseはmBaaSです。また本プロジェクトで採用されていたFirebase Realtime Databaseについても、ローカルデータ同期という特性上、それぞれ理想とする設計上のポイントが通常のアプリとはやや異なります。
今回の発表では、移行作業に際して、

- どのようなアプリアーキテクチャに寄せていったのか
- どのような改善を行い、またどのような改善を行わなかったのか
- 移行作業を通して、ユーザーや開発者にどのような利益をもたらしたか

という点を踏まえ、10のケースとしてご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/eec31ab3-d9c6-42e8-aa23-6d6cff8e641b.jpg,kz56cd,https://fortee.jp/iosdc-japan-2019/proposal/67623aa2-c222-47ad-ba54-cb143e7505e3,,,False,,
SwiftShot、SwiftStrikeを参考にAR対戦ゲームを作ろう,satoshi0212,15m,"ARKitは毎年新機能が追加され洗練され続けています。
WWDC 2018ではSwiftShot、WWDC 2019ではSwiftStrikeというAR対戦ゲームがプレイアブルデモとして紹介され、開発者にはソースも公開されています。

2つのアプリの実装を読み解き、それを参考にオリジナルのAR対戦ゲームを作る流れを解説していきます。

この発表では以下の内容について話す予定です:
- SwiftShot、SwiftStrikeの実装概要解説
- P2P通信について
- ゲーム進行について
- デモ",https://fortee.jp/files/iosdc-japan-2019/speaker/4c276844-a3e6-4afd-a1c7-568ae49478ce.jpg,shmdevelop,https://fortee.jp/iosdc-japan-2019/proposal/9ea45496-0c32-4849-9946-5609ca83caae,,,False,,
顔の検出の方法と実践,Kentaro Kawakami,LT,"カメラアプリ等では、目を大きくしたり、顔を小さくしたり、化粧をしたりと顔を加工できる事が当然となっておりますが、どのように顔の検出を行っているのでしょうか。

Appleが提供している顔の検出ができるAPIを利用して、それぞれの特徴を押さえつつ、それぞれのリアルタイムな顔認識の実装方法についてお話したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/23cb6a23-136d-41b1-bb18-1db0db3afbbb.jpg,Knschwarze,https://fortee.jp/iosdc-japan-2019/proposal/90367856-77ad-4efe-9b3f-a7d0693b10d2,,,False,,
Tab Bar Iconについて再考する,Yuki Takemoto,LT_R,"かつてiOSのTab Bar Iconといえばアウトラインスタイルのアイコンでしたが、iOS 11からソリッドスタイルのアイコンが使用されるようになりました。
また、普段我々が利用しているアプリでは、通常時と選択時でアウトラインとソリッドスタイルのアイコンを使い分けているものもあります。

このトークではガイドラインのもの、状態によって使い分けているものを紹介し、Tab Bar Iconについて改めて考える機会を提供します。",https://fortee.jp/files/iosdc-japan-2019/speaker/ba996d0a-e743-4d53-ac74-dc56267cb835.jpg,mottox2,https://fortee.jp/iosdc-japan-2019/proposal/25f509f0-0854-46a1-b777-fe786dc7073e,,,False,,
クロマキー合成を使い透過動画をAR空間に表示する,satoshi0212,30m,"動画を現実の風景に重ね、その一部を透過させて再生する実装について説明します。

AR(Augmented Reality)空間でシンプルに動画再生するのはそれほど難しくありません。
しかし一部透過させようとするとリアルタイム画像加工をする必要があり難易度が高まります。

表示のガタつきを抑え、一部を透過させた動画を再生するには。
60fpsかつ音声付きで再生するにはどうしたら良いのでしょうか。

クロマキーシェーダーと再生処理の工夫により実現した実装とその他Tipsを共有します。
さらにユーザ体験が向上する機能をいくつか解説します。

この発表では以下の内容について話す予定です:
- クロマキー合成シェーダーの実装
- 60fps音声付きでの透過動画のスムーズな表示
- リアルタイム配信映像の受信について
- ユーザ操作インタラクションの実装
- 現実に即した音声の聞こえ方
- 配信について",https://fortee.jp/files/iosdc-japan-2019/speaker/4c276844-a3e6-4afd-a1c7-568ae49478ce.jpg,shmdevelop,https://fortee.jp/iosdc-japan-2019/proposal/a72a546d-0f76-45d7-b423-e86dab4c9f13,,,False,,
グロースのためにプッシュ通知配信サービスを乗り換えた話,Atsuya Sato,LT,私が担当しているプロジェクトは、現在サービスの拡大を目指すフェーズに入ってきています。サービス拡大のための施策の一つとして、プッシュ通知をマーケティングにも利用できるように、今まで使っていたFirebase Cloud Messagingからより高機能なプッシュ通知配信サービスへと乗り換えることにしました。プッシュ通知配信サービスを乗り換える際にアプリ側で行った事と、乗り換えたことでできるようになったことについてお話しします。,https://fortee.jp/files/iosdc-japan-2019/speaker/38b8ed41-fd0e-4001-ba46-654205fc0c14.jpg,n_atmark,https://fortee.jp/iosdc-japan-2019/proposal/43654b16-b819-45f4-972a-8ee338d7451a,,,False,,
SwiftのABI StabilityとModule Stabilityで得られるもの・失うもの,Sho Ikeda（いけしょー）,15m,"SwiftのABI StabilityとModule Stabilityについて耳にしたことがあるでしょうか？前者は、当初はSwift 3.0で実装されると言われていたものの、度々の延期の末、ついにSwift 5.0で実現された機能です。後者についてはSwift 5.1で実現される機能ですが、あまり聞いたことがない方も多いかもしれません。

どちらか、もしくは両方を聞いた事がある方は多いかもしれませんが、その機能・実現する事の違いはまだ広く理解されていないように思います。本トークでは以下のトピックについて扱い、ABI StabilityとModule Stabilityへの理解を深めること、自分のプロジェクトでどのように対応すればよいのかを少しでも把握できること、そしてこれらの機能から恩恵を受ける開発者を増やすことを目指します。

- ABI StabilityとModule Stabilityの違い
  - ABI Stabilityとは何か
  - Module Stabilityとは何か
- ABI Stabilityによって得られるもの・失うもの
- Module Stabilityによって得られるもの・失うもの

一部ネタバレになってしまいますが、予習資料としてSwift.orgのブログ記事をご紹介しておきます: https://swift.org/blog/abi-stability-and-more/",https://fortee.jp/files/iosdc-japan-2019/speaker/b7b8c4f3-0727-4883-b0e0-bf056cb6d5f8.jpg,ikesyo,https://fortee.jp/iosdc-japan-2019/proposal/c6f76da0-8f1e-4707-811e-386c57b51d59,,,False,,
AVFoundationで動画編集を極める！,imk2o,30m,"Appleは古くから AVFoundation という素晴らしい SDK を提供しています。
AVFoundationは多くの機能を提供していますが、このトークでは「動画編集」にフォーカスします。
上手く使えば、iMovie や Final Cut Pro に匹敵する動画編集アプリを作ることも不可能ではありません。

が、「知見が少なく」「罠がたくさん」なシロモノでもあります...
軽い気持ちで手出ししたり、工数を見積もると大変な🙄にあいますよ！！

しかし私はそこを乗り越え、個人で動画合成アプリをリリースしてきました。
知りたくないですか？
あの「じゃじゃ馬SDKと❤になった」手の内を！

トークではまずAVAssetExportSessionを使った動画合成の基本について説明し、
Custom Video Compositorでカスタムトランジションの実装方法を紹介します。
Core Imageも大活躍しますよ！",https://fortee.jp/files/iosdc-japan-2019/speaker/89954edd-6be7-4281-a407-4a3bbee3a047.jpg,imk2o,https://fortee.jp/iosdc-japan-2019/proposal/1a856575-7b06-4d78-bdef-1ced525142f8,,,False,,
UI as Code,koyachi,15m,"iOSにもSwift UIが導入され宣言的UIプログラミングが注目を浴びています。iOS, Androidを含むマルチプラットフォーム開発をサポートするFlutterでは初期から宣言的UI開発が可能で、最近のDartへの機能追加でも宣言的UI開発をサポートする機能が含まれています。本トークではFlutterの宣言的UI開発周辺を紹介します。

- Flutterでの宣言的UIプログラミングの基本
- Dart開発チームが調査した(主にDartにおける)宣言的UIコードの問題点
- 宣言的UIプログラミングに関する最近のDartへの機能追加",https://fortee.jp/files/iosdc-japan-2019/speaker/a1cbcbe9-960a-4d2f-b0d2-fb534ffae9e6.jpeg,koyachi,https://fortee.jp/iosdc-japan-2019/proposal/0c96033b-1b98-4e9e-ad50-97b10c0d4116,,,False,,
カスタムInstrumentsでアプリをピカピカに！,行木 千春,15m,"Instrumentsといえば、「リーク検出などに便利なのは知っているけれど、とにかく重くてまともに動かない...」なんて印象を持たれている方もいるのではないでしょうか。実はXcodeの進化の陰で、Instrumentsも10から生まれ変わったようにパフォーマンスが向上し、できることが増えました。

特にカスタムInstrumentsはとても強力です。
アプリに機能を実装し、UIが良い感じに動いているのを確認し、リリースしてみたら...ログがうまく送れていなかったり、必要以上にAPIを叩いてしまっているのが発覚、なんて経験はありませんか？カスタムInstrumentsを作ってアプリ内のイベントを可視化すれば、こうした問題も一目瞭然です！
また、見たい処理だけにフォーカスすればパフォーマンスのネックも見つけやすく、高速化にも役立つでしょう。

本トークではカスタムInstrumentsの作り方について詳しく解説します。
ちょっぴり癖はあるけれど、意外と簡単に作れますよ！あなたのアプリ専用のカスタムInstrumentsを作って、アプリをピカピカにしちゃいましょう！",https://fortee.jp/files/iosdc-japan-2019/speaker/452c773d-1a39-4ed7-b4cc-24ddc7fe439c.jpg,Ridwy,https://fortee.jp/iosdc-japan-2019/proposal/024565ae-f840-4c26-a846-6daaf9c5ec24,,,False,,
心地よいDebug環境でDXを最大化しよう,kotobuki,LT_R,"Debugはいつも開発者の仲間。
ユーザーに直接関係はないですが、良いDebug体験を整えることで開発も気持ちよくなり、ユーザーに高速で価値を届けることにつながります。

このトークでは、DX（デベロッパーエクスペリエンス）を最大化するためにアプリ内に実装した、様々なデバッグメニューや便利機能を紹介していきます。

具体的には以下の機能をもったデバッグメニューについてご紹介します。
・API環境を切り替える
・広告
・アプリ内コンテンツの言語設定を切り替える
・データをリセットする",https://fortee.jp/files/iosdc-japan-2019/speaker/afeee364-a1fb-4f04-b38d-cba3d7b2779b.jpg,Engyokun,https://fortee.jp/iosdc-japan-2019/proposal/85196fd0-b5c1-422d-b016-634f5ab0b534,,,False,,
垂直立ち上げ 〜新人をひと月で最低限戦えるようにする方法〜,kouhei takamatsu,15m,"エンジニアになるために必要な知識は多岐にわたります。
iOSアプリ開発だけをとっても、言語の知識から(必要なら)HTTP通信の知識まで、枚挙に暇がありません。
けれど、エンジニアとして現場に出るためにそれらすべての知識を完璧に持っていいなければならないかと言うと、そうではありません。
もしそうならば、いつまで経っても現場に出ることはできないでしょう。

昨年、僕は一人の新人をメンティとして持っていました。
そして、詳しくは省きますが、iOS未経験の彼を一ヶ月でチーム開発に入ることのできるエンジニアに仕上げなければならない状況になってしまいました。

一ヶ月で学ぶことができることは限られています。
彼を今チームにいる人達と同じレベルに引き上げることは無理でしょう。
学ぶべき知識のうち、何を捨てるかを考えなければいけません。

このセッションでは、新人を一ヶ月で立ち上げたときに実際行ったことと、どのような知識を選択したかをお話します。
メンティを一ヶ月で立ち上げなければならない人、立ち上がらなければならない人、また、普通に初学者の人にも参考になるかもしれません。",https://fortee.jp/files/iosdc-japan-2019/speaker/c3976ae0-4987-4472-a815-afd753857d44.gif,gaopin1534,https://fortee.jp/iosdc-japan-2019/proposal/b5c82071-0db6-4811-8a92-cb2527a246c4,,,False,,
Airshipを導入してスピード感あるマーケティング施策を行いやすくした話,福尾幸太郎,LT_R,"みなさんはアプリをグロースしていく中で
以下のようなことをやりたいと思ったことはないでしょうか？

・ユーザのあるイベントにフックして訴求ポップアップ画面を出したい
・ユーザがある状態のときアナウンス画面を出したい
・端末がある条件にマッチしたユーザにのみPush通知やポップアップ画面を出したい

しかし、都度開発者がその画面や機構を実装し、マーケティングチームとコミュニケーションを取り施策を進めていくのは大変ではないでしょうか？

もし開発者を含めず、マーケティングチームがPush通知やポップアップ画面を出すことができたらどれだけ効率が良いでしょうか？

本トークではアプリのグロースツールである「Airship」を導入し、開発者を挟まずスピード感ある施策が打てるようになったお話をします。",https://fortee.jp/files/iosdc-japan-2019/speaker/ac3c9f65-a1b4-410d-8928-6cba4b9aed24.jpg,haptaro,https://fortee.jp/iosdc-japan-2019/proposal/18ac6e56-f7c7-4dc6-81ac-af96689422d2,,,False,,
スケール可能なアプリケーションにするための技術とSRE for iOS Application,こりん,30m,"昨年4月は4人で開発していたアプリケーションが今年の夏には8人ほどで開発することになりそうです。

開発者の人数が増えた場合でもスピードを落とさず、より多くのユーザーに利用してもらうために機能開発を簡単な状態にしておくことは、必要不可欠です。そのために具体的にどのようなことを行っていった取り組みについて話したいと思います。

さらに人数が増えてもアプリケーションの信頼性を制御する必要があり、その考え方のベースとしてSREを取り入れていく予定です。
SRE(Site Reliability Engineering)とはGoogleが提唱したシステムの管理とサービス運用の方法論です。
一般的にはバックエンドやインフラにたいして用いられる用語ですが、モバイルエンジニアとしてもアプリケーションの信頼性を制御する必要性があると思います。そのSREの概念とモバイルエンジニアとしてどのように信頼性を制御する手段があるかについても話したいと思います。

概要
# 誰でも速く簡単に機能開発できるように
- リアーキテクチャとその進め方について
- リードタイムの減少やビルド時間の高速化
- CI/CDや自動化
- テストカバレッジ向上とその推進方法
# 安全に開発するための信頼性の制御について
- SREとは
- SRE for iOS Applicationの重要性
- 信頼性の制御と今後の展望",https://fortee.jp/files/iosdc-japan-2019/speaker/d6a285c0-22a2-4452-8c66-6753c6988244.jpg,corin8823,https://fortee.jp/iosdc-japan-2019/proposal/77c9bdb6-d3dd-4a29-adf0-a8d549169a3f,,,False,,
Airshipを導入してスピード感あるマーケティング施策を行いやすくした話,福尾幸太郎,LT,"みなさんはアプリをグロースしていく中で
以下のようなことをやりたいと思ったことはないでしょうか？

・ユーザのあるイベントにフックして訴求ポップアップ画面を出したい
・ユーザがある状態のときアナウンス画面を出したい
・端末がある条件にマッチしたユーザにのみPush通知やポップアップ画面を出したい

しかし、都度開発者がその画面や機構を実装し、マーケティングチームとコミュニケーションを取り施策を進めていくのは大変ではないでしょうか？

もし開発者を含めず、マーケティングチームがPush通知やポップアップ画面を出すことができたらどれだけ効率が良いでしょうか？

本トークではアプリのグロースツールである「Airship」を導入し、開発者を挟まずスピード感ある施策が打てるようになったお話をします。",https://fortee.jp/files/iosdc-japan-2019/speaker/ac3c9f65-a1b4-410d-8928-6cba4b9aed24.jpg,haptaro,https://fortee.jp/iosdc-japan-2019/proposal/5b73cf37-e167-4e0d-8c50-ab3ac90f45ed,,,False,,
iOSエンジニアのためのGraphQL入門 ,tsukagoshi keisuke,30m,急速に進化しているソフトウェアエコシステムの中で、GraphQLとServerlessの2つの技術が際立って注目されています。フロントエンドでは、GraphQL型システムによる堅牢性はもちろんのこと、APIを利用するうえで全く新しい体験を得ることができます。一方、バックエンドではServerless によってランタイムの管理をサービスに任せることができ、インフラを意識することなく開発にフォーカスできるようになりました。 GraphQL と Serverless の概念をわかりやすく説明し、iOSエンジニアの課題をいかに解決するかを解説します。,https://fortee.jp/files/iosdc-japan-2019/speaker/f3e398db-1c0d-4483-a84f-c18ce56809ba.jpg,ktsukago,https://fortee.jp/iosdc-japan-2019/proposal/2ae88007-c510-4ebb-928d-c3b2fed6aaaa,,,False,,
スケール可能なアプリケーションにするための技術,こりん,15m,"昨年4月時には4人で開発していたアプリケーションが今年の夏には8人ほどで開発することになりそうです。

開発者の人数が増えた場合でもスピードを落とさず、より多くのユーザーに利用してもらうための機能開発を簡単にできるような状態にしておくことは、必要不可欠です。そのために具体的にどのようなことを行っていったか赤裸々に話したいと思います。

概要
- 誰でも速く簡単に機能開発できるように
- リアーキテクチャとその進め方について
- リードタイムの減少やビルド時間の高速化
- CI/CDや自動化
- テストカバレッジ向上とその推進方法",https://fortee.jp/files/iosdc-japan-2019/speaker/d6a285c0-22a2-4452-8c66-6753c6988244.jpg,corin8823,https://fortee.jp/iosdc-japan-2019/proposal/35c12e83-5730-42ab-8eff-8ba33635df4e,,,False,,
HomeKitでテレビを操作しよう,所友太,LT,ブラビアなどのテレビが2019年内にHomeKitに対応予定となっています。iOSDCまでにそれが正式発表されれば、その内容を実際に購入したテレビとの連携を含め、LTで紹介させていただきます。間に合わなければ、発表されたらどうなる？という予想と、現状つなぎとしてできることを紹介いたします。,https://fortee.jp/files/iosdc-japan-2019/speaker/2d8721c3-4a04-40e3-ac84-ed0893d97f68.jpg,tokorom,https://fortee.jp/iosdc-japan-2019/proposal/447be995-dcff-45c0-a9c3-5b61be96a91b,,,False,,
WWDC を有益なものにするために。例え銃声が聞こえても,akkey,LT,"初海外＆初 WWDC 参加という経験から学んだ「WWDC 参加の心得」を包み隠さず全てお話します。
ラボの会場を間違え、ボロボロの英語で必死に質問するも、伝わるはずがないというドン底から急展開！多くの学びを得ることができました。が、しかし、帰宅後のホテルにやってきたのは見上げるほど高身長の警官２人でした。
こんな波瀾万丈なストーリーと共に、皆さんにも今後の WWDC 参加の極意を提供できたらと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/3910fe9b-0da0-46f5-a083-4492fea2e3c4.jpg,AkkeyLab,https://fortee.jp/iosdc-japan-2019/proposal/8e5f9769-0f54-4424-871c-de82b23becde,,,False,,
6万行を超えるプロダクトを少人数でSwift化するには,kojikoji,15m,"Swift が WWDC 2014 で発表されてから早くも5年が経ちました。 しかし、いまだに Objective-C を触らなければならない方もいらっしゃると思います。
私もその1人です。

携わるプロダクトはコード数が6万行を超える7年ものプロダクトで、リリース当初はもちろん Pure Objective-C でした。 そのため、日々、機能開発と両立しながら Swift 化に取り組み続けてきました。
iOSエンジニアの数は常に 3人前後で決して多くない状況の中、今では Swift の割合が 80% を超え、ほぼ Pure (?) Swift と言えるほどにまでなりました。

このトークでは、こういった状況の中、どのようにして Swift 化を推進し、どのような方法で進めてきたのかついてお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/c9c4013b-fac8-44ca-a0df-a4fbdf1ca18f.jpg,komaji504,https://fortee.jp/iosdc-japan-2019/proposal/2df5bcf3-d8cf-4098-9615-d7604ca20713,,,False,,
SRE for iOS Application,こりん,LT,"SRE(Site Reliability Engineering)はGoogleが提唱したシステムの管理とサービス運用の方法論です。

一般的にはバックエンドやインフラにたいして用いられる用語ですが、モバイルエンジニアとしてもアプリケーションの信頼性を制御する必要性があると思います。

そのSREの概念とモバイルエンジニアとしてどのように信頼性を制御する手段ががあるかについて話したいと思います。

概要
- SREとは
- SRE for iOS Applicationの重要性
- モバイルエンジニアができそうな信頼性の制御",https://fortee.jp/files/iosdc-japan-2019/speaker/d6a285c0-22a2-4452-8c66-6753c6988244.jpg,corin8823,https://fortee.jp/iosdc-japan-2019/proposal/e6a0f894-4c09-49e3-9acd-8d6130f787c7,,,False,,
モバイルアプリのチーム開発におけるあんちょこを作って速な開発をする,kojikoji,15m,"チーム開発におけるやり方は一つではありません。チーム、プロダクトの置かれる状況によっても様々です。

私が携わるプロダクトは、2012年から運用されている歴史あるプロダクトで、開発メンバーだけでも20名以上おり、同じ職種の中でもスキルセット、経験等はもちろんバラバラです。
 こういった状況で開発していく中で、コミュニケーションや開発プロセスといった様々な部分で課題を持つようになり、これらの課題を解決して速のある開発をするために、モバイルアプリ開発のあんちょこを作りました。

このトークでは、あんちょこを作るに至った経緯と、具体的にどういったものをあんちょことして定め、それによってどういう変化があったかについてお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/c9c4013b-fac8-44ca-a0df-a4fbdf1ca18f.jpg,komaji504,https://fortee.jp/iosdc-japan-2019/proposal/9d7db514-d3a4-4a8f-b6ef-ed2e174674ae,,,False,,
HomeKit再入門,所友太,15m,"iOS 11 Programming https://peaks.cc/books/iOS11で「第12章 HomeKit入門」を執筆した著者によるHomeKit再入門。

過去のiOSDCでもHomeKitがっつりなトークはなかったと思いますので、入門から最新の話題までを３０分に凝縮して紹介できればと思います。
HomeKit対応予定のテレビも購入しましたので、その内容がiOSDCまでに発表されればテレビ連携も内容に含めます。
実際に自宅やオフィスに設置して試した製品の紹介や、HomeKitに対応していない製品をHomebridgeでHomeKit対応させる方法も紹介いたします。",https://fortee.jp/files/iosdc-japan-2019/speaker/2d8721c3-4a04-40e3-ac84-ed0893d97f68.jpg,tokorom,https://fortee.jp/iosdc-japan-2019/proposal/72234163-b61e-4fb5-bf81-574632ea9a07,,,False,,
GitLabRunnerで始める自前CI環境,i.terasaka,LT_R,"みなさんCI環境はどうされていますか？

最近ではBitriseを使う方が多くなってきていますね！

弊社ではコード管理をGitLabで行なっているため、
GitLabRunnerをiMacで動かしてCI環境を構築しています。

・CIサービス使いたいけどお金かかるから...
・弊社はGitLabじゃないけどBamboo使ってRunner回してる！

などといった方に参考となるお話をさせていただきたいです。

・GitLabRunnerでどんな風にCIを回しているのか
　・マージリクエストを出したらテストが回る
　・ボタンポチで環境ごとにDeployGate配信
　・Releaseタスクではappstoreconnectへのアップロードを自動化
　など
・どういう設定しているか、.gitlab-ci.ymlを一部公開
・自前CIのつらみ",https://fortee.jp/files/iosdc-japan-2019/speaker/007904f1-08d4-421e-a3d2-209a18af37b0.jpg,ikichiemon,https://fortee.jp/iosdc-japan-2019/proposal/9c0a9bd4-eff2-414f-89d1-28416136dba5,,,False,,
マイクロインタラクションのA/Bテストでサービス改善に挑んだ話,"HANYU, Koji",LT,"過去のiOSDCなどでも発表があったように、マイクロインタラクションの追加によりユーザ体験の改善が期待される。
本LTではリリース済みアプリにおいてマイクロインタラクションのA/Bテストを行った結果をもとに、
得られた具体的な効果、およびA/Bテスト可能なマイクロインタラクションの設計・実装方法を共有する。",https://fortee.jp/files/iosdc-japan-2019/speaker/a1f75edd-7dc9-45e1-963f-52c2f33051e2.jpg,gaussbeam,https://fortee.jp/iosdc-japan-2019/proposal/471c95e8-7afa-46a0-8cc4-a1492e1e8000,,,False,,
Swift for TensorFlowの可能性,細田大志,LT_R,"Swift for TensorFloはSwift で書かれた単なる TensorFlow API ラッパーではありません。
Swift for TensorFlowはSwift にコンパイラと言語拡張を追加することによって、機械学習のデベロッパーや研究者にファーストクラスのユーザー エクスペリエンスを提供するものです。

このトークでは他の機械学習フレームワークの課題をSwift for TensorFlowがどのように解決しているのか、どのようなプロジェクトなのかを説明します。",https://fortee.jp/files/iosdc-japan-2019/speaker/bebe6eb6-0ba4-4f5c-a32d-efdab944bd50.jpg,Bigamition,https://fortee.jp/iosdc-japan-2019/proposal/6d510582-11aa-4309-883d-cdc6071a5ba7,,,False,,
URLSession Essentials,Yutaro Muta,15m,"我々が普段作り、普段使用しているアプリでは、アプリケーション外とのネットワーク通信を行うことが要件の一つであるものが大多数でしょう。多くの場合、その通信のためにサードパーティライブラリが導入されますが、果たしてそのライブラリは本当に必要でしょうか？
iOS上でネットワーク通信をするために、一から煩雑な実装を用意する必要があったのは、もはや過去の話。iOSを始めとするAppleプラットフォームには、URLSessionという素晴らしく強力なFoundationクラスが用意されています。 (サードパーティライブラリも、このURLSessionをベースとするものがほとんどですが。) 
URLSessionはベーシックなアプリを作るには十分な機能を持っていますし、多くの場面での応用的な要件もクリアできる非常に優秀なクラスです。あえてURLSessionから実装することは、車輪の再発明だと言われるかもしれません。しかし、サードパーティライブラリを導入、アップデートに追従することと車輪の再発明は時にトレードオフになると考えます。URLSessionの本質を理解できれば、アプリケーション毎の要件にあった最小のテンプレートを導出することができるようになり、サードパーティライブラリを導入するべきかの見極めも可能になるでしょう。
このトークでは、以下のトピックで進め、URLSessionの大枠を理解し、要件にあった最小実装を考えていきます。

- URLSessionでできること
    - HTTPを始めとした各種プロトコルについて
- 前任といえるURLConnectionとの比較
- 要件に合った最小テンプレートを考える
- サードパーティライブラリが必要になる場面を見極める
- まとめ",https://fortee.jp/files/iosdc-japan-2019/speaker/d54de9ae-098b-4ade-bc92-cd7680b6a880.jpg,yutailang0119,https://fortee.jp/iosdc-japan-2019/proposal/268de6e2-8a33-4535-95c6-90f05be34ba6,,,False,,
令和の時代、Apple WatchとwatchOSアプリが熱くなる！その話をしようじゃないか！,takashings,30m,"2015年、Appleの新しいデバイス：Apple Watchが発売されました。
これまでになかったウェアラブルデバイスに世界は熱狂しました。

時は流れ、Apple Watch向けのアプリは一過性のものや、作られたもののサポートを切られてしまうものもあり、現在は下火状態となっています。

その一方でApple Watchは運動・健康をサポートするものから、生活をサポートするものへと変化していることをご存じでしょうか。
例えば、iOS12からの新機能であるスクリーンタイムを用いたデジタルデトックスや同じくSiri、iOS12から導入されたSiri shortcutsはApple Watchとの相性がとても良いということはあまり知られていません。

Apple Watchの発表から4年の月日が流れようとしている今、令和の時代はApple Watch及びwatchOSアプリの重要性が非常に高まると考えています。
この変化期の中でApple Watchと下火状態となっているApple Watchアプリがこれからどうなっていくのかをお話しします。

これまでとこれからのApple Watch及びアプリの話に加え前項を踏まえた上でサンプルアプリを例にして実際にどのようにアプリに導入していくのを見ていきます。

# アジェンダ（予定）
## これまでとこれからのApple Watch及びwatchOSアプリの話
- watchOSの優位性
- なぜ令和の時代にApple WatchとwatchOSアプリが求められるのか
- どのようなwatchOSアプリを作るべきか

## watchOSアプリの導入
- watchOSアプリの仕組み
- 実際にwatchOSアプリを作ってみましょう
- 開発するときに注意すべきところ",https://fortee.jp/files/iosdc-japan-2019/speaker/b9d8ed7c-6a9f-4b8a-a486-cdc5037ff166.jpg,takashings,https://fortee.jp/iosdc-japan-2019/proposal/d88df401-0030-4728-a433-b3dc831899b5,,,False,,
Eightのレビューカルチャーを紹介します,アマゾネスいけばた,LT_R,"EightでiOSアプリを開発しているアマゾネスです。
みなさん、レビューしてますか？
私はEightに入るまで、レビュー文化がほとんどない現場で仕事をしていました。
Eightに入って、レビューをしなくちゃいけない環境になったのですが、初めはとにかく苦痛でした。
どうコメントすればいいかわからない、自分のコード見られるの恥ずかしい、そしてLGTMとは..？
そんな私が今では、「このレビュー文化、もはや福利厚生では？」と日々歓喜しています。
どういった観点でレビューしているのか、コメントの付けるときに気をつけていること、心持ちなどを紹介したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/ee9b7860-6df2-4b04-9afb-300ed408eead.jpg,k191k,https://fortee.jp/iosdc-japan-2019/proposal/ada0b0ac-7ff0-4465-ab94-288b88c878fd,,,False,,
令和の時代、Apple WatchとwatchOSアプリが熱くなる！その話をしようじゃないか！,takashings,15m,"2015年、Appleの新しいデバイス：Apple Watchが発売されました。
これまでになかったウェアラブルデバイスに世界は熱狂しました。

時は流れ、Apple Watch向けのアプリは一過性のものや、作られたもののサポートを切られてしまうものもあり、現在は下火状態となっています。

その一方でApple Watchは運動・健康をサポートするものから、生活をサポートするものへと変化していることをご存じでしょうか。
例えば、iOS12からの新機能であるスクリーンタイムを用いたデジタルデトックスや同じくSiri、iOS12から導入されたSiri shortcutsはApple Watchとの相性がとても良いということはあまり知られていません。

Apple Watchの発表から4年の月日が流れようとしている今、令和の時代はApple Watch及びwatchOSアプリの重要性が非常に高まると考えています。
この変化期の中でApple Watchと下火状態となっているApple Watchアプリがこれからどうなっていくのかをお話しします。

# アジェンダ（予定）
- watchOSの優位性
- なぜ令和の時代にApple WatchとwatchOSアプリが求められるのか
- どのようなwatchOSアプリを作るべきか",https://fortee.jp/files/iosdc-japan-2019/speaker/b9d8ed7c-6a9f-4b8a-a486-cdc5037ff166.jpg,takashings,https://fortee.jp/iosdc-japan-2019/proposal/c5450074-01fe-465d-a643-1b046300e51f,,,False,,
コンピュータから見える世界,Horita Yuya,15m,"1. 画像の特徴とは
2. 特徴点検出と特徴量記述アルゴリズム

一般的に、人間にとって、「この画像のこの部分はこれである」と判断することは、それほど難しいことではありません。
もし、そのような画像処理をコンピュータに任せることが出来れば、様々な応用が出来るでしょう。

実際、AppleがVisionという素晴らしいframeworkを出してくれて、簡単に使うことが出来ます。
しかし、その裏にはどのような原理があるのでしょうか。

今回は、それと関わりのある画像の特徴点検出・特徴量記述アルゴリズムについて、背景にある数学の話を織り交ぜながら発表をします。",https://fortee.jp/files/iosdc-japan-2019/speaker/ab5622cf-68e8-479d-a5c7-e05031ae10eb.jpg,horita_yuya,https://fortee.jp/iosdc-japan-2019/proposal/b3a4dc20-5112-4078-97e6-2030104eeb2d,,,False,,
Firebase Analytics超入門,izumi,LT_R,"2019年10月にGoogle Analyticsのモバイル向けSDKが終了するため、Google Analyticsを用いてトラッキングを行なっていたアプリはFirebase SDKへの移行が必要です。
Firebase AnalyticsとGoogle Analyticsではイベントカテゴリの存在や、イベント名に使える文字制限などの違いがあります。

本トークでは、Firebase Analyticsの基本的な使い方からGoogle Analyticsとの比較、移行時のハマりポイントについてご紹介します。
Firebase Analyticsへの移行がまだ済んでいない方向けの入門セッションとなる予定です。",https://fortee.jp/files/iosdc-japan-2019/speaker/4c46077a-c211-4019-ba2f-4ced7ec60291.jpg,izm256,https://fortee.jp/iosdc-japan-2019/proposal/e111840d-86fc-45e3-aa69-8ab0d996f257,,,False,,
30分でわかるTaptic Engineの基礎と応用,takashings,15m,"触覚フィードバック機能を実現できるTaptic Engine。
iPhoneではiPhone 6s / Plusから搭載されています。

Taptic EngineはiPhoneだけでなく、Apple Watch第一世代にすでに搭載されていることに加え、MacBook Proにも搭載されています。
もはやTaptic EngineはAppleのプロダクトの標準的な機能といっても過言ではありません。
また、この秋にリリースされるiOS13をインストールできるiPhoneにはほぼTaptic Engineが搭載されています。

当初は一部のiOS純正UIパーツや3D Touchの判定フィードバックする使用例しかありませんでしたが、後にTaptic Engineによるフィードバックを自由にアプリケーションに組み込むことができるようになり、iOS13からは「Core Haptics」というフレームワークが追加され「音に合わせてフィードバックを返す」ことや「触覚をデザインする」ことも可能になります。

それはつまり、これまでのアニメーションなどの視覚的なUI / UXだけでなく、これからは触覚的なUI / UXが非常に重要であることを意味します。

このトークではiOS純正アプリやサードパーティー製のアプリの実例を踏まえながら、

- Taptic Engineとはなにか
- Taptic Engineの使い方
- 触覚フィードバックはどのように使えば効果的なのか
- iOS13からのTaptic Engine
- 「触覚をデザイン」するとはなにか

について触れたいと思います。

このセッションを聞けば、Taptic Engineの基礎はもちろん、応用まで理解することができることは間違いありません。",https://fortee.jp/files/iosdc-japan-2019/speaker/b9d8ed7c-6a9f-4b8a-a486-cdc5037ff166.jpg,takashings,https://fortee.jp/iosdc-japan-2019/proposal/fb285b54-7add-4cb2-a8ca-036ceaf13aef,,,False,,
サーバーレスの世界を実現する,ahiru_starrr,LT_R,"新規事業やスタートアップなど新しいサービスを立ち上げる時、エンジニアが自分1人のみということがしばしばある。
凄腕のフルスタックエンジニアならサーバーの構築からバックエンド開発、ネイティブ開発まで短期間で簡単に熟せるかもしれないが、私のような平凡なiOSエンジニアの場合どうすればよいのだろうか？

その一つの解に、Firebaseを使う方法が挙げられる。

このセッションでは、サーバーサイド開発経験ゼロのiOSエンジニアが実際にFirebaseを使ってサーバーレスにバックエンド機能を開発したアプリを例に、Firebaseで実現可能なことやどれほど簡単に実装できるかについてお伝えします。
フルスタックに開発するための効果的な手法をお話します！",https://fortee.jp/files/iosdc-japan-2019/speaker/92124d2a-1201-4896-96de-39d1d84c8e5d.jpg,ahiru_starrr,https://fortee.jp/iosdc-japan-2019/proposal/cef2b504-a81b-478c-a0db-ae4397a9c055,,,False,,
ARがメインではないアプリにARKitをチュートリアルに組み込んで課題解決した話,takashings,30m,"WWDC2017年に発表されたARKit。発表時には世界に大きなフィーバーが巻き起こりました。
iOSデバイスを通じて、AR（仮想現実）を画面に表示することができるようになりました。
しかし、ARKitのアプリを検討しても、実現に至らず見送るということが少なくありません。

現在開発しているカメラを使って撮影するアプリには課題があり、どういうサービスかを知ってもらう前に離脱してしまうことが多いということに頭を悩ませていました。
そこで、対象物がなくても、ARを使ってアプリの魅力を知ってもらえるのではないかと考えました。
ARが体験の中心ではないアプリにおいて、わかりづらかった説明・操作をARKitを導入して課題解決した話をしたいと思います。

このトークでは具体的な実体験を基に、企画発案時から実装まで行った際の知見、デモンストレーションを交えて苦労した点などを共有します。

【このトークの対象】
・ARKitに興味がある人
・ARKitを触ったことがない人
・カメラを使ったアプリを開発している、したことがある人

【このトークで得られるもの、期待できるもの】
・ARKitのプラクティス一例
・実際にARKitを使ってみた所感
・ARKitで開発する際のTIPS
・どのような改善が見られたか
・実際にデモンストレーションで内容をお見せします",https://fortee.jp/files/iosdc-japan-2019/speaker/b9d8ed7c-6a9f-4b8a-a486-cdc5037ff166.jpg,takashings,https://fortee.jp/iosdc-japan-2019/proposal/3ebaa95f-86c7-41a3-8f60-3463c3af9790,,,False,,
ARがメインではないアプリにARKitをチュートリアルに組み込んで課題解決した話,takashings,15m,"WWDC2017年に発表されたARKit。発表時には世界に大きなフィーバーが巻き起こりました。
iOSデバイスを通じて、AR（仮想現実）を画面に表示することができるようになりました。
しかし、ARKitのアプリを検討しても、実現に至らず見送るということが少なくありません。

現在開発しているカメラを使って撮影するアプリには課題があり、どういうサービスかを知ってもらう前に離脱してしまうことが多いということに頭を悩ませていました。
そこで、対象物がなくても、ARを使ってアプリの魅力を知ってもらえるのではないかと考えました。
ARが体験の中心ではないアプリにおいて、わかりづらかった説明・操作をARKitを導入して課題解決した話をしたいと思います。

このトークでは具体的な実体験を基に、企画発案時から実装まで行った際の知見、苦労した点などを共有します。

【このトークの対象】
・ARKitに興味がある人
・ARKitを触ったことがない人
・カメラを使ったアプリを開発している、したことがある人

【このトークで得られるもの、期待できるもの】
・ARKitのプラクティス一例
・実際にARKitを使ってみた所感
・ARKitで開発する際のTIPS",https://fortee.jp/files/iosdc-japan-2019/speaker/b9d8ed7c-6a9f-4b8a-a486-cdc5037ff166.jpg,takashings,https://fortee.jp/iosdc-japan-2019/proposal/00a13c90-e435-44a6-88ba-10e96f18b671,,,False,,
XcodeのHelpから学ぶ,kotobuki,LT_R,"iOS開発ならXcode。一番読んでるものはおそらくDocumentですね。
日頃開発をしていると「Xcodeにこんな機能があるんだ！」と驚くことがあります！
Xcodeは3Dモデルも見れるし、Break Pointの回数設定もできるし、ユーザークラッシュを自動的に集めることもできます。これらはすべてがXcodeのHelpに書いてあるんです。
このトークでは、自分がHelpを見ることで気づいたXcodeの便利機能について紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/afeee364-a1fb-4f04-b38d-cba3d7b2779b.jpg,Engyokun,https://fortee.jp/iosdc-japan-2019/proposal/83ebfc69-6bd3-4f04-86a1-e78d78abc4aa,,,False,,
GraphQL を用いたスキーマファースト開発で得たこと,Takayuki Matsubara,15m,"クライアントサイドとサーバサイドの開発を同時に進める場合、サーバサイドの API を先に定義する必要があり、すんなりと同時開発を進めることは難しいです。
例えば一時的にクライアント側でモックしたり、API 部分はあとで組み込むといった対応を行い開発を進めることはできますが、後々追加で開発をする必要が出てきます。
これに対処するアプローチの1つとしてスキーマファースト開発があります。

本発表ではクライアントサイドとサーバサイドで並行開発するために、GraphQL を用いたスキーマファースト開発をしてみて実際どうだったのかをクライアント/サーバサイド両視点から話します。

次のような方を対象としています。

・GraphQL をある程度理解している方
・GraphQL で開発している、あるいはこれから始めようとしている方
・GraphQL に限らず Schema First なアプローチを検討している方",https://fortee.jp/files/iosdc-japan-2019/speaker/8bf4f69b-11c4-4c07-a0ed-bd798b804d80.jpg,ma2ge,https://fortee.jp/iosdc-japan-2019/proposal/a434ba9c-5f75-4868-981a-3fcbcec4e004,,,False,,
UICollectionViewのつらみをReact的思想で解決してみる,knchst,LT_R,"iOS開発における、もっともポピュラーなUIコンポーネントはUICollectionViewだと思います。リストを表示するアプリであればこれを使っている限りこれを採用していることでしょう。UICollectionViewで利用するUICollectionViewCellは再利用できるように実装することは難しくありませんが、問題は新たなページを実装するたびに、新たなDataSource、Delegateを再度実装する必要があることです。
今回はこの問題を解決する為にReactの思想を取り入れた再利用可能なUICollectionViewを紹介します！",https://fortee.jp/files/iosdc-japan-2019/speaker/e708313a-be44-40cc-9ac4-0c744e9ef134.jpg,knchst0704,https://fortee.jp/iosdc-japan-2019/proposal/473fd92b-46f5-4d0d-8bb6-f750e2a553a6,,,False,,
もう一度おさらい！証明書関連のアレやソレ,かむい,LT,"誰しも一度は経験するものの、毎度作業が発生しないと細かいことを忘れがちな証明書関連
そもそもどんな仕組みだったっけ？を5分でサラっとおさらいしましょう。",https://fortee.jp/files/iosdc-japan-2019/speaker/8f61adea-824f-4410-82a3-6d4146491f27.jpg,kamui_project,https://fortee.jp/iosdc-japan-2019/proposal/fe2e8490-a077-402e-ab4a-ad64d6b3571b,,,False,,
5年間、開発してきたマンガサービスの歴史を赤裸々に語ってみる,i.terasaka,30m,"長くサービスを開発・運用しているといろいろあるもので、
新卒で入っていつの間にかチームで一番の古株になっていました。

過去を振り返って、こんな苦労があったなぁとしみじみと感慨に浸りながら、
歴史から長期運用していくための学びを感じ取っていただけますと幸いです。

 60分枠では、チームの変化やシステムの移り変わりに加え、
5年で経験した失敗と苦労により絡めてお話しします。

【開発の歴史】
・2013年12月にサービスをリリース
　・当時はCordovaでiOSとAndroidを提供 [V1]
・2014年春　チームにジョイン
・2014年夏　ブラウザ版の提供開始
・2015年春　iOSアプリをフルネイティブ版としてリニューアル [V2]
　・100% Swift。DDDの気持ちで開発
・2016年冬　Androidアプリをフルネイティブ版としてリニューアル [V2]
　・ほぼ100% Scalaで開発。DDDの気持ちで開発
・2018年冬　iOSとAndroidをリニューアル。[V3]
　・iOSでは一部のみCleanArchitecture導入
・2019年現在
　・iOSアプリの設計見直し〜CleanArchitecture化〜
　・AndroidアプリをKotlin化へ

★ポイント
・5年で経験した失敗と苦労
・全部やるチームから班ごとチームへ
・チームが変わればシステムも変わる
・サービス考古学の需要高まる
　・このコードは何で生まれたんだろう...？",https://fortee.jp/files/iosdc-japan-2019/speaker/007904f1-08d4-421e-a3d2-209a18af37b0.jpg,ikichiemon,https://fortee.jp/iosdc-japan-2019/proposal/9d83d05c-9b1a-4349-a594-3c5ae37a7426,,,False,,
URLSessionでネットワークプログラミングを極める,Yutaro Muta,30m,"我々が普段作り、普段使用しているアプリでは、アプリケーション外とのネットワーク通信を行うことが要件の一つであるものが大多数でしょう。多くの場合、その通信のためにサードパーティライブラリが導入されますが、果たしてそのライブラリは本当に必要でしょうか？
iOS上でネットワーク通信をするために、一から煩雑な実装を用意する必要があったのは、もはや過去の話。iOSを始めとするAppleプラットフォームには、URLSessionという素晴らしく強力なFoundationクラスが用意されています。 (サードパーティライブラリも、このURLSessionをベースとするものがほとんどですが。) 
URLSessionはベーシックなアプリを作るには十分な機能を持っていますし、多くの場面での応用的な要件もクリアできる非常に優秀なクラスです。あえてURLSessionから実装することは、車輪の再発明だと言われるかもしれません。しかし、URLSessionの本質を理解し、使いこなすことができれば、iOSアプリのみならず、現代のソフトウェア開発におけるネットワークプログラミング理解の一助となるはずです。
このトークでは、以下のトピックで進め、URLSessionの世界について語り尽くします。

- ソフトウェアにおけるデータ通信の基本
- URLSessionでできること
    - HTTPを始めとした各種プロトコルについて
- 前任といえるURLConnectionとの比較
- できないこと
- 難しいこと
    - URLSessionやその他Frameworkでどう実現する
        - CFNetwork
        - Network
        - and more
- まとめ",https://fortee.jp/files/iosdc-japan-2019/speaker/d54de9ae-098b-4ade-bc92-cd7680b6a880.jpg,yutailang0119,https://fortee.jp/iosdc-japan-2019/proposal/a60b29a0-98a5-41ac-a418-1142877c4361,,,False,,
5年間、開発してきたマンガサービスの歴史を赤裸々に語ってみる,i.terasaka,15m,"長くサービスを開発・運用しているといろいろあるもので、
新卒で入っていつの間にかチームで一番の古株になっていました。

過去を振り返って、こんな苦労があったなぁとしみじみと感慨に浸りながら、
歴史から長期運用していくための学びを感じ取っていただけますと幸いです。

30分枠では、iOS開発であった過去の苦労話は控えめに、
チームの変化やシステムの移り変わりに着目してお話しします。

【開発の歴史】
・2013年12月にサービスをリリース
　・当時はCordovaでiOSとAndroidを提供 [V1]
・2014年春　チームにジョイン
・2014年夏　ブラウザ版の提供開始
・2015年春　iOSアプリをフルネイティブ版としてリニューアル [V2]
　・100% Swift。DDDの気持ちで開発
・2016年冬　Androidアプリをフルネイティブ版としてリニューアル [V2]
　・ほぼ100% Scalaで開発。DDDの気持ちで開発
・2018年冬　iOSとAndroidをリニューアル。[V3]
　・iOSでは一部のみCleanArchitecture導入
・2019年現在
　・iOSアプリの設計見直し〜CleanArchitecture化〜
　・AndroidアプリをKotlin化へ

★ポイント
・全部やるチームから班ごとチームへ
・チームが変わればシステムも変わる
・サービス考古学の需要高まる
　・このコードは何で生まれたんだろう...？",https://fortee.jp/files/iosdc-japan-2019/speaker/007904f1-08d4-421e-a3d2-209a18af37b0.jpg,ikichiemon,https://fortee.jp/iosdc-japan-2019/proposal/bf7435d6-3a52-4e4f-95f6-46af34fc07b3,,,False,,
FirebaseAnalytics × BigQueryでユーザー行動をもっと深掘りする,佐藤紘一,15m,"FirebaseAnalyticsはとても便利な機能です。SDKを入れるだけで、属性やスクリーン表示などさまざまなイベントを記録してくれます。独自のイベントを記録してくれます。
しかし、Firebaseのダッシュボードで確認できる情報はとても限られていて、カスタムイベントに付属したパラメータを分析するにはBigQueryにクエリを書かなければいけません。このBigQueryを用いた分析ができるようになることで、ユーザー行動の分析をより深くすることができます。しかし、BigQueryを用いたユーザー行動分析の情報（特に日本語）はあまり多くありません。

このトークでは実プロダクトで運用した話を交えて、アプリサービス運営とBigQueryの連携を考えていきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/69ed9f74-dbb7-4446-b338-51757b7f23c4.jpg,justin999_,https://fortee.jp/iosdc-japan-2019/proposal/5db04b86-78f2-40ea-b831-b957cd41f6fb,,,False,,
App ExtensionとRealmを使ってデータを共有する際の落とし穴,栗山徹,LT,"複数の.realmファイルをアプリ内で運用する場合、スキーマ定義の適用範囲に注意しなければならない・・そのことに初めから気づいていれば・・。

あるiOSアプリケーションでは、アプリケーション内でRealmを使用しています。ある日、App Groupを使ってApp ExtensionとRealmを使ってデータのやり取りをすることになりました。リリースは無事成功。

ある日、App Groupと共有しているRealmで使っているスキーマにプロパティを追加することにしました。実装は問題なく進み、テストは佳境に。ところが、既存バージョンからアップデートする際のマイグレーションテストでアプリがマイグレーションエラーでクラッシュすることが判明。ここから本当の闘いがはじまった・・。

本セッションでは、App Extensionとデータ共有する際にRealmを使う場合の注意点や、原因調査する過程で知ったRealmのtipsについて共有します。",https://fortee.jp/files/iosdc-japan-2019/speaker/28aa5805-bf54-4d46-91f0-a5e860c38dde.jpg,kotetu,https://fortee.jp/iosdc-japan-2019/proposal/9fe85424-6951-4cc4-9981-20de55693eb1,,,False,,
Kotlinで作ろう! iOSアプリのバックエンド,Noritaka Kamiya,LT,"えっ、Kotlinで？Android用じゃないの？と思われるかもしれません。

Swiftで学んだ知識を武器に、活躍の幅をさらに広げられるフィールド、それがサーバーサイドKotlinの世界なのです。

型推論, クロージャ, タイプセーフ, nullセーフ, パターン・マッチ, イミュータブルなデータ構造など、Swiftで学んだ多くのことはそのままKotlinプログラミングで活かすことができます。

この機会に、サーバーサイドKotlinの世界に足を踏み入れて、エンジニアとしての可能性を広げてみませんか?

このセッションでは、Spring BootとKotlinを使ったバックエンド開発について紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/7e9ba49b-3d2d-44dd-bc15-628b029ca23c.jpeg,nolili,https://fortee.jp/iosdc-japan-2019/proposal/0d1415cf-dca5-4a39-827b-e566098317e5,,,False,,
映画の公式サイトに配信機能を埋め込む！？ Firebase Dynamic Links活用事例,asmz,LT,"2019年4月にサービス開始した「MIRAIL（ミレール）」は、映画やTV、アニメなどの映像コンテンツを保有する「コンテンツホルダー」が、自社のコンテンツの販売・配信を作品公式サイトやコンテンツホルダーの自社サイトから直接行うことができる新しい形の動画配信プラットフォームです。

この「直営」販売を実現するためには、あたかもコンテンツホルダー各社の公式サイト内に販売・配信機能があるかのように、シームレスに各ユーザに適したプラットフォーム（Web/iOS/Android）へ誘導することが重要となります。

本トークでは、このシームレスな動画コンテンツの販売や配信を行うためにFirebase Dynamic Linksを活用した事例をご紹介いたします。",https://fortee.jp/files/iosdc-japan-2019/speaker/2f60be8a-b54d-4ef7-93c7-096e8c472189.png,_asmz,https://fortee.jp/iosdc-japan-2019/proposal/4dd34e84-c794-4918-a4cb-7419bd14fce6,,,False,,
CallKitを実装してはまったところをお話します,アマゾネスいけばた,LT_R,"EightでiOSアプリを開発しているアマゾネスです。
iOS10から公開されたCallKit。自分のアプリのDBを使用し、着信電話表示を実現するためのAPIです。
Eightは名刺情報の管理をするアプリということもあり、CallKitとの相性は抜群。
実装しようという運びになったのですが、実装者はなぜEightに入ってして二ヶ月目の私。
「データの扱いどうやればいいの泣」「設定画面のぐるぐるが消えないんだけど泣」「突然の機能停止泣」
等、苦労したところをお話させていただこうと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/ee9b7860-6df2-4b04-9afb-300ed408eead.jpg,k191k,https://fortee.jp/iosdc-japan-2019/proposal/ab843c99-32e7-4dbe-ba3a-3edcbd635ffe,,,False,,
困った時はこれ！XcodeデバッグTips,knchst,LT_R,iOSエンジニアとしてコーディングができるのは基本です。「智者も千慮に必ず一失あり」と言うように、どんなに優れたエンジニアでも自身のコードが完全である保証はできません。だからこそ我々はテストを書き、念入りに動作確認などをし、自身のコードの完璧さを保証しようとします。今回はXcodeのデバッグ機能を利用したデバッグTipsを紹介します。,https://fortee.jp/files/iosdc-japan-2019/speaker/e708313a-be44-40cc-9ac4-0c744e9ef134.jpg,knchst0704,https://fortee.jp/iosdc-japan-2019/proposal/ac319db1-64d2-409c-bca6-6962fe72809c,,,False,,
iOS アプリの配色とアクセシビリティ,feb19,LT_R,"iOS アプリを作る場合におさえておきたい配色、
色のアクセシビリティ、その実装と、デザイナーとのコミュニケーションについて、
気軽にお聞きいただけるようサクッと 5 分でご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/eb2ab10c-a022-47cd-9d8e-c893ca1a9069.png,feb19,https://fortee.jp/iosdc-japan-2019/proposal/dffab476-3061-46dd-b39a-9e1f2f6d784f,,,False,,
iOS12のNotification新機能と一緒に考える、本当にユーザーのためになるプッシュ通知,佐藤紘一,15m,"なぜユーザはプッシュ通知を拒否するのでしょうか？
アプリ運営者はユーザに役立つ情報を届けるためにプッシュ通知を使っています。
しかし一介のアプリユーザとして考えたとき、プッシュ通知はあまりいい印象がありません。届きすぎてうるさかったり、とどいた情報があまり役立たなかったりするからです。
このトークではどうすれば通知を許可してもらえて、長く使ってもらえるのかをiOS12で追加された機能も盛り込みつつサンプルコードを紹介しながら考えていきます",https://fortee.jp/files/iosdc-japan-2019/speaker/69ed9f74-dbb7-4446-b338-51757b7f23c4.jpg,justin999_,https://fortee.jp/iosdc-japan-2019/proposal/fdaec31a-47cb-4d73-9b16-e36628ad7c01,,,False,,
自作して理解するリアクティブプログラミングフレームワーク,y.imajo,15m,"WWDC19で発表されたCombine.frameworkはリアクティブプログラミングという言葉では発表されなかったものの、複雑になりがちなイベント処理をデータの流れとして統一的に扱い、イベントへ反応する処理を組み合わせる宣言的なコーディングを実現します。
このことによりCombine.frameworkは最近のリアクティブプログラミングのパラダイムに沿ったフレームワークと言えるでしょう。これに備え、我々はリアクティブプログラミングのパラダイムを仕組みから理解する時がやってきたのです。

このトークでは、現状のリアクティブプログラミングフレームワークであり広く普及しているRxSwiftを構成するソースコードを解説し、それを参考にテストコードを交えながら最小限の「偽・リアクティブプログラミングフレームワーク」をトークの中で作成していきます。

もちろん最小限の構成で理解を促進するものなので、非同期プログラミングのためのフレームワークとして本来は必須であるスレッドセーフ、メモリ管理、スケジューラの概念は捨てます。トキメかないので。


説明のため必須なものまで捨てられた「偽・リアクティブプログラミングフレームワーク」によって、今まで雰囲気で知っていた次のルールが心で理解できるはずです。

- Coldなストリームはなぜsubscribeされないと動作しないのか
- SubjectがObservable/Observerの性質を持つというのはどういう意味か
- ColdをHotなストリームに変換する具体的な方法
- Hotなストリームがsubscribeされても1回しかイベントを発生しないとはどういう原理か

本セッションの進行とともに、皆さんには「理解したわー。リアクティブプログラミング完全に理解したわー」という感想を持っていただければ幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/739bb25a-c20d-431f-a87c-f9d63bbdd05d.jpg,yimajo,https://fortee.jp/iosdc-japan-2019/proposal/a4e78fe8-6adb-4a92-a232-256ac0fa7976,,,False,,
SOLID原則を生活に適用する,takasek,LT,"SOLID原則は、オブジェクト指向プログラミングにおける基本的な5つの原則です。

S - 単一責任の原則 (Single Responsibility Principle)
O - 開放/閉鎖原則 (Open/Closed Principle)
L - リスコフの置換原則 (Liskov Substitution Principle)
I - インタフェース分離の原則 (Interface Segregation Principle)
D - 依存関係逆転の原則 (Dependency Inversion Principle)

コーディングにおいて、言語化できない不吉なにおい（Code Smell）を感じたときには、これらの原則に照らし合わせることで設計の間違いを言語化し、修正の手がかりを掴むことができます。

SOLID原則はもちろん、ソフトウェア設計のための原則です。
しかしオブジェクト指向は「複雑な問題領域を分割統治する」コンセプトであり一般性を見いだせます。原則が転用できるのは、コードの中のみではないはず。
このLTでは、コーディングにまつわらない日常生活のものごとをいくつか例に挙げ、SOLID原則の視点で解釈してみます。
ドキュメンテーションから部屋掃除に至るまで、SOLID原則を適用すると、どのような「におい」をあぶり出し、改善することができるのでしょうか？
そうやってSOLID原則に慣れ親しんでみれば、コーディングでのSOLID原則の熟達にも役立つことでしょう。

30分枠でも同タイトルのプロポーザルを提出していますが、LT枠としては「こんなふうに共通の課題を見いだせる！」というアハ体験の楽しさを重視したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/7026ceb2-63e8-483f-bcb0-8434646a5bc4.jpg,takasek,https://fortee.jp/iosdc-japan-2019/proposal/16f99545-3024-451f-bb0f-db2829fb26b0,,,False,,
SOLID原則を生活に適用する,takasek,15m,"SOLID原則は、オブジェクト指向プログラミングにおける基本的な5つの原則です。

S - 単一責任の原則 (Single Responsibility Principle)
O - 開放/閉鎖原則 (Open/Closed Principle)
L - リスコフの置換原則 (Liskov Substitution Principle)
I - インタフェース分離の原則 (Interface Segregation Principle)
D - 依存関係逆転の原則 (Dependency Inversion Principle)

コーディングにおいて、言語化できない不吉なにおい（Code Smell）を感じたときには、これらの原則に照らし合わせることで設計の間違いを言語化し、修正の手がかりを掴むことができます。

SOLID原則はもちろん、ソフトウェア設計のための原則です。
しかしオブジェクト指向は「複雑な問題領域を分割統治する」コンセプトであり一般性を見いだせます。原則が転用できるのは、コードの中のみではないはず。
この発表では、コーディングにまつわらないさまざまな日常生活のものごとを、SOLID原則の視点で解釈してみます。
ドキュメンテーションから部屋掃除に至るまで、SOLID原則を適用すると、どのような「におい」をあぶり出し、改善することができるのでしょうか？
そうやってSOLID原則に慣れ親しんでみれば、コーディングでのSOLID原則の熟達にも役立つことでしょう。

LT枠でも同タイトルのプロポーザルを提出していますが、30分枠ではSOLID原則の説明をやや丁寧に行い、日常のシチュエーションへの適用例から原則への理解を深め、コーディングにもフィードバックできるような発表形式を目指します。",https://fortee.jp/files/iosdc-japan-2019/speaker/7026ceb2-63e8-483f-bcb0-8434646a5bc4.jpg,takasek,https://fortee.jp/iosdc-japan-2019/proposal/e880b937-1a8b-4592-8da2-1ca916055fd2,,,False,,
"map, flatMap再入門",takasek,15m,"`Optional` , `Array` や RxSwiftの `Observable` に生えている `map` や `flatMap` 、なんとなく使っていませんか？
Swift5では `Result` 型が導入されましたが、そこにも `map` `flatMap` は現れます。
また、Combine frameworkにも `Publishers.FlatMap` が登場しました。
どうやら、もうなんとなくの理解では立ち行かなくなってきたようです。

今、 `map` や `flatMap` の正体について、再入門してみましょう。
これらは偶然同じ名前をしているわけではなく、共通の性質を表す数学的な概念なのです。
難しくはありません。だって既に日常的に使っている概念なんですから。

なるべくゆるふわな説明に努めます。
が、この発表の内容を理解すれば、

- 設計力が上がり、本質的なコードが書けるようになります
- 自作の型でも `map` `flatMap` やそのバリエーションを実装できるようになります
- Swift 4.1で `compactMap` という別のメソッドが生まれた事情がよくわかるようになります
- 頭がすっきりします
- Swift以外の言語畑（特に関数型）の人と共通の話題で盛り上がれるかも？　「モナドは単なる自己関手の圏におけるモノイド対象だよ。何か問題でも？」",https://fortee.jp/files/iosdc-japan-2019/speaker/7026ceb2-63e8-483f-bcb0-8434646a5bc4.jpg,takasek,https://fortee.jp/iosdc-japan-2019/proposal/de855494-8b3d-43dc-b2aa-3011aa6dbaaa,,,False,,
Fluid Interactionの技法 ,scenee,15m,"昨年のWWDCでFluid Interfacesが発表されて以来、私はFloatingPanelというライブラリ開発を通してその実現に試行錯誤してきました。

Fluid Interfacesは、全く新しい技術ではありません。アップルのデザイン思想に則って、iOS 8以降アップルが積み上げてきた技術を駆使することで実現できるUIの一つのカタチです。

しかし、その実現は簡単なものではありません。

アニメーション・ジェスチャー、そしてデザインに至るまで、複合的に考慮して設計・実装が必要になります。

このセッションでは、私が自身のライブラリ開発で学んだFluidなインタラクションを実現する技法、特にアニメーションに焦点を当てて、デモを交えながら説明していきます。

更に、先に発表されたSwift UIのAnimation APIに追加されたfluidSpring() の理論背景と活用方法についても解説します。

Topics
・ 走る曲がる止める
・自然で扱いやすいSpring Animationを求めて
・SwiftUIのAnimation.fluidSpringとは何か？
・Rubber band effectの関数たち
・Projectionの使いどころ",https://fortee.jp/files/iosdc-japan-2019/speaker/65c82854-45de-4512-9857-f2c1495846db.jpg,scenee,https://fortee.jp/iosdc-japan-2019/proposal/a2d64298-e977-4fda-815d-52e4a33b0a2f,,,False,,
非同期処理を制する者はアプリを制す,takasek,15m,"iOSなどのクライアントサイドのプログラミングには、サーバサイドプログラミングと大きく違う点があります。
それは、処理の多くが非同期的に行われるということです。
処理開始のトリガーとなるユーザーインタラクションは任意のタイミングで発生します。
処理途中にはサーバとの通信が発生することも一般的で、その結果は非同期的にハンドリングしなければなりません。
処理の待ち時間が多ければ、ボトルネックを作らないよう、状態を維持したまま処理を停止・再開するしくみが必要となります。
ひとつの処理の効率を上げるよりは、処理を分散しピークを削ることがパフォーマンスの向上に寄与します。
基本的に1リクエストに対して1レスポンスを返すサーバサイドとは、根本的な考え方が異なります。
つまりクライアントアプリ開発は、非同期処理との戦いといえます。

本発表では、非同期処理の難しさとは何なのかを明らかにし、人類が非同期処理に対処してきた歴史を概観し、技術のバリエーションを整理します。
発表には、次のようなトピックが含まれます。

- スレッドとは何か、並行処理と並列処理の違い
- 継続という考え方、async/awaitについて
- リアクティブプログラミング、Combineに至る哲学",https://fortee.jp/files/iosdc-japan-2019/speaker/7026ceb2-63e8-483f-bcb0-8434646a5bc4.jpg,takasek,https://fortee.jp/iosdc-japan-2019/proposal/d928efcc-c15a-4234-86a5-f54e31d54fdf,,,False,,
60分で振り返るソフトウェアアーキテクチャの歴史2019,takasek,30m,"MVC, MVP, MVVM, Flux, Clean Architectureなどなど、さまざまなアーキテクチャパターンが群雄割拠しています。一体、プロダクト開発においてどれを選べばいいのでしょうか？
適切なアーキテクチャを探るには、相対的な視点が必要です。
それぞれのアーキテクチャパターンは、登場の背景があり、それぞれが解決しようとしている問題がありました。
40年にわたるソフトウェアアーキテクチャの歴史をふりかえり、各パターンが生まれた経緯や、それぞれのパターンの違いを見つめてみましょう。

今年のWWDCではSwiftUIも発表され、iOSアプリのアーキテクチャをめぐる環境は激変しつつあります。
SwiftUIは既存のアーキテクチャパターンの何に似ていて、何に親和性があるのでしょうか？
先人の通った道を踏まえることで、その強みや弱み、実装にあたっての注意点などもはっきりと見えてくることでしょう。

2017年に発表したスライド「10分で振り返るソフトウェアアーキテクチャの歴史2017」、
2018年末発売の書籍「iOSアプリ設計パターン入門」第4章「アーキテクチャのパターンを鳥瞰する」
に近い内容ですが、プレゼン形式だと再読が難しいので、システムアーキテクチャよりはGUIアーキテクチャについて重点的に解説し、各アーキテクチャパターンの比較を厚めに語ります。
他にSwiftUI系のトークが採択されている場合、SwiftUI自体の説明は他所に任せ、歴史を踏まえた解釈にのみ重点を置きブリッジに努めます。",https://fortee.jp/files/iosdc-japan-2019/speaker/7026ceb2-63e8-483f-bcb0-8434646a5bc4.jpg,takasek,https://fortee.jp/iosdc-japan-2019/proposal/443ba4d7-5c68-4c0a-8143-14071c1868d0,,,False,,
輝け！Xcode template,ezura,LT,"MVVM, MVP, Clean architecture…
規則に従って責務を分割し、型や protocol を作りますが、それに付随してテンプレート化された多くの記述やファイルが必要となりました。
そう、世はまさにテンプレート時代。
願わくは、必要なファイルと記述を**気持ちよく**一気に生成したい。
この LT では、一度に複数ファイルを生成したり、チェックボックスやプルダウンメニュー、テキストボックスなどから必要なテンプレート情報を指定できる、標準で入っている Xcode template のようなクオリティのカスタム Xcode template の作り方をお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/6d41a3b8-222f-43ff-9403-dbd0cfb61143.jpg,eduraaa,https://fortee.jp/iosdc-japan-2019/proposal/43c8617d-7826-432b-aee2-a932615b6cde,,,False,,
Firebase iOS SDKからモノレポの運用を読み取る,matsuokah,LT,"Firebase iOS SDKはgithubで公開されており、
1つのリポジトリで複数のプロジェクトが管理されています。
これはモノレポと呼ばれるもので、変更に一貫性を保つための選択です。

実際にはどんな運用が必要になるのか、SDKの変更やリリースから読み取って紹介したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/a4265750-e81a-4833-a12c-0aa12de6373a.jpg,matsuokah_,https://fortee.jp/iosdc-japan-2019/proposal/eab7c8d4-1cb3-48aa-be7f-9c91659546c5,,,False,,
Swift for TensorFlowではじめる機械学習アルゴリズム入門,細田大志,15m,"CoreMLやCreateMLによって、iOSアプリに機械学習を活用した機能を提供することが容易になってきました。
しかしこれらのフレームワークによって提供される機能だけではなく機械学習によってどのような問題を解決できるのかを理解することによってより良い機能を提供できます。

Swift for TensorFlowは機械学習の基礎を学習するのに最適な方法を提供しています。

このトークでは機械学習にはどのようなアルゴリズムがあり、それをどのように実現しているのかをSwift for TensorFlowのDifferentiableやPython Interoperabilityを使って説明していきます。

この発表を聞いた方々が機械学習アルゴリズムの基礎を理解し、Swift for TensorFlow を使って理解を深めて行けることを目指します。",https://fortee.jp/files/iosdc-japan-2019/speaker/bebe6eb6-0ba4-4f5c-a32d-efdab944bd50.jpg,Bigamition,https://fortee.jp/iosdc-japan-2019/proposal/482d46cf-bbb7-4a33-9f42-6a9abe774526,,,False,,
多言語対応と戦う 2019年版,matsuokah,15m,"多言語対応はLocalizable.stringsやXcodeのツールをうまく使うだけでは終わりません。
例えば、文字を装飾していたり、レイアウトやプレースホルダーの順番が変わるなどさまざまな課題があります。

このセッションでは実際に多言語対応するための運用フローやコーディングで気をつけるべきことを話します。

◯ 多言語対応の基本技術(Localizable.strings)
◯ 翻訳SaaSの導入
◯ NSAttributedStringでの装飾
◯ 画像に文字が入っている場合の対処法
◯ 多言語対応のデバッグ",https://fortee.jp/files/iosdc-japan-2019/speaker/a4265750-e81a-4833-a12c-0aa12de6373a.jpg,matsuokah_,https://fortee.jp/iosdc-japan-2019/proposal/9d47a951-88cb-4fe4-a2c5-c5f91034b5bb,,,False,,
既存の構成といかに向き合うか,Masayuki Kagae,LT,"リリース済みのアプリのコードは、多くの負債を抱えています。

ただし、全て書き換えればいいという話では決してありません。
既存のコードは、そのアプリの動きを通してユーザに価値を届けています。

既存のコードの負債に如何に向き合い、時には既存コードを信頼して利用するかについてお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/a89f46a3-836e-45c1-ac42-4aacde0dd2f9.jpg,yuutetu,https://fortee.jp/iosdc-japan-2019/proposal/0cb5c5af-8e5d-4216-bc9f-0f52b2f530bf,,,False,,
「アプリ開発を担うチーム」って何をするの？,Masayuki Kagae,30m,"pixivアプリチームでは、イラストコミュニケーションサービスpixivのiOS及びAndroidアプリの開発を担っています。

pixivアプリの開発・運営を担う上で、新機能開発・割れ窓対応・リリース管理・リファクタリングなど多くのことに気を使う必要があります。
そんな「アプリ開発を担うチーム」がなすべき責務とは何なのかを紐解いていきます。

このような悩みを持っている方の役に立てればと思います。

・新機能開発の予定が詰まることにより、他の責務が疎かになってしまう
・チーム内で運用のためにすべき事が食い違ってしまう
・様々な割り込みに毎日追われてしまう",https://fortee.jp/files/iosdc-japan-2019/speaker/a89f46a3-836e-45c1-ac42-4aacde0dd2f9.jpg,yuutetu,https://fortee.jp/iosdc-japan-2019/proposal/00270b82-f788-46cc-8c17-d8483c7187ac,,,False,,
「アプリ開発を担うチーム」って何をするの？,Masayuki Kagae,15m,"pixivアプリチームでは、イラストコミュニケーションサービスpixivのiOS及びAndroidアプリの開発を担っています。

pixivアプリの開発・運営を担う上で、新機能開発・割れ窓対応・リリース管理・リファクタリングなど多くのことに気を使う必要があります。
そんな「アプリ開発を担うチーム」がなすべき責務とは何なのかを紐解いていきます。

このような悩みを持っている方の役に立てればと思います。

・新機能開発の予定が詰まることにより、他の責務が疎かになってしまう
・チーム内で運用のためにすべき事が食い違ってしまう
・様々な割り込みに毎日追われてしまう",https://fortee.jp/files/iosdc-japan-2019/speaker/a89f46a3-836e-45c1-ac42-4aacde0dd2f9.jpg,yuutetu,https://fortee.jp/iosdc-japan-2019/proposal/8cd572bc-c27c-4603-a35c-4475c7e360f6,,,False,,
プレビュー機能を使ってみよう！,hideyuki okuni,LT,"Xcode11から入っているプレビュー機能を使ってみます。
おそらくどのUIVIewControllerにも実装することになると思うので、なるべく実装コストがかからない良い感じに実装します。",https://fortee.jp/files/iosdc-japan-2019/speaker/6124a1c2-41ba-4aea-8b8e-700309604a8b.jpg,hideyukitone,https://fortee.jp/iosdc-japan-2019/proposal/f5b04d5d-8b46-488f-bd5e-b4926484d2c0,,,False,,
下に引っ張ると写真が拡大するよくあるUIをSwiftUIで作ってみる,hideyuki okuni,15m,"下に引っ張ると写真が拡大するよくあるUIをSwiftUIで作ってみます。
コードで書いたり、Storyboardだけで実現したり色々とやり方はあると思うのですが、SwiftUIで実現します。",https://fortee.jp/files/iosdc-japan-2019/speaker/6124a1c2-41ba-4aea-8b8e-700309604a8b.jpg,hideyukitone,https://fortee.jp/iosdc-japan-2019/proposal/a53068b0-97ef-4b3d-bd86-0b2c77b2b74c,,,False,,
下に引っ張ると写真が拡大するよくあるUIをSwiftUIで作ってみる,hideyuki okuni,LT,"下に引っ張ると写真が拡大するよくあるUIをSwiftUIで作ってみます。
コードで書いたり、Storyboardだけで実現したり色々とやり方はあると思うのですが、SwiftUIで実現します。",https://fortee.jp/files/iosdc-japan-2019/speaker/6124a1c2-41ba-4aea-8b8e-700309604a8b.jpg,hideyukitone,https://fortee.jp/iosdc-japan-2019/proposal/82c6cf12-831e-48e1-a15e-a5ce97583749,,,False,,
ハンドメイド作者向けアプリのユーザーインタビューをしたら、大承認を得た話,Ichiko Moro,LT,"個人で運営しているサービスでは、ユーザーさんに話を聞く機会はあまりないでしょうか。ご意見箱のようなものを用意しても、送ってくれるユーザーさんは極一部で、なかなか利用状況を知ることは難しいです。

このトークでは、アプリがどのように使われているか、という問いに答えを得るために実施したユーザーインタビューの一例を紹介します。
インタビューを通して、驚きと発見を得て、この先も運営していく意欲をもらえたお話です。",https://fortee.jp/files/iosdc-japan-2019/speaker/ef6ae48d-122b-4c79-aede-dcea2f7c3bb8.jpg,ichiko_revjune,https://fortee.jp/iosdc-japan-2019/proposal/d9969141-abf5-41e2-b145-d13028e111c5,,,False,,
新卒1年目で部署を跨いで、2つのアプリのメジャーアップデートに貢献した話,Masashi Kawabe,LT_R,"自分たちのアプリの非連続な成長を実現させるために、時には大幅な変更が必要になります。メジャーバージョンアップをするほどの大きな変更は多くても 1 年に一度かと思います。

このトークでは、新卒1年目で2度のメジャーアップデートを通して、どのようにしてサービスと自分の技術力を大幅に向上させたかをお話しします。

私の経験がみなさんの何かのお役に立てると幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/e61d82d6-e90a-4b3c-981a-26b2b6bd3204.jpeg,dspeeds,https://fortee.jp/iosdc-japan-2019/proposal/91690a0f-00c0-4e0d-92cd-46d0fb19c11d,,,False,,
DB暗号化で実現させる「セキュリティと利便性を両立した堅牢なアプリ」,Masashi Kawabe,LT,"オフライン環境においても快適なユーザー体験を提供するために、多くのアプリでは SQLite や Realm 等のデータベースを利用しているかと思います。そんな、アプリの利便性を向上させてくれるデータベース、みなさんはきちんと暗号化していますか？

いざデータベースを暗号化しようとすると、「暗号化されていないデータベースから、暗号化されたデータベースに移行できない」,「Keychain に保存した暗号化キーを App Extensions からうまく取得できず、復号化できない」,「データベースを暗号化したらアプリのパフォーマンスが落ちた」等のハマりどころがあります。

このトークでは、データベースの暗号化方法だけではなく、暗号化する際に多くあるハマりどころとその解決方法についてお話しします。このトークを聞いた人が、ハマることなくスムーズに暗号化を実現できるようになることを目指します。

みなさんのアプリが「セキュリティと利便性を両立した堅牢なアプリ」となる手助けができればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/e61d82d6-e90a-4b3c-981a-26b2b6bd3204.jpeg,dspeeds,https://fortee.jp/iosdc-japan-2019/proposal/84824b60-8046-44e4-b7f3-d2986c785c8b,,,False,,
DB暗号化で実現させる「セキュリティと利便性を両立した堅牢なアプリ」,Masashi Kawabe,15m,"オフライン環境においても快適なユーザー体験を提供するために、多くのアプリでは SQLite や Realm 等のデータベースを利用しているかと思います。そんな、アプリの利便性を向上させてくれるデータベース、みなさんはきちんと暗号化していますか？

いざデータベースを暗号化しようとすると、「暗号化されていないデータベースから、暗号化されたデータベースに移行できない」,「Keychain に保存した暗号化キーを App Extensions からうまく取得できず、復号化できない」,「データベースを暗号化したらアプリのパフォーマンスが落ちた」等のハマりどころがあります。

このトークでは、データベースの暗号化方法だけではなく、暗号化する際に多くあるハマりどころとその解決方法, シンプルな設計での実現方法についてお話しします。このトークを聞いた人が、ハマることなくスムーズに、シンプルな設計でデータベースの暗号化を実現できるようになることを目指します。

みなさんのアプリが「セキュリティと利便性を両立した堅牢なアプリ」となる手助けができればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/e61d82d6-e90a-4b3c-981a-26b2b6bd3204.jpeg,dspeeds,https://fortee.jp/iosdc-japan-2019/proposal/6f4cb82b-62ba-42dc-9771-341dbef46d37,,,False,,
モバイルアプリのプロトタイピング - 時代によって変わるものと変わらないもの,Keisuke Tada,15m,"“私の考えでは、これらの条件をすべて満たす仕様の形式はたったひとつしかない。それは、ハイファイプロトタイプである。”
from 「Inspired: 顧客の心を捉える製品の創り方」

近年ではプロトタイピングツールの進化で効率的に高精細なプロトタイプを作ることができるようになりました。また、SwiftUI や Combine などの新たなフレームワーク・ライブラリの出現により、プロトタイピングのやり方が一気に変わる可能性があります。

変化の激しいプロトタイピングツール業界ですが、そもそも我々はなぜプロトタイピングを行うのでしょうか。プロトタイピングという手段は変わっても、その目的は変わらないはずです。そして、その目的は場合によって様々で、目的に応じた手段を取る必要があります。目的と手段どちらについても理解していないと、真に効率的なプロトタイピングはできません。

本トークでは、プロトタイピングが必要な場面とその重要性、時代の変化（Web → モバイル → ML）に合わせて求められるプロトタイピング、現時点での目的別のプロトタイピング手法（コア体験に ML を用いるプロダクトのプロトタイピングも）、プロトタイピングでできることとできないこと、プロトタイピングを絡めた開発フローなどを取り上げます。このトークを聞けば、プロトタイピングの意義や最新のプロトタイピング手法について知ることができ、また、時代が変わっても陳腐化しないプロダクト開発についての考え方を身につけることができるはずです。職種問わず、とにかく良いプロダクトを作りたい方におすすめです。",https://fortee.jp/files/iosdc-japan-2019/speaker/237fdc0a-a0ce-4dc3-b8fc-1e9844e47e25.jpeg,tdksk,https://fortee.jp/iosdc-japan-2019/proposal/ce3996d3-65cc-413a-ac58-162d23eb800f,,,False,,
ゼロから始めるViewModelテスト生活,高橋洸介,15m,"昨今のアプリは状態の複雑化にともないMVVMとRxSwiftを用いた開発が多くなってきていると思います。
また、よく使われるアプリほど高品質のものが多く、アプリを開発するうえで高品質はもはや当たり前のように求められます。
この高品質を担保するうえで大事になってくるのはテストコードの存在です。
特にビジネスロジックが多く含まれるViewModelのテストはアプリの品質に大きく関わります。

しかし、ただでさえ、面倒なリクエストのテストです。
僕自身もはじめはテストの書き方さえわかりませんでした。
しかもRxSwiftも絡んでくるため、テストの書き方に悩むことが多いと思います。
そこで、今回はViewModelのテストを書いたことがない人向けに
テストを実現するまでに、どのようなことを行ってきたかをお話したいと思います。

このセッションでは、以下のような内容を話します。

- MVVMとは
- MVVM x RxSwiftが多くなってきた背景
- ViewModelの責務
- ViewModelでテストしたいこと
- ViewModelのテスタビリティな実装の仕方
- Repositoryパターン
- DI
- ViewModelテストの実装の仕方
- 通信のスタブ",https://fortee.jp/files/iosdc-japan-2019/speaker/e1afeb29-e2f2-4902-a5cc-18ffcca9a1a7.jpg,ko_suke1011,https://fortee.jp/iosdc-japan-2019/proposal/6182fab9-beed-400f-a458-fe0e90684177,,,False,,
ライブラリのインポートとリンクの仕組み完全解説,Kishikawa Katsumi,30m,"現代のアプリ開発では、ライブラリやフレームワークをまったく使わないということはほとんどありません。
OSが提供するUIKitやSwift標準ライブラリを使用しますし、サードバーティの便利なライブラリを使用することもあります。

そして、誰もが１度はリンクエラーや重複したシンボル、パッケージマネージャが出力するエラーメッセージに悩んだことがあることでしょう。
リンクエラーの解決が難しいのは、問題の原因がプロジェクト設定、ライブラリの種類・配布方法、実行先（デバイスやシミュレータ）の環境など多岐にわたるためです。

導入したライブラリがインポートできない、リンクエラーで難しいエラーメッセージが表示されている、ビルドは成功しても起動時にクラッシュしてしまう。
誰もが一度はこのような問題に直面し、解決のために長い時間の試行錯誤をしたことがあるでしょう。

モジュールのインポート・リンクがどのように解決されるのか、リンクとはいったい何をしているのかを学ぶことで、システマチックに問題を切り分け、解決できるようになります。

この講演ではライブラリとフレームワーク、スタティックとダイナミックの違い、それぞれのメリットとデメリット、Swiftからインポートするために必要なこと
を知り、外部のライブラリがどのようにして自分のアプリから利用できるようになるかという仕組みを解説します。

リンクの仕組みを知ることで悩ましいリンクエラーを論理に解決できるようになるとともに、CocoaPods、Carthage、Swift Package Managerといったライブラリ管理ツールもより高度に使いこなせるようになります。",https://fortee.jp/files/iosdc-japan-2019/speaker/ec0ad365-c737-43bd-9fae-17ab62dac774.jpg,k_katsumi,https://fortee.jp/iosdc-japan-2019/proposal/28d1013f-a57b-4d42-b486-a3372c459459,,,False,,
実機の管理とおさらば！AWS Device FarmでiOSのテストをしよう！,白山 文彦,15m,"みなさん、iOSアプリのテスト書いていますか？どのように実行していますか？
ひと昔前と違い、今やiOSデバイスは多種多様となり、アプリを安心してユーザに届けるには出来るだけ多くのデバイスで確認する必要が出てきました。新しいデバイスが発売されるたびに買い足さねばなりませんし、チーム内で融通したり管理するのはそれだけで大変です。

AWS Device Farmを使うと、自分たちが持っていないバージョンのiOSデバイスでバグが報告された場合もリモートアクセス機能を使ってすぐに動作確認をすることができます。また、CI/CDパイプラインに組み込んで自動テストを実行することも簡単に行なえます。

このセッションではまずDevice Farmを利用するためのステップをひとつずつ分かりやすく紹介します。そして次に、iOSにおける自動テストやUIテストについて説明し、XCTestやXCUITestを実際に実行してテストのイテレーションを回す実例を解説します。",https://fortee.jp/files/iosdc-japan-2019/speaker/8d2794b3-cc44-470c-9879-51cc5dbcb81b.jpg,fushiroyama,https://fortee.jp/iosdc-japan-2019/proposal/df2f3aae-4347-4f17-91c2-db2ce476db10,,,False,,
スキマ時間でここまでできる、開発業務の自動化ノウハウ,Kishikawa Katsumi,30m,"自動化はレバレッジが効きます。

単に作業を機械に任せるだけでなく作業をコードで表現することにより、第三者が作業内容を知ることができる、変更管理が可能になる、各工程が追跡可能になる、などの副次的にもたらされるメリットが日々の開発効率を飛躍的に高めます。

しかし、多くのチームは作業を自動化したいと考えていても、日々の開発に追われ、なかなか開発環境の改善に取りかかれていません。
なんとか時間を作り、苦労して自動化の仕組みを作っても、あまり使われなかったということもよくあります。

私はこれまで１０以上のプロジェクトで、日々の開発業務をこなしつつ、自然に生じるスキマ時間を使ってあらゆる業務を自動化してきました。

それを可能にしたのは、各プロジェクトの自動化の際に作ったツールやライブラリをできる限り再利用可能にしてきたことや、経験を重ねるにつれ、少ない労力で大きな効果を得られるノウハウを身に付けたことによります。

たとえば、自動化のために新しいツールを導入することは学習コストが高く、利用されない恐れがありますが、簡単な仕組みを既存のワークフローに組み込むことができれば、誰もが自然とその仕組みを利用します。

この講演では、これまでの私の経験から、そのまま応用できる大小さまざまな自動化の例を挙げながら、具体的な実装方法とともに、大がかりにせず、小さな仕組みとして少しずつ導入する方法、誰にでもわかる簡単で思わず使いたくなる仕組みの作り方、などを通じてスキマ時間で作業するだけでも大幅に日々の開発業務を改善できる方法を伝授いたします。",https://fortee.jp/files/iosdc-japan-2019/speaker/ec0ad365-c737-43bd-9fae-17ab62dac774.jpg,k_katsumi,https://fortee.jp/iosdc-japan-2019/proposal/d2b56d97-6dd1-4236-82ee-4975683270cf,,,False,,
AutoLayoutで不等号の制約をうまく使うための方法と考え方,Takanori Hirobe,15m,"AutoLayoutの制約で基本となる制約は == で結ばれた関係つまり等号によるものです。等号による制約でもある程度のレイアウトを組むことができますが、不等号による制約（つまり、 <= や >= で結ばれた制約 ）を使うとレイアウトの幅が広がります。

それだけでなく、不等号による制約はUIImageViewやUILabelのデフォルトの高さと横幅を決めるために使われているなど、UIKitのいろいろなところで使われています。不等号による制約を理解するのはAutoLayoutやUIKitを理解するためにも不可欠です。

このトークでは、不等号を使った制約を理解するコツとレイアウトの実例を紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/999dd92c-8da5-4d7c-92f9-f0e4acc0dad0.jpg,taka1068,https://fortee.jp/iosdc-japan-2019/proposal/14de87cc-3f9b-4d6e-a9b1-7c6039c36a0b,,,False,,
OperationとOperationQueueで実現する非同期処理,Takanori Hirobe,15m,"iOSアプリで非同期処理を行いたいときは、RxSwiftやReactiveSwift、あるいはPromiseKitといったライブラリを使うことが多いと思います。
iOS 13からはCombineフレームワークも使えるかもしれません。

しかし、ライブラリを使うと依存が増えてしまいますし、CombineはiOS 13以降しか使えないというデメリットがあります。そこで有効なのがOperationとOperationQueueです。昔からFoundationフレームワークに含まれていますが、非常に柔軟な機能を提供してくれるため、iOS開発の非同期処理のための第3の選択肢となり得る力を十分に持っています。

そんなOperationとOperationQueueで非同期処理を実現する方法について紹介します。UI処理からAPIのハンドリングまで扱うので、実際のアプリに取り入れることも十分可能な内容となります。",https://fortee.jp/files/iosdc-japan-2019/speaker/999dd92c-8da5-4d7c-92f9-f0e4acc0dad0.jpg,taka1068,https://fortee.jp/iosdc-japan-2019/proposal/3e229072-f506-4c41-a58f-c81bc32d04e5,,,False,,
この3年間でAppleが提供したテスト周りの機能をふりかえる,tarappo,LT,"iOSDC2019のプロポーザルでは、テストに関するトークが前年以上に増えています。	

テストに関する変化を紐解くためにも、この3年間においてAppleが提供してきたテスト周りの機能はなにがあったかをふりかえってみましょう。

このふりかえりでは、次を説明していきます。

 * どのような機能が提供されたか
 * どのような目的のものなのか
  
そして、これから先はどのような変化があるのだろうかという話をしてきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/f91b366d-a45c-4dde-bc23-8d9540b6aa4b.jpg,tarappo,https://fortee.jp/iosdc-japan-2019/proposal/624dad49-34da-4173-9b33-a18ee681dbb4,,,False,,
SwiftのStringの文字数の数え方を完全理解する,Takanori Hirobe,15m,"SwiftはUnicodeの扱いに非常に長けた言語であり、絵文字を含む文字列でも正しい文字数を計算してくれます。
その反面、Unicodeの複雑さに引きずられてしまい、直感的な操作ができない時もあります。たとえば、 string[2] と書いても3番目の文字を取得することはできません。

そんな複雑なところのあるSwiftの文字列処理ですが、複雑なものを受け入れてきちんと理解するのはそこまで難しいものではありません。

このトークでは、Unicodeとの関係を意識しながら、Swiftの文字数の扱い方とその裏にある考え方を解説します。",https://fortee.jp/files/iosdc-japan-2019/speaker/999dd92c-8da5-4d7c-92f9-f0e4acc0dad0.jpg,taka1068,https://fortee.jp/iosdc-japan-2019/proposal/80d31384-c8e6-4813-8b6b-568ed0eb9b20,,,False,,
いまこそ理解するCollectionプロトコルとSequenceプロトコルの違い,Takanori Hirobe,15m,"CollectionとSequenceはSwiftの標準ライブラリの根幹を支える非常に重要なプロトコルです。

CollectionはSequenceを継承しているので基本的にはCollectionの方が多機能ですが、Sequenceだけにしかできないこともあるなど、違いは複雑です。

この機会に両者の違いを理解して、より良いSwiftのプログラムを書きましょう！

本トークでは、両者の関係性や違い、Sequenceでしかできないこと、Collectionでしかできないこと、そして、どちらのプロトコルに準拠するべきか解説します。",https://fortee.jp/files/iosdc-japan-2019/speaker/999dd92c-8da5-4d7c-92f9-f0e4acc0dad0.jpg,taka1068,https://fortee.jp/iosdc-japan-2019/proposal/beb39918-c084-427c-a537-93f22d792c99,,,False,,
VUIで音声認識をした際のものすごく間延びした会話を改善する,satoshi0212,LT,"スマートスピーカーをはじめ、Voice User Interface(VUI)を持つアプリやサービスが増えてきています。
そこで気になって仕方がないのが、会話の「間」が空き過ぎの状態。

こちらの発言が聞こえなかったのかな、と不安に思ってしまう程に間隔が空いてやっとサービス側からの返答が来たりしてストレスが溜まりますよね。

これを改善するアプローチとその効果を解説し、ライブデモを行ってその成果を体験してもらいます。",https://fortee.jp/files/iosdc-japan-2019/speaker/4c276844-a3e6-4afd-a1c7-568ae49478ce.jpg,shmdevelop,https://fortee.jp/iosdc-japan-2019/proposal/7235e002-af38-4763-9bbf-53e7ad3127a4,,,False,,
クロマキー合成を使い透過動画をAR空間に表示する,satoshi0212,15m,"動画を現実の風景に重ね、その一部を透過させて再生する実装について説明します。

AR(Augmented Reality)空間でシンプルに動画再生するのはそれほど難しくありません。
しかし一部透過させようとするとリアルタイム画像加工をする必要があり難易度が高まります。

表示のガタつきを抑え、一部を透過させた動画を再生するには。
60fpsかつ音声付きで再生するにはどうしたら良いのでしょうか。

クロマキーシェーダーと再生処理の工夫により実現した実装とその他Tipsを共有します。

この発表では以下の内容について話す予定です:
- クロマキー合成シェーダーの実装
- 60fps音声付きでの透過動画のスムーズな表示
- リアルタイム配信映像の受信について",https://fortee.jp/files/iosdc-japan-2019/speaker/4c276844-a3e6-4afd-a1c7-568ae49478ce.jpg,shmdevelop,https://fortee.jp/iosdc-japan-2019/proposal/5b52db68-8c8a-49ba-9d00-d9a9b25a33b7,,,False,,
高校数学とUICollectionViewを組み合わせて独自のレイアウトを実現する,Takanori Hirobe,15m,"UICollectionViewは、UICollectionViewFlowLayoutと組み合わせることで非常に柔軟なレイアウトを組むことができる強力なクラスです。

数学の知識がなくても魅力的なレイアウトを組むことができますが、高校程度の数学と組み合わせるとさらに大きな力を引き出すことができます。

このトークでは、高校数学とUICollectionViewを組み合わせて独自のレイアウトを実現する方法を紹介します。
必要に応じて数学の解説もしますので、数学が苦手という方も安心してください。",https://fortee.jp/files/iosdc-japan-2019/speaker/999dd92c-8da5-4d7c-92f9-f0e4acc0dad0.jpg,taka1068,https://fortee.jp/iosdc-japan-2019/proposal/93e9e95b-d296-4a1b-8617-0a35b073010e,,,False,,
tvOS 13にちょっと注目してみる,redryerye,LT_R,"WWDC19、一番始めの発表はtvOS 13でした。
マルチユーザ やコントローラーの対応で一見要点をおさえた気になりがちですが、待ってください。

TVServicesを含むフレームワークのアップデートにより、tvOS 13では、従来に比べてより充実したユーザエクスペリエンスを実装することが求められています。


このセッションでは、以下のような項目でtvOS 13の新たな機能の勘所をおさえ、より”immersive”な体験の実装手段をご紹介します。


-	 ストリーミングデバイス(Apple TV)の動向
-	TVServices frameworkで何が変わったのか( ex. Top Shelf extension, Carousel , etc.) 
-	tvOS 13 でのUXのベストプラクティスとは",https://fortee.jp/files/iosdc-japan-2019/speaker/ad874c1f-58b3-4d35-8f85-59ce265d6811.jpg,redryerye,https://fortee.jp/iosdc-japan-2019/proposal/96c090c9-4db7-4d63-b112-541d8b2d3512,,,False,,
関数型プログラミング x ドメイン駆動設計超入門 ~型安全と心理的安全を求めて~,shiz,30m,"「関数型プログラミング」
「ドメイン駆動設計」

この2つのキーワードは
プログラミングの世界でも頻繁に取り立たされるトピックですが
私にとってはなんとなくわかるようでわからない存在でした。

むしろ

「数学やコンピュータサイエンスの知識がない私に関数型プログラミングは理解できるのだろうか？」

「ドメイン駆動設計の導入には考慮することが多すぎて、学んでも十分に活かせることができないのではないだろうか？」

と思い、避けていたところもありました。


そんな私ですが
この2つについて学んでみる機会があり
その底にある考えや仕組みを知ることで
日々の開発にすぐに活かせる要素がたくさんあることがわかりました。


またこの2つの要素を組み合わせることで
より安全に安心して開発を進めることができる可能性も見えてきました。



今回は

- 関数型プログラミングの正体とちょっとした活用法
- ドメイン駆動設計を行うことの意義や日々の開発をより進めやすくするために意識すること
- この2つを組み合わせて開発を進める効果や方法

などついて
専門家ではない立場から一歩一歩学んできたことをお話したいと思います。


また
今年のWWDCで紹介されたCombineフレームワークや
関数型プログラミング、ドメイン駆動設計を使った開発と相性か良いと言われており
Swiftに導入される可能性のあるActorモデルなど
Swiftの未来についても触れられる範囲で紹介したいと思います。

関数型プログラミングやドメイン駆動設計とは縁遠いと思われている方や
なんとなく避けて通ってきている方が興味を持つきっかけになれば幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/ffc6767a-50b9-45b1-bfe7-e630be836f3c.jpg,stzn3,https://fortee.jp/iosdc-japan-2019/proposal/8cd7b24d-2e86-428f-aec6-9ee6d44e7cc6,,,False,,
Test Plansを用いた自動テストのさらなる活用,tarappo,LT,"WWDC 2019で発表があった「Test Plans」ですが「それは必要なの？」と思ってしまっていませんか？
自動テストにおいては、それをどのように実行するかというのも重要です。

本トークでは、Test Plansをどのように用いてどのような自動テストをおこなっていくかについて、説明していきます。
これにより、自動テストの活用パターンが今まで以上に増えることでしょう。",https://fortee.jp/files/iosdc-japan-2019/speaker/f91b366d-a45c-4dde-bc23-8d9540b6aa4b.jpg,tarappo,https://fortee.jp/iosdc-japan-2019/proposal/dc2ff912-d1fe-42f4-ac78-cb2f550feccd,,,False,,
1ヶ月半でプッシュ通知許諾率を17％から40％にあげた話,akutsu,LT,"マーケチームから来る「あくつ〜。プッシュ通知許諾率あげてくれないとリテンション施策打てないよ〜」という声。

平均30％と言われる承諾率だが、何故か僕たちのアプリは17%・・。

プッシュ通知承諾パネルを表示するタイミングは、熟考された上に以下の２つのタイミング。
- お気に入りにアイテムを追加した時（新しくお気に入り商品が投稿された事を通知するため）
- 商品の購入が完了し、取引が始まった時（取引のリマインドのための通知を送りたいため）

何が悪いのかさっぱりでしたが、意外なことで解決しました。
ある１つのことをしただけで、プッシュ通知許諾率が全体平均17％から40％にあがったワケとは！？
拘りの強いiOSエンジニア（デザイナー）が陥りやすい罠についてサクッと話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/e43478f9-d135-49c2-a7ad-a63cf04c2b1a.jpg,sky_83325,https://fortee.jp/iosdc-japan-2019/proposal/cc3b9ccb-27d8-49f3-bc2c-a530a9fbe51d,,,False,,
1ヶ月半でプッシュ通知許諾率を17％から40％にあげた話,akutsu,LT_R,"マーケチームから来る「あくつ〜。プッシュ通知許諾率あげてくれないとリテンション施策打てないよ〜」という声。

平均30％と言われる承諾率だが、何故か僕たちのアプリは17%・・。

プッシュ通知承諾パネルを表示するタイミングは、熟考された上に以下の２つのタイミング。
- お気に入りにアイテムを追加した時（新しくお気に入り商品が投稿された事を通知するため）
- 商品の購入が完了し、取引が始まった時（取引のリマインドのための通知を送りたいため）

何が悪いのかさっぱりでしたが、意外なことで解決しました。
ある１つのことをしただけで、プッシュ通知許諾率が全体平均17％から40％にあがったワケとは！？
拘りの強いiOSエンジニア（デザイナー）が陥りやすい罠についてサクッと話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/e43478f9-d135-49c2-a7ad-a63cf04c2b1a.jpg,sky_83325,https://fortee.jp/iosdc-japan-2019/proposal/67937abf-5580-4000-a122-334583471ee0,,,False,,
Firebase Analticsでもカスタム可能でリッチなグラフ表示をしたい！,Maruyama Moto,LT_R,"2019年10月にモバイルアプリ向けのGoogle Analyticsが終了します。
Firebase Analyticsへの移行が推奨されていますが現在のデータ可視化の機能はGoogleが用意した以外のカスタムグラフを作成することができずGoogle Analyticsに比べてとても貧弱なものとなっています。

そこで今回はFirebase Analtics + BigQuery + Data Studioを用いてリッチな自由にカスタムできるデータの可視化グラフを実現しました。

今回のトークでは個人制作アプリのグラフ表示画面の紹介をした後に用意されてるtemplateを使って簡単にData StudioにBigQuery経由でのデータを表示、そしてグラフをカスタムする方法を紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/604c4f3d-cf5e-4d8c-8af8-4b37c174106c.jpg,7_6_,https://fortee.jp/iosdc-japan-2019/proposal/d4ce8570-a4db-4b61-8036-1bf5274d2478,,,False,,
SwiftUI による ViewController からの解放,宇佐見 公輔,15m,"SwiftUI の登場により、わたしたちは ViewController や Storyboard から解放されました。

従来の UIKit では ViewController が重要な役割を持っていましたが、これは扱いが難しい厄介な存在でした。iOS アプリ開発で MVVM、Clean Architecture、Flux などの設計を採用する際に、ViewController をどの立ち位置で扱うのかが難しかったのです。

SwiftUI では ViewController について悩むことはありません。ViewController はなくなり、その役割は分割されました。UI レイアウトについては struct View が責務を持ちます。また、データとのバインディングは新しい Reactive フレームワークである Combine で行います。

ただし、現状の SwiftUI は機能が不足している側面もあり、従来の UIKit の助けが必要な場面もあります。その場合は ViewController を使うことになります。SwiftUI でどのように UIKit と共存すべきかも考えてみたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/9b8eb42d-ebd4-4315-b32c-8726dfd5f696.jpg,usamik26,https://fortee.jp/iosdc-japan-2019/proposal/3e67e164-1dcc-4008-8d83-9eb7301bdad6,,,False,,
実践 RIBs,Daisuke,15m,"RIBs は複雑な状態をもつ大規模なモバイルアプリケーションのためにデザインされたアーキテクチャフレームワークであり、機能の独立性と拡張性、テスタビリティを最大化することに焦点を当てています。このセッションでは RIBs を構成するコンポーネント Router, Interactor, Builder がどのようにアプリケーションを構築するのか、複雑な状態はどのように UI と切り離されたツリー構造によって管理されるのか、高い独立性とテスタビリティはチーム開発にどのように寄与するのか、実例を交えつつご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/20646375-6d0f-4dc5-bcb9-42c91d39fc6f.jpg,daidongon,https://fortee.jp/iosdc-japan-2019/proposal/6083a018-baf2-48e6-80d3-7934c0452370,,,False,,
GenericなCellを定義し、Generic Argumentでレイアウトを確定する,marty-suzuki,LT,"TableViewCellなどでリスト形式の画面を組む際に、同一の構成でも任意の条件で「フォントサイズが違う」「サムネイルのサイズが違う」という調整が必要になるときはないでしょうか。
そういった場合にUITableViewDataSourceのtableView(_:cellForRowAt:)で、enumなどで定義されたCellのタイプを「cell.configure(style: .○○)」のようにして、Cell内部で再レイアウトする場合が多々あると思います。

このセッションでは、GenericなCellを定義して画面の構成自体は1つのクラスにまとめつつ、Generic Argumentによって調整が必要な部分を補う実装についてお話します。
tableView.dequeueReusableCell(withIdentifier:for:)で取得したインスタンスに対して再レイアウトを行う場合と、レイアウトが確定したGenericなCellを利用した場合の、それぞれのパフォーマンスについても触れたいと思います。

また、Xcode11以前で実装したコードレイアウトのCell（Cellに限らずViewやViewControllerも）でも、Xcode11を利用してPreviewすることについて触れたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/bc7e8cdb-4407-4a19-9a0d-05917b3115cf.jpg,marty_suzuki,https://fortee.jp/iosdc-japan-2019/proposal/bbfc2a5d-023d-419c-a169-3272ca568d4b,,,False,,
コードで実装してリー代数にふれる,宇佐見 公輔,15m,"プログラマが数学を学ぶならば、コードで実装するのが早道です。

このトークでは、抽象的な代数構造のひとつであるリー代数について、Swift のコードとして実装することで理解していくことを目指します。次のような順序で実装していくことになります。

* 加法演算とスカラー倍演算を持つ「ベクトル空間」
* ベクトル空間にブラケット積演算を追加した「リー代数」

さらに、リー代数における基礎的なトピックとして、以下をコードを使って説明します。

* ヤコビの恒等式
* いくつかの具体的なリー代数

リー代数は数学や物理を専攻した人が学ぶ概念で、なじみのない人にはハードルが高いですが、コードで見ていくことで理解しやすくなるだろうと考えています。",https://fortee.jp/files/iosdc-japan-2019/speaker/9b8eb42d-ebd4-4315-b32c-8726dfd5f696.jpg,usamik26,https://fortee.jp/iosdc-japan-2019/proposal/23a8e5d9-be55-4be6-b297-3451f90ba877,,,False,,
コードで実装して理解するリー代数,宇佐見 公輔,30m,"プログラマが数学を学ぶならば、コードで実装するのが早道です。

このトークでは、抽象的な代数構造のひとつであるリー代数について、Swift のコードとして実装することで理解していくことを目指します。次のような順序で実装していくことになります。

* 加法演算を持つ「加法群」
* 加法群にスカラー倍演算を追加した「ベクトル空間」
* ベクトル空間にブラケット積演算を追加した「リー代数」

さらに、リー代数における基礎的なトピックとして、以下を数式とコードをまじえて説明します。

* ヤコビの恒等式
* 結合代数から導かれるリー代数
* いくつかの具体的なリー代数

リー代数は数学や物理を専攻した人が学ぶ概念で、なじみのない人にはハードルが高いですが、コードで見ていくことで理解しやすくなるだろうと考えています。",https://fortee.jp/files/iosdc-japan-2019/speaker/9b8eb42d-ebd4-4315-b32c-8726dfd5f696.jpg,usamik26,https://fortee.jp/iosdc-japan-2019/proposal/80e8c74a-aeb9-4db3-94bf-d00a4315d49f,,,False,,
Swiftでつくるファミコンエミュレータのススメ,thara,LT_R,"低レイヤーを触ってみたいと思いつつも今まで手が出すことができていなかった私が、今現在Swiftでファミコンエミュレータを作っています（現在進行形）
このトークでは、Swiftを使ってファミコンエミュレータを開発することの楽しさをお伝えします。
ファミコンエミュレータ開発の第一歩がなかなか踏み出せない方の背中を押すことができたら幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/13a52dac-2de2-4f63-b3ac-8600e32e3320.png,zetta1985,https://fortee.jp/iosdc-japan-2019/proposal/92904657-beda-46fe-8ecb-b27c75ee0f16,,,False,,
Clean Architectureを駆使していかにして既存コードに秩序をもたらしていったか、という話,栗山徹,15m,"FatなViewControllerや変更に弱い作り、依存関係の複雑なコード・・などなど、いわゆる機能追加や仕様変更が容易でないコードに対して、どうしても手を入れなければいけなくなった場合にあなたはどう対応しますか？一気に作り変えるのが有効な場合もありますが、できるところから徐々にきれいにする、というスタンスでコツコツと改善に取り組むことも時には大切です。

本セッションでは、私が実際に業務で遭遇したコードを元に、主にシステムアーキテクチャの観点からClean Architectureを導入し変更に強くFatでない作りにするためにどのように実装を改善していったのかをご紹介します。

本セッションでは「最初からCleanな設計で実装する」ような話ではなく、「Cleanでないコードを様々な手法を用いてできるだけCleanになるよう改善していく」ことにフォーカスします。

本セッションが技術負債に直面しているiOSエンジニアの皆さんのお役に立てれば幸いです。

- 発表内容アジェンダ
1. Humble Objectの範囲を明確にする
2. InteractorとUseCaseを作る
3. protocolとDI
4. UseCaseにテストを入れる
5. staticメソッド入りクラスの段階的改善",https://fortee.jp/files/iosdc-japan-2019/speaker/28aa5805-bf54-4d46-91f0-a5e860c38dde.jpg,kotetu,https://fortee.jp/iosdc-japan-2019/proposal/28b6fa3f-9188-42be-840a-a1ce37e70bf2,,,False,,
SwiftUIのレイアウトレシピ,えんどう,15m,"WWDC2019でSwiftUIという新しいUIを構築する仕組みが登場し、UIの実装の方法が大きく変わろうとしています。
SwiftUIでは非常に短い記述量でUIを構築することができるようになり、データバインディングの機能が追加され、今まで大変だった状態管理の問題を解決してくれるようになります。
また、レイアウトの組み方も大きく変わり、AutoLayoutを使用しない、今までとは違う組み方になりました。
SwiftUIでのレイアウトの組み方は、基本的なものではればとても簡単だと思います。しかし、複雑なレイアウトを組めるかは未知数です。
このセッションではレイアウトの組み方や実装の仕方に重点をおき、SwiftUIではどのようにするのかを紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/5970046a-5ea9-4a12-8ddb-338efa1411a2.jpg,re___you,https://fortee.jp/iosdc-japan-2019/proposal/8cb30f42-83bd-41a8-a2f1-8fb8da1405ee,,,False,,
Visual Studio App CenterのmBaaS機能を活用しよう,なかしょ,LT,"みなさんはiOSの開発でどのmBaaSを使用していますか？
Realm / Firebase / ニフクラ mobile backend / AWS Mobile HUB などの声があがるのではないでしょうか。

このLTではiOS アプリに対応したmBaaSであるVisual Studio App Centerについて話します。
・認証
・オンラインデータ同期
・Push通知
・各機能の連携について

聞いて頂ければ mBaaSの選択肢にVisual Studio App Centerを加えることができるでしょう。

## 対象者

* iOS アプリ開発にmBaaSを導入したい/している開発者",https://fortee.jp/files/iosdc-japan-2019/speaker/3c609967-ee66-4c0a-90c5-f526dbca79d4.jpg,nakasho_dev,https://fortee.jp/iosdc-japan-2019/proposal/9b32bc8c-d612-4c80-850d-d088cbb624b6,,,False,,
AWS Amplify を使った簡単GraphQL,松尾将幸,15m,"ここ最近、RESTに並ぶ新しいAPIフォーマットとして、GraphQLが注目を集めています。
GitHubがGraphQLを全面的に採用したAPIを公開するなど、すでに本番サービスでの利用が始まっています。
そのため、GraphQLを使うクライアント側のノウハウは徐々に出てきていますが、逆にGraphQLのAPIを提供するためのサーバ側がどうなっているのかは、まだまだ知られていません。
このセッションでは、GraphQLの基本から始まり、GraphQLサーバをどう構築するのか、さらにはAWS Amplifyを使ってフルマネージドなGraphQLサーバを構築する方法について説明します。

ターゲット
・Webサーバーサイドの開発に関わっている方で、GraphQLサーバを立ててみたい方。
・アプリ開発者で、サーバを意識せず、GraphQL経由で簡単にバックエンドへアクセスしたい方。",https://fortee.jp/files/iosdc-japan-2019/speaker/adb83a18-245d-4971-ad53-2dee19c5f6ae.png,matsnow,https://fortee.jp/iosdc-japan-2019/proposal/3de365a1-123f-4fb1-a4f5-138fe4b8e603,,,False,,
サブスクアプリの裏側を支えるアーキテクチャ図(Firebase版),giiiita,LT_R,"リリースしているアプリの裏側の全体アーキテクチャ図をもとに
各機能の用途と各機能を連携させることで実現できることについて実例をもとに時間が許すかぎり話します！

裏側が全てFirebaseでできているアプリってどんな感じで各機能が用意されてるの？
という疑問に答えられるトークになるかと思います！",https://fortee.jp/files/iosdc-japan-2019/speaker/54c146bf-6d33-4a77-a319-db693659761f.jpg,giiiita_7,https://fortee.jp/iosdc-japan-2019/proposal/dc86178a-9630-42fe-8b06-739b23dd31e0,,,False,,
エッジコンピューティングを用いたサーバーを介さないユーザの位置予測機構,nade,15m,"もしもユーザが次どこに行こうとしているか、１週間後どこにいるかを予測できたらアプリができることはどれだけ増えるでしょう。しかし、そんな情報をアプリ側のサーバーに握られてると思うとユーザはかなり不安を感じるのではないでしょうか。

そんな課題を解決することができるのがエッジコンピューティングです。
ユーザのプライバシー情報をサーバーに送ることなくエッジ＝ユーザの端末内でのみ利用し、端末内で学習サービスで利用することでサービスはセキュアにユーザのコンテキストに沿ったサービスを提供することができます。
本セッションでは大規模実験により収集した100人の位置情報データを用いて学習したモデルを用いて、どの程度オフラインでユーザの位置情報を予測することができたか、どうやってプロダクトに組み込むかについてお話しします。
また、WWDC2019で発表されたCoreML 3の機能、OnDeviceRetrainを利用したモデルのパーソナライゼーションの適用についての話も可能な限りしたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/e3c30867-1f4c-4947-8df1-2ef41ff25200.jpg,kazuma_nagano,https://fortee.jp/iosdc-japan-2019/proposal/36b847d9-8413-462c-a06d-1300513cf2e8,,,False,,
Firestore Security Rule チートシート,nade,LT,"皆さんFirebaseのセキュリティルールはしっかりと書いてますか？後から書けばいいと思ってませんか？
FirestoreのSecurity Ruleではリクエスト、Firestore側の状態を巻き込んだ上で厳重なルールを設定することができます。
さらに、クライアント側のビジネスロジックにまで踏み込んだルール設計を行うことで、通信ロジックが正しく守られていることを手軽に担保し、クライアントのメンテナンス性をも高めることができます。
このトークではSecurity Ruleのチートシートを紹介し、どのように利用すべきかの話をします。
さらに、開発初期にFirestore Security Ruleを先行して設定しておくことで得られる開発速度をはじめとする様々な恩恵について紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/e3c30867-1f4c-4947-8df1-2ef41ff25200.jpg,kazuma_nagano,https://fortee.jp/iosdc-japan-2019/proposal/cab786bd-02fe-4781-85cf-ae5fb8552164,,,False,,
モノレポで複数アプリをリリースする場合のGit運用戦略,nade,LT,"GoogleやFacebookといった大規模開発では、モノレポと呼ばれる1リポジトリで複数のアプリケーションを運用するフローが取られており、実装の共通化が計れるなど、多大なメリットを享受することができます。
しかし、モノレポでの運用ではBitriseなどのCICDツールへの影響は大きな課題となります。
リリースフローのロジック、各種パラメータを分離するためには、どのアプリケーションへのリリースアクションなのかを正しくCIツール側がフックできるようにしなくてはいけません。
また、複数リリースフローが走った場合にhotfixは正しくmasterブランチに、場合によっては別のリリースフローに対しても反映させる必要があります。
本トークでは実際にチームで複数のリリースフローを同一レポジトリで共存させた経験から、その解決策を余すことなくお話しします。

- モノレポ戦略時のGitHubFlow、GitFlow、GitlabFlowへの影響
- モノレポ戦略時に起こりうる事故
- 運用フローでどうやってそれを防ぐか",https://fortee.jp/files/iosdc-japan-2019/speaker/e3c30867-1f4c-4947-8df1-2ef41ff25200.jpg,kazuma_nagano,https://fortee.jp/iosdc-japan-2019/proposal/9a13322e-7627-4b60-997e-31e5098ab146,,,False,,
サブスクアプリの開発から運用を全てFirebaseで行って得た知見を図解で解説！,giiiita,15m,"Firebaseという言葉を聞いたことがある人は沢山いるかと思います。
がしかし、世の中でリリースされているアプリにゴリゴリFirebaseの機能を使っているという例は多分少ないのかなと感じております。

そこで、今回のトークではサブスクアプリの裏側を支えているFirebaseの機能を
開発面(Cloud FireStore, CloudFunctionなど)、成長面(AnalyticsやDynamicLinksなど)に分け
実際にアプリに入っている機能の仕組みや成長基盤がどのように作られているかを図とサンプルコードをもとにお話します！

既存コンテンツを運用している場合、
Cloud FireStoreにDBを移行するのは厳しいよ。。。って方もいらっしゃると思いますが、
成長面でのお話はすぐ実践できる内容なのでぜひ！",https://fortee.jp/files/iosdc-japan-2019/speaker/54c146bf-6d33-4a77-a319-db693659761f.jpg,giiiita_7,https://fortee.jp/iosdc-japan-2019/proposal/b04c117a-89c8-404d-be82-49ae0d4455f2,,,False,,
APIドキュメント駆動開発 ー必要なことは全部GoogleAPIに設計されているー,nade,LT,"アプリの中核となる機能への依存性の高い外部サービスAPIがあった場合、ビジネスロジックの設計にも多大な影響を及ぼすことになります。GoogleAPIのような膨大な機能を有するAPIを利用する場合、大抵のフロントエンドの求める機能は用意したあったりしますが果たして皆さん、その機能を活かしきれているでしょうか？

本セッションではGoogle Calenderを利用した日程調整アプリをリリースした経験から、
　Google Calender APIの機能の紹介
　機能から推理するGoogle先生の考えるフロント側のロジック設計
　アプリの実行時間を２秒以上短縮した話
をお話ししたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/e3c30867-1f4c-4947-8df1-2ef41ff25200.jpg,kazuma_nagano,https://fortee.jp/iosdc-japan-2019/proposal/724d11e6-bb97-4652-beea-a9f70cd1bc0c,,,False,,
ネイティブ開発者からみたFlutterに出来ないこと( あるいはできること ),nade,LT,"ネイティブエンジニアの皆さん、クロスプラットフォームの足跡に怯えていることでしょう、、
「iOS、AndroidだけじゃなくてWebアプリも一辺に作れちゃうらしい」「パフォーマンスも上がってきてる？」
「おれ達のネイティブ開発者の居場所がなくなっちゃうんじゃ、、！？」
大なり小なりそんな心の声があるのではないでしょうか？

でも安心してください。奴らにできないことはまだまだたくさんあります
本セッションでは、僕がが１ヶ月でFlutter製のTwitterクローンアプリを作った経験を元に、 Swift開発者からみたFlutter ( Dart ) に出来ないことをまとめてお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/e3c30867-1f4c-4947-8df1-2ef41ff25200.jpg,kazuma_nagano,https://fortee.jp/iosdc-japan-2019/proposal/219c31c9-749c-4a47-9a80-1fbdf5eef4b7,,,False,,
Flutterの制約の中、慣れ親しんだReduxを実現する,nade,15m,"本トークでは、僕がが１ヶ月でFlutter製のTwitterクローンアプリを作った経験を元に、ネイティブ開発で慣れ親しんだReduxを実現した話をします。

概要
-  Swift開発者からみたFlutter ( Dart ) に出来ないこと
-  immutableなStateを実現する
-  DartにおけるRxライブラリ
-  Flutterのライフサイクルを考慮したBLoCパターンの実装
-  ReduxとBLoCパターンの共存",https://fortee.jp/files/iosdc-japan-2019/speaker/e3c30867-1f4c-4947-8df1-2ef41ff25200.jpg,kazuma_nagano,https://fortee.jp/iosdc-japan-2019/proposal/a5986404-ce10-40b7-bed8-746b62a5bba0,,,False,,
Yet Another CIサービス、AppCenterとAzurePipelinesを使おう！,amay077,15m,"## 概要

iOS アプリ開発の CI(継続的インテグレーション)ツール、何を使っていますか？Bitrise、または CircleCI？
このトークでは、iOS アプリに対応した CI サービス「Visual Studio App Center」 と「Azure Pipelines」についてお話します。

* Visual Studio App Center, Azure Pipelines とは何か？
* 無料で使える macOS ビルドマシンについて
* 主要な CI サービスとの比較
* Visual Studio App Center と Azure Pipelines の違い
* 私（あるいは弊社の）の使い方

聞いて頂ければ CI サービスの選択肢にこの2つを加えることができるでしょう。

## 対象者

* iOS アプリ開発に CI を導入したい/している個人開発者または小規模チーム",https://fortee.jp/files/iosdc-japan-2019/speaker/1f791756-6d88-4ec4-96e1-42bf01e93236.png,amay077,https://fortee.jp/iosdc-japan-2019/proposal/a3d0ba96-46f2-44d4-939b-f4d7e3368358,,,False,,
MVVMの実装を縛るFrameworkを開発・導入し、チームでばらつきがあった実装を統一する,marty-suzuki,15m,"昨今のアプリ開発では、MVVMとRxSwiftまたはReactiveSwiftの組み合わせを選択することが多くなっています。
しかし、MVVMに関する実装（ViewとViewModelの接続の実装、入出力の定義やViewModel内部のバインドの実装など）は、各開発者によって違ってくるはずです。
チームで開発する際に、それらの認識の違いはソースコードの可読性を下げることになってしまい、結果的には修正コストやレビューコストを上げてしまいます。

このセッションでは、MVVMの実装方法を縛るFrameworkを開発しチームに導入することによって、認識の違いを改善する施策を以下のような内容でお話ししようと思います。

- MVVMの実装の違いとは？
- 入力、出力、内部状態や依存の定義場所を明示的にする
- KeyPathを利用して無駄な定義を減らす
- ViewModel内のバインドを単方向にする
- 入出力に注目して定義することで、テストでの注入を簡潔にする
- Xcode Templateの利用
- 既存実装からの置き換え
- Swift 5.1のDynamicMemberLookupを利用することでの更なる改善
- Combineを利用した実装",https://fortee.jp/files/iosdc-japan-2019/speaker/bc7e8cdb-4407-4a19-9a0d-05917b3115cf.jpg,marty_suzuki,https://fortee.jp/iosdc-japan-2019/proposal/4dd803cb-3154-4370-8e91-b8b0c3484f7b,,,False,,
Flutter を使って簡易RSSアプリを作ってみる,Tamappe,15m,"WWDC2019で新しく登場したSwiftUIの特徴は書き方の特徴がFlutterに似ているということ。
逆にFlutterの書き方に慣れていればSwiftUIの学習コストはほとんどゼロに持って行けることでもあります。

ということでSwiftUIを先取りするならFlutterでアプリ開発すればいいじゃんということですね。
だけどFlutterで開発しようにもどんなアプリをどんな感じで作ろうか悩むと思います。
そこでFlutterを使って簡単なRSSアプリが作れるようになれば苦手意識が無くなると思います。

このRSSアプリの開発を通して
- 開発言語Dartの特徴や文法
- DartのインストールからFlutterの初期設定
- API通信やDBへのアクセスの方法

こういった内容をお話しする予定です。",https://fortee.jp/files/iosdc-japan-2019/speaker/4f755bb4-6d84-477f-831d-faf011ddeaa0.png,tamapppe,https://fortee.jp/iosdc-japan-2019/proposal/9c0d7f9d-c414-4708-b602-ccf959e02f54,,,False,,
個人開発のアプリが輝くために,ahiru_starrr,LT_R,"AppStoreを見渡すと、数え切れないほどの膨大な数のアプリが存在する。
しかしながら私たちがよく使うアプリというのはその中のほんの一部に限らている。例えば、Twitter、Instagramなど、ほとんどが大企業の開発したものだ。

それでは個人デベロッパーが開発したアプリが陽の光を浴びることはないのだろうか？

このセッションでは私が個人開発したアプリが100万DLされるまでの取り組みや改善などを中心に、プロモーションにお金を費やすことのできない個人開発のアプリをより多くの人に利用してもらうための手法やアイディアについてお伝えします。
あなたが作ったアプリをもっと多くの人たちに利用してもらい開発へのモチベーションを高めていきましょう！

- AppStore内の検索ロジック
- 今日のAppの仕組み
- 効果的なASO
- ランキングロジックの考察
- WWDC - App Store Labで得た知見",https://fortee.jp/files/iosdc-japan-2019/speaker/92124d2a-1201-4896-96de-39d1d84c8e5d.jpg,ahiru_starrr,https://fortee.jp/iosdc-japan-2019/proposal/a91e43f1-40c4-426f-abec-86ea3f1b463d,,,False,,
SwiftUI による現実的な Clean Architecture の実践,hokuron,15m,"SwiftUI の登場で変わったことは、View やその周辺のデータの扱い方だけではありません。もっと大きな視野、アプリの設計面でも変化をもたらしてくれました。

このトークでは、Clean Architecture の本質を読み解き、SwiftUI と組み合わせた実装を紹介していきます。
まず、ドメイン駆動設計と絡めて Clean Architecture がどういったものかをおさらいをします。
続いて、実際にあった失敗事例を元に、 原案者の Uncle Bob が主張する Clean Architecture の本質に触れます。また、iOS アプリに Clean Architecture を適用する際に陥りがちな混乱や失敗のポイントを押さえます。
そして、SwiftUI を使った場合の Clean Architecture の実現方法を見ていきます。

""Massive View Controller"" などと揶揄され、我々 iOS アプリ開発者は MVC を脱却すべく、さまざまな UI アーキテクチャを試行錯誤してきた歴史があります。そんな折、Clean Architecture にも注目が集まりました。Clean Architecture には、みなさんがすでに試してきたであろう MVC, MVP そして MVVM と同じ名前のオブジェクトが登場します。運の悪いことに、これがこのアーキテクチャの本質から目を逸らさせる一因にもなったようです。

SwiftUI が登場し、Clean Architecture をもう一度見直すチャンスがやってきました。
Controller が何なのか Presenter が誰なのかもう迷うことはなくなるのです。
そう、Clean Architecture of Truth on SwiftUI!",https://fortee.jp/files/iosdc-japan-2019/speaker/2f23b9ae-479e-4093-abaa-ad52483b3bf5.jpeg,hokuron,https://fortee.jp/iosdc-japan-2019/proposal/397c4fa6-1ae5-46ec-b069-472b6bd69d5f,,,False,,
顕著性とは何か？,shoheiyokoyama,LT,"ある画像の顕著性が高い、もしくは低い箇所とはどのような特徴があるのでしょうか。
Appleの公式ドキュメントによると、顕著性とは「画像内で目立つものや重要なもの」とあり、
Vision Frameworkを用いて定量化された数値を取得することができます。

このトークでは

- 顕著性について
- object-based と attention-basedの違い
- 実際の活用例

について発表し、Vision Frameworkから顕著性について解き明かしていきたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/415b4d29-879b-472a-949b-0a95ba7a0f19.jpg,shoheiyokoyam,https://fortee.jp/iosdc-japan-2019/proposal/b74710ac-99f9-4bce-98db-7f6dde030953,,,False,,
Ruby on Rails + Cloud Firestore のハイブリッド構成で構築するリアルタイム・チャット機能,Tomoki Kobayashi,15m,"弊社では社内向けの SNS サービスを提供しており、このウェブアプリケーションのバックエンドは Ruby on Rails、フロントエンドは React で構築されています。このアプリケーションの重要な機能の一つにチャットがあります。このチャット機能を iOS アプリとしてフルネイティブで開発するにあたり、データの更新は既存の Rails API、データ参照は Firebase Cloud Firestore というハイブリッド構成で構築しました。

本トークでは、このなぜこのようなハイブリッド構成にしたか、バックエンドとネイティブアプリそれぞれをどのように設計としたか、実装における苦労点や TIPS などについてお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/e9fcb436-4cfe-4280-a0de-1bd39ccd270a.jpg,temoki,https://fortee.jp/iosdc-japan-2019/proposal/32e83116-d340-431b-9603-7d891a355926,,,False,,
翻訳アプリを作ろう。Firebase Translation API で遊んでみた。,オチ  ムネヒロ,LT_R,"Firebase ML Kitには、デバイス上でのTranslation APIがあります。なんと59言語に対応しています。
https://firebase.google.com/docs/ml-kit/translation
もちろんiOS向けにも提供されているので、サンプルアプリを作ってテキスト翻訳を実践してみます。
デモ中心の体感重視の発表にしたいと思います。
時間が余れば、Firebaseのテキスト認識のAPIと組み合わせた実例も紹介したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/aa3d6881-7881-4715-9997-b579e5902581.jpg,ochi_tw,https://fortee.jp/iosdc-japan-2019/proposal/f96a225d-3745-4f4a-a2b2-96bb6765a574,,,False,,
パッション爆裂エンジニアリング！ ～技術横断コミュニティへの誘い～,ばんじゅん🍓,iOS,"私たちIM@Studyです！みなさんパッションは好きですか？私もiOSの技術とパッションが大好きです！IM@Studyでは「アイドルマスター×エンジニアリング」をテーマにハッカソン、LT会、合同技術本製作などをしています。

みなさんもご存知の通り、世の中には技術を軸に据えた勉強会・コミュニティが多くあります。特定の技術にフォーカスすることで仲間意識や分かりみを共有できます。一方で私たちは特定の技術を対象としない技術横断型のコミュニティです。このような趣味を軸としたコミュニティでは、多種多様の技術者が技術へのパッションと技術以外の部分へのパッションを掛け合わせ、時に大きなムーブメントを起こします。私はIM@Studyのハッカソンに参加してライブフォトのトークをしてみて、iOSの技術を自慢できて最高なうえに、技術軸だけでは絶対に生まれなかった広がりを感じています。

今回お話するのはそういった「技術以外の共通の趣味を軸にし、技術を使って趣味をさらに盛り上げている集まり」についてです。私がIM@Studyで活動して何があったか、どのような技術共有があったのかを紹介しつつ、技術横断コミュニティの楽しさをお届けします！セッションの中ではIM@Studyメンバーと共に、パッションが爆裂してしまったエンジニアリングの経験を語ります！普段はiOSコミュニティに参加していないメンバーもいますが、せっかくの技術パッション枠ですから。技術中心のコミュニティでは出会わないエンジニアと仲良くなれるのも面白さのひとつです。iOSDCは夏の遊園地！iOSの枠を飛び越えて、趣味×技術のパッションを共有しませんか？みなさん自身の技術以外のパッションと技術を掛け合わせた活動のきっかけになると思います！

参考資料集: https://imas.connpass.com/presentation/",https://fortee.jp/files/iosdc-japan-2019/speaker/c5f6ef54-8fab-4487-8c41-996112ca104c.png,banjun,https://fortee.jp/iosdc-japan-2019/proposal/5c5fd527-11ff-4d4d-b2e0-28706695e6ab,,,False,,
Swift Playgrounds でタートルグラフィックスしよう！🐢,Tomoki Kobayashi,15m,"みなさん LOGO というプログラミング言語はご存知でしょうか？私は中学生の時にこの言語のタートル・グラフィックスという機能でプログラミングの楽しさを知り、現在 iOS のエンジニアをしています。

2016年7月、その LOGO とタートル・グラフィックスの生みの親であるシーモア・パパート氏の訃報をきっかけに、Swift 製タートル・グラフィックスの開発を始めました。同年の WWDC で発表された Swift Playgrounds で動かすことができれば、子どもたち（私の息子も含め）に iPad で私の中学生時代と同じ体験をしてもらえるかもしれないと思ったからです。

このトークでは、私が作っている Swift Playgrounds で動くタートル・グラフィックスについて、次のような構成でお話しする予定です。

- LOGOとタートル・グラフィックスについて、そして後世に与えた影響
- Swift, CoreGraphics, CoreAnimation によるタートルグラフィックスの実装
- Playground Book の作り方と、Subscriptions による配布方法
- Swift Playgrounds 動くタートル・グラフィックスを配布して起きたこと",https://fortee.jp/files/iosdc-japan-2019/speaker/e9fcb436-4cfe-4280-a0de-1bd39ccd270a.jpg,temoki,https://fortee.jp/iosdc-japan-2019/proposal/3c2b7111-cdf3-43bb-81b8-446424b3f25c,,,False,,
Xcodeを用いたランタイムデバッグテクニック,shoheiyokoyama,LT,"Xcodeのデバッグ機能は、状態を出力・表示するだけではなく
ランタイムでの処理の実行、スキップ、さらには状態を上書きできるほど強力な機能を備えています。
これらのデバッグテクニックを知っておくだけで、開発者は再ビルドなしに変更を反映させることができ、効率的に開発を進めることができます。

このトークでは、開発者のデバッグ効率を高めることに焦点を当てて

- Xcode11から導入されたEnvironment Overrideなどのデバッグに関する新機能
- その他ランタイムで活用できるXcodeのデバッグ手法
- LLDBコマンドを用いたデバッグ手法

などの内容と活用方法を紹介していきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/415b4d29-879b-472a-949b-0a95ba7a0f19.jpg,shoheiyokoyam,https://fortee.jp/iosdc-japan-2019/proposal/52034c01-acc9-49f7-97b1-7e570640eeb9,,,False,,
ARC Lightning Quiz,Adam Henry,LT,ARCとRetain Cycleは何ですか？Retain Cycleいつ起きるのか？たくさんのiOS Developerが適当に[weak self]付けるけど、いつ本当にいるか判定してみましょう！Kituraで作ったサービスでライブQuizして、発表後早い人がシークレットグッズ貰える！当ててみよう〜,https://fortee.jp/files/iosdc-japan-2019/speaker/c7feb62b-1429-43bf-aa42-cf3b426dbd46.jpg,monolithic_adam,https://fortee.jp/iosdc-japan-2019/proposal/e69ca381-6fda-43ac-a530-4020a4ba3ee8,,,False,,
Adobe XD・Zeplin・Xcode連携で、iOSアプリのデザイン実装フロー効率化,asmz,LT,"iOSアプリ開発においては、デザイナーによってアプリのUIデザイン設計を行い、そのデザインをiOSエンジニアが受け取ってデザイン実装する、という開発フローが一般的かと思います。

しかし、デザイナーからiOSエンジニアへの「デザイン共有」部分がスムーズに行かないと、受け取ったiOSエンジニアは「なるほど、わからん」と思いながら実装、それをみたデザイナーが「思ってたんと違う...」となって結果手戻りという自体が発生してしまいます。

本トークでは近年人気のデザインツール「Adobe XD」、デザイン共有ツール「Zeplin」とXcodeを連携させ、この「デザイン共有」フローを効率化することで、デザイナー・エンジニア間の認識ズレの防止や、デザイン実装の手戻りを低減させるための取り組みをご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/2f60be8a-b54d-4ef7-93c7-096e8c472189.png,_asmz,https://fortee.jp/iosdc-japan-2019/proposal/abace674-8826-44ce-bd24-079ce20b0d63,,,False,,
令和になってアプリが誤動作！カレンダーアプリの苦労話,Kazushi Oenoki,15m,"FirstSeed Calendarというアプリを作っています。
カレンダーアプリは元号やタイムゾーンなど日付に関するハマりどころがたくさんあるのですが、
それ以外にもEventKitの痒いところに手が届かない仕様などでかなり苦労させられます。
また自然言語で予定を入力できるように、予定入力に特化した自然言語処理を実装しています。
このセッションではこのようなカレンダーアプリ開発で学んだ事をお話します。

- 元号や日付、タイムゾーンの扱い方
- EventKitの辛い仕様
- 予定を入力するための自然言語処理の実装
- iOS/watchOS/macOSのマルチプラットフォーム対応、など",https://fortee.jp/files/iosdc-japan-2019/speaker/bb9f7254-7c60-46a2-bb2d-aa983b8f224a.jpg,tamadeveloper,https://fortee.jp/iosdc-japan-2019/proposal/10af41c4-05ec-413a-945f-4cb1d23a446c,,,False,,
短い開発スケジュールに負けないためのモックアプリ駆動開発,asmz,LT,"直近のiOSアプリ開発プロジェクトでは、非常に開発スケジュールががタイトであったことから、要件決めや画面仕様、デザイン設計などの作業と並行しながらiOSアプリ実装を進めていく必要がありました。

そんな中私が試したのは、デザインはワイヤーフレームレベル、内部機能が全てダミー、画面遷移もStoryboardで繋いだだけの「モックアップ」アプリの開発です。

このモックアプリは当然ながら全てダミーのおもちゃレベルのアプリではあるのですが、以下のようなメリットにより、非エンジニアとの要件擦り合わせやデザイナーさんとの画面設計時などに大きな効果をもたらしてくれました。
- iPhone実機で動作させることが可能
- 画面遷移時のトランジッションや操作感も全てプロダクション同等
- 通信が発生せずどんな環境でも動作する
- etc..

また、短い開発スケジュールの中でこのモックアプリ開発にそんなに多くの時間を割くことはできないのですが、あくまで本アプリとは別のXcodeプロジェクトでの開発、つまり一旦「捨てアプリ」とすることで、品質面を担保する必要がなく非常に早いスピード感で用意出来たほか、一度ダミーの画面を作ることから各画面の開発にかかる工数を本アプリ開発前に感じることができ、その後の本アプリの開発見積り精度の向上に寄与する、など意外な効果があることが分かりました。

このLTでは、私が実践したこの「モックアプリ」アプリの開発内容と、それによってもたらされたメリット・効果についてご紹介できればと思っています。",https://fortee.jp/files/iosdc-japan-2019/speaker/2f60be8a-b54d-4ef7-93c7-096e8c472189.png,_asmz,https://fortee.jp/iosdc-japan-2019/proposal/1170a848-f694-44b6-99fc-6ac1cf4a6a23,,,False,,
ベジエ曲線を自在に操る,Youichi Takatsu,15m,"Illustratorなどのドローソフトやフォントのアウトラインの定義にも使われるベジエ曲線。
制御点と呼ばれる点を動かすことで曲線の形を直感的に変形できるため非常に便利な曲線です。
iOS開発においてもUIBezierPathというクラスが用意されており、1次から3次までのベジエ曲線を容易に描画することができます。

UI上では直感的に扱えるベジエ曲線ですが、いざプログラム上で制御点を指定するとなると始終点以外の制御点にどんな座標を設定すればよいのか迷います。

やはり何かを思い通りに扱うにはその定義や性質を知ることが必要です。
ベジエ曲線の数学的定義は複雑に見えるので難しそうに感じるかもしれません。
しかし”線形補間”が再帰的に定義されているだけの非常に理解しやすい構造になっていることがわかります。

- ベジエ曲線を2つのベジエ曲線に分割したり一部だけを取り出すには？
- 曲線の形を変えずに制御点の数を増やすには？
- 4次以上のBezie曲線を自分で描くには？

いくつかの代表的な操作を紹介し、またその定義から導かれる諸性質も紹介します。

ベジエ曲線を良く知り、自在に操りましょう！",https://fortee.jp/files/iosdc-japan-2019/speaker/09ec1eb6-908d-43ea-8948-4b85168745bf.jpg,ta_ka_tsu,https://fortee.jp/iosdc-japan-2019/proposal/0f5d6637-68c9-427d-96f5-87322b5ea473,,,False,,
個人アプリ開発でBitrise上での膨れ上がったライブラリのビルド時間にどう対応するか,多和田 侑,LT,現代のソフトウェア開発においてCIは必須ですが、iOSアプリ開発では様々なライブラリを利用することが多く、CIにおいてライブラリのビルド時間に悩まされがちだと思います。本セッションでは、Bitriseのキャッシュ期間（30日）が切れてしまい、ライブラリのビルド時間の影響でBitriseのワークフローが必ずタイムアウトになったときにお金をかけたくない個人アプリ開発者がどう対応したのか説明します。,https://fortee.jp/files/iosdc-japan-2019/speaker/81ac89d5-5826-4e96-b51f-c7b3c4b35dba.jpg,yuta24,https://fortee.jp/iosdc-japan-2019/proposal/0134a75e-8f4a-4e75-92aa-730bb1a5ac81,,,False,,
XcodeGen それは細分化されたFrameworkとチーム開発のための神ツール,Kyohei Ito,15m,"昨今Xcodeのプロジェクトを利用して作られるアプリケーションは、役割ごとにターゲットを分けてFramework化し、メインとなるアプリケーションにEmbedしてモジュールごとの疎結合性やテストの書きやすさを向上させたり、大きな開発チームではその役割ごとに実装を細分化させてたりすると思います。
そんなとき、一番のネックとなるのがプロジェクトのモジュールの一覧性とメンテナンス性です。
プロジェクトを細分化してしまうと目的の実装コードを見つけるのに苦労したり、反対に一つのプロジェクトでコード管理していたりすると既存のXcodeプロジェクトでは簡単にコンフリクトを起こしてしまいます。
XcodeGenを使えば、開発を進めていく上で必要なモジュールの汎用化などによるフレームワーク化や、プロジェクト構成の整理によるファイル移動などあまりにも簡単に行うことができるようになります。

今回はXcodeGenを使って2つのプロダクトを立ち上げた経験をもとに、XcodeGenの基礎的な部分から現在のプロダクトでの構成や使い方など、その圧倒的なメンテナンス性の高さについてのお話を可能な限り行いたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/1955a115-a9fc-47ff-a7f2-adb255c1ca8f.jpg,KyoheiG3,https://fortee.jp/iosdc-japan-2019/proposal/fde2c4a0-e059-4561-9a93-0ef57bf611b4,,,False,,
User Notification for UX!,sato-shin,LT,"「目に留まる通知」を考え、改善していくのは大事。基本。
でも、いつ、誰に、どんな通知を送れば目に留まるのか？だけを考えていては、心地の良い通知とは言えません。

私たちは通知を送りたいのではありません。通知を用いてより良いUXを届けたいのです。

この5分間では、どうすれば通知のUXを最大化をできるのかを考えていきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/4b05b8e3-ca3b-4fb1-be6e-bb4068cfd5b5.jpg,sankakuButton,https://fortee.jp/iosdc-japan-2019/proposal/d320f9a7-9ee6-4327-869c-f421f3ce529c,,,False,,
巨大なiOSアプリのマルチモジュール化を支える技術,ぎぎにゃん,15m,"我々のチームでは、iOSアプリの開発規模が肥大化し、様々な問題により開発効率を大きく損なっていました。

日々追加され続ける画面、膨大なビルド時間、あらゆるところから呼ばれるシングルトン、今なお大量に残るObjective-C……

そこで我々が取り組んでいるのが、アプリケーションのビルドターゲット分離（マルチモジュール化）です。
これが達成されると、それぞれの画面の疎結合は保たれ、ビルドが爆速になり、テストも容易になり、開発効率が大きく改善するはずです！

このセッションでは、巨大なiOSアプリの開発効率改善の取り組み、とりわけマルチモジュール化をするための方策と、アイディアについてお伝えします。
あなたのアプリのビルド時間も改善していきましょう！

このセッションは以下のような内容を含みます

- ビルド時間の計測と可視化
- マルチモジュール化概論。ビルドターゲットとFrameworkの仕組み
- 依存関係を解決するための抽象化
- Objective-Cやライブラリの破壊と隠蔽
- Static Frameworkの導入とアプリ起動時間の改善
- Sandboxアプリと開発しやすい環境整備
- 依存関係の注入とユニットテスト",https://fortee.jp/files/iosdc-japan-2019/speaker/7f58b7a1-82ad-4209-99de-c7c7e0b0fb4a.png,giginet,https://fortee.jp/iosdc-japan-2019/proposal/b9432907-6c1d-4e51-9f4a-5ca4fb33dc6f,,,False,,
400ページ超の書籍を執筆して得られた、文章・執筆におけるデザインパターン,Yusuke Hosonuma,LT,"コードを書くのと、デザインをするのにまったく異なるスキルが求められるのと同様、文章を書くのには普段の開発とはまったく異なるスキルが求められます。

また、一口に文章と言っても、チャットでの短い文章、ブログ記事などの中程度の文章、書籍などの長文などによっても変わってきます。

本トークでは、400ページ超におよぶ iOSテスト本（https://www.amazon.co.jp/dp/4297106299/）を2人で共著してみて私が感じた、文章・執筆における効果的なパターン（＝デザインパターン、経験則）をお話します。

こういった経験則は、言葉で伝えられる部分と伝えられない部分があると思いますが、前者について私なりのナレッジを共有できればと思っています。",https://fortee.jp/files/iosdc-japan-2019/speaker/be37b116-dfaa-4dc0-b9dc-c066d0638ae0.jpg,tobi462,https://fortee.jp/iosdc-japan-2019/proposal/318e4d0d-b8f1-4a31-a5d7-42a4043ee54e,,,False,,
iPhoneのカメラで写真撮影から現像までの技術を紐解く,satoshin21,15m,"iPhoneやスマートフォンにおける「カメラ」という機能。
写真を撮る、という日常的に行われている行動ではありますが、その実撮影という機能を実現するために様々な技術的処理が使われています。

このセッションでは、「カメラが光を取り込む仕組み」から「iOSで取り込んだデータを画像化する」という所を深掘りし
写真撮影という技術を皆さんと一緒に紐解いていければと思います。

以下、アジェンダ(仮)

1. そもそもの「写真撮影」における仕組み
2. 写真の表現を決める3つの値 F値・シャッタースピード・ISO感度
3. iPhoneにおける「被写界深度撮影」とは
4. iOSでマニュアル撮影アプリを作る
5. RAW画像とは
6. iOSでRAWを加工してみる",https://fortee.jp/files/iosdc-japan-2019/speaker/2552b490-5c39-4770-8a3c-06f4260f2ddd.jpeg,satoshin21,https://fortee.jp/iosdc-japan-2019/proposal/a2e9b461-2c0d-47c5-b3cc-cef012e3f260,,,False,,
Core MLで実現する爆速のARサイズ計測,Kohei Arai,LT,iOS12から搭載されたAR Measureアプリは、ARKitの精度を証明するとともに、現実のものを何でもスマホで測ることができるという世界を実現しました。しかし、AR Measureの操作には慣れが必要だったり、自分でスマホを持った状態で動き回らなくてはいけないという課題が存在します。そんな課題をCore ML、すなわち「機械学習」を使って解決することができます。例えばフリマアプリなどで服を売りたい時、服の着丈、身幅、肩幅、袖丈などを載せたいと思う人がいると思います。このようにあらかじめ測定したい場所・指標が決まっている場合、機械学習でそれらを測るために必要な点群の位置を推定することができます。点群の位置さえ推定できれば、ユーザーがわざわざARで測らなくても、平面認識と深度推定によって自動的に現実物のサイズを得ることができます。つまり、機械学習で「どこを測るか」を決めて、ARで「それが現実世界でどのくらいの長さなのか」を決めます。今回はTシャツを例に、その着丈、身幅、肩幅、袖丈をARKitとCore MLを使って一瞬でサイズ測定するプロトタイプをお見せします。今回のプロトタイプを応用すれば、インテリアや人の身長など、様々なものを一瞬で測ることができるようになります。この発表では、機械学習によっていかにARのサイズ計測が簡単かつ速くなるか、というお話と、それによって実現できた精度とその改善方法、その過程で使用したモデルなど技術的な知見を共有します！,https://fortee.jp/files/iosdc-japan-2019/speaker/f864cc55-b5e6-49c9-8b8a-e23f2120cbea.jpg,kokoheia,https://fortee.jp/iosdc-japan-2019/proposal/69a20a80-9d51-4c3b-a7c3-12b16a61c596,,,False,,
Core MLで実現する爆速のARサイズ計測,Kohei Arai,LT_R,iOS12から搭載されたAR Measureアプリは、ARKitの精度を証明するとともに、現実のものを何でもスマホで測ることができるという世界を実現しました。しかし、AR Measureの操作には慣れが必要だったり、自分でスマホを持った状態で動き回らなくてはいけないという課題が存在します。そんな課題をCore ML、すなわち「機械学習」を使って解決することができます。例えばフリマアプリなどで服を売りたい時、服の着丈、身幅、肩幅、袖丈などを載せたいと思う人がいると思います。このようにあらかじめ測定したい場所・指標が決まっている場合、機械学習でそれらを測るために必要な点群の位置を推定することができます。点群の位置さえ推定できれば、ユーザーがわざわざARで測らなくても、平面認識と深度推定によって自動的に現実物のサイズを得ることができます。つまり、機械学習で「どこを測るか」を決めて、ARで「それが現実世界でどのくらいの長さなのか」を決めます。今回はTシャツを例に、その着丈、身幅、肩幅、袖丈をARKitとCore MLを使って一瞬でサイズ測定するプロトタイプをお見せします。今回のプロトタイプを応用すれば、インテリアや人の身長など、様々なものを一瞬で測ることができるようになります。この発表では、機械学習によっていかにARのサイズ計測が簡単かつ速くなるか、というお話と、それによって実現できた精度とその改善方法、その過程で使用したモデルなど技術的な知見を共有します！,https://fortee.jp/files/iosdc-japan-2019/speaker/f864cc55-b5e6-49c9-8b8a-e23f2120cbea.jpg,kokoheia,https://fortee.jp/iosdc-japan-2019/proposal/26a8fdfb-5a41-4c69-b27c-aca7348e6bd4,,,False,,
宣言型UIプログラミング入門,多和田 侑,15m,"React/Vue.js、FlutterなどのUI開発技術が人気を博しています。これらはいずれも宣言的にUIを記述できる技術となっています。そして、Google I/O 2019 では Jetpack Compose、WWDC 2019では SwiftUI が発表されました。モバイルアプリ開発においてもサードパーティのSDKやライブラリを利用することなく、宣言的にUIを実装することができるようになりました。
本セッションでは、なぜモダンな技術ではUIが宣言的プログラミングで構築できるようになっているのか、そのメリットとiOSアプリ開発におけるUI実装のプログラムがどう変わっていくのかについて考えた内容をご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/81ac89d5-5826-4e96-b51f-c7b3c4b35dba.jpg,yuta24,https://fortee.jp/iosdc-japan-2019/proposal/63716e45-0c77-4043-bbe5-77b0fd3b2125,,,False,,
APIチョットワカル,bannzai,30m,"リモートのサーバーとAPIを通してデータのやり取りをすることもあると思います。多くの組織ではiOSアプリエンジニアとサーバーサイドエンジニアといった呼ばれ方で役割が分業されているのではないでしょうか。iOSアプリエンジニアは様々なデータな処理をAPIを通じて行います。つまり一つの捉え方としてAPIのユーザーと言えます。良いAPI指針、使いやすいAPIはiOSアプリエンジニアのDeveloper Experienceに関わっており、それらは開発する上で決して無視できないものです。

しかし、役割が分業されているから発生するコミュニケーションコスト。APIを含んだ全体の開発のより良い効率化の選択が難しくなっているかもしれません。クライアントサイドのエンジニア、サーバーサイドのエンジニアがそれぞれの都合を把握しよりよい選択ができることが求められていると言えます。

この発表ではiOSアプリエンジニアがより良いAPIユーザーライフを送るために役立つであろうお話をしていきます。具体的には最近のAPI開発のトレンドであるOpenAPIやGraphQLやgRPCなどの特徴や思想、それら周辺の開発ツールやエコシステムの紹介。またそれぞれのメリット・デメリット、クライアント実装とサーバーの実装を網羅的に紹介し今後の開発に活かせるトークにしていきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/3b7851eb-166d-416c-9080-26391a48d465.jpg,_bannzai_,https://fortee.jp/iosdc-japan-2019/proposal/7e718d0e-0f0c-406f-aaf9-1cd31d8a164f,,,False,,
iOSで簡単に使えるML系サービス,Satoshi SUZUKI,15m,"昨今、ML や AI へのビジネス的な需要は高まる一方です。
しかしながら、それらの基盤を自分たちでゼロから準備しメンテナンスし続けることは大変な重労働であり、さらにその事自体はビジネス的に本質的な価値を創造することではありません。
本セッションでは、それらの基盤やサーバーサイドを可能な限り意識せずに AWS のフルマネージドサービスを活用して ML/AI を組み込む iOS アプリケーションの開発を、ML/AI の専門的知識がなくても簡単に始める方法ご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/cf38f63e-e20d-4a8f-9b6b-5ec94e156731.jpg,studio3104,https://fortee.jp/iosdc-japan-2019/proposal/d5bf3659-13ec-40be-9cb8-8facf1415226,,,False,,
自前実装でサポート外の3Dモデルを読み込もう,たなたつ,15m,"SceneKit や Model I/O は標準でいくつかのフォーマットをサポートしており、それらの機能を使うことで数行で 3D モデルを読み込むことができます。
しかし、サポートされているフォーマットの数はかなり少なく、glTF 等の流行りのフォーマットを標準で扱うことはできません。

そこでこのトークでは

- そもそもどうやって 3D モデルが画面に表示されているのか
- どのように SceneKit に対して 3D データを渡せばよいのか

などの、自前で 3D モデルを読み込むために必要なノウハウを紹介します。

来たる AR/VR 時代を前に、3D プログラミングの理解を深めませんか？",https://fortee.jp/files/iosdc-japan-2019/speaker/76790564-fd96-4047-a364-93ba189abd83.jpg,tanakasan2525,https://fortee.jp/iosdc-japan-2019/proposal/a88b3400-8f1a-4a22-af2e-e64f8321ca8c,,,False,,
AR Quick Lookを家具ECサイトに導入した話,NESS,LT_R,"iOS12からAR Quick Look機能が搭載されました。
AR Quick LookはUSDZファイルを設置するだけでSafari等のアプリで3DモデルをAR表示することが出来ます。
ハードウェアやARKitの進化によりARの体験も確実に向上しています。
USDZファイルをサイトに設置することでその恩恵を受けつつユーザー体験やコンバージョンを向上させましょう。
このトークでは、家具ECサイトに導入した事例を元にAR Quick Lookの概要、3Dモデリング、Tips、効果等を紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/9c62f870-d2d9-4cad-9b03-8ce29516ad2e.jpg,nesskazu,https://fortee.jp/iosdc-japan-2019/proposal/03ae470b-93aa-43d7-aa40-b8cfd945bce1,,,False,,
re: SwiftCheck で始める Property-based Testing,Yusuke Hosonuma,15m,"try! Swift 2019 TOKYO では「SwiftCheck で始める Property-based Testing」というタイトルで、Property-based Testing というテスト手法と SwiftCheck という OSS について解説しました。

20分という時間のなかで話せなかった部分もあるので、そうした部分の補足を入れつつ、より多くの方に聞いていただけるように「改善版」という形でトークをさせていただこうと思います。
https://speakerdeck.com/yusukehosonuma/property-based-test-beginning-with-swiftcheck

考え方を知っておくだけでも強力な「Property-based Testing」、あなたも始めてみませんか？",https://fortee.jp/files/iosdc-japan-2019/speaker/be37b116-dfaa-4dc0-b9dc-c066d0638ae0.jpg,tobi462,https://fortee.jp/iosdc-japan-2019/proposal/a8a23351-d77b-4501-80c9-3f07e9286e41,,,False,,
画像処理における、UIImageとCGImageとCIImageの効果的な使い分け,栗山徹,15m,"UIImage、CGImage、そしてCIImageは、いずれも画像情報を保持するためのクラス(以下、画像クラス)ですが、皆さんはこの3つのクラスの特徴を理解して使っていますか？

Web APIで取得した画像を縮小して表示できればよい、といった単純な要件であれば、何も考えずにUIImageを使うだけでも済みますが、リアルタイム処理や複雑な画像処理などのより高度な要件においては、特徴を知らずに使ってしまうと余計な処理を書いてしまって最悪性能低下を招くことになってしまいます。

本セッションでは、UIImage / CGImage / CIImageの各画像クラスの特徴を解説しながら、これら3つのクラスの画像処理における使いどころについてご紹介します。

また、OpenCVなどの画像処理ライブラリとの連携を考慮した画像クラスの使い方や、私が業務で実際に画像処理の性能改善に成功したエピソードもご紹介します。

本セッションが普段何気なく使っている画像クラスについて改めて考えるきっかけとなれば幸いです。

- 発表内容アジェンダ
  1. UIImageとCGImageとCIImageの概要や特徴
  2. 特徴を踏まえた各画像クラスの使いどころ
  3. OpenCVなどの画像処理ライブラリとの連携を踏まえた画像クラスの使い分け
  4. 業務で実装したリアルタイム画像処理の処理性能を改善した体験談",https://fortee.jp/files/iosdc-japan-2019/speaker/28aa5805-bf54-4d46-91f0-a5e860c38dde.jpg,kotetu,https://fortee.jp/iosdc-japan-2019/proposal/3c30c4b4-a647-4198-8e8c-e8100293ee93,,,False,,
Parameterized Test を始めよう！,Yusuke Hosonuma,LT,"事前にテストデータを列挙することで、可読性のよいテストを実現する「Parameterized Test」という考え方があります。

iOS / Swift においてはあまり一般的に広まっていませんが、他の言語では比較的多く取り入れられており、とくにGoでは「テーブル駆動テスト」という名前で一般的な書き方となっています。

本トークでは、Parameterized Test の考え方から Swift における記述方法、そしてそれを簡単に利用できる OSS （拙作）についても紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/be37b116-dfaa-4dc0-b9dc-c066d0638ae0.jpg,tobi462,https://fortee.jp/iosdc-japan-2019/proposal/265bdafa-f028-4ce8-af5d-ab9c37d6fed2,,,False,,
機械学習初心者がML-Agentsに入門してみた,@henteko07,LT,"機械学習の環境を簡単にUnity上で構築することができ、iOSでも学習結果を使用できるUnity ML-Agentsを、機械学習ど素人が入門してみた話をします。
機械学習を始める上で""一番重要""な、機械学習を使う環境を整える所を重点的に説明しますので、このトークを聞いた人はその後すぐにML-Agentsを使い始められるようになります。
具体的な環境を整える方法としては、Dockerとdocker-composeを使って環境を整えていきます。
是非このトークを聞いて、ML-Agentsに入門してみてください。",https://fortee.jp/files/iosdc-japan-2019/speaker/b12d81c3-982b-4ff5-97bd-e2d1662ff12b.jpg,henteko07,https://fortee.jp/iosdc-japan-2019/proposal/cf8245fb-a2ec-41f7-b4bb-be176737e0e7,,,False,,
Kickstarter iOS のコードを本気出して読んでみる。,Yusuke Hosonuma,15m,"OSSとして公開されている Kickstarter の iOS アプリは、MVVM＋Reactive Programming の実践的な例として非常に有名です。
https://github.com/kickstarter/ios-oss

iOSアプリ開発者なら、ほとんどの方がこの OSS の存在を知っており、必要に応じて参考にしようと思っているはずです。

一方で、関数型プログラミングなどを始めとして高度なテクニックも多く使用されており、初見でこのコードを参考にしようとしても難しく感じる方も多いのではないでしょうか。

本トークでは、Kickstarter iOS のプロジェクト構成から始まり、どのように処理が実装されているのかを具体的に紐解いて、解説していきます。

Kickstarter iOS のコードを自力で読み解けるようになるのが、本トークのゴールとして目指すところです。",https://fortee.jp/files/iosdc-japan-2019/speaker/be37b116-dfaa-4dc0-b9dc-c066d0638ae0.jpg,tobi462,https://fortee.jp/iosdc-japan-2019/proposal/989c7df5-92cc-464e-aa96-14276ea98c5b,,,False,,
フロー同期とオブザーバー同期で理解するアーキテクチャパターンと、パターンから一歩進んだ設計,花芽尋かすみ,15m,"MVC, MVP, MVVM, CleanArchitecture, Flux, Redux, etc...などのアーキテクチャパターンに対する議論が一旦の落ち着きを見せる2019年。

それぞれのパターンの違いとして状態の保持の仕方・データフローの制約・レイヤー分け・様々な違いが語られると思いますが、
その中であまりスポットの当たらない話にデータの同期方法の違いがあります。

データの同期方法にはフロー同期とオブザーバー同期という2つの同期方法があり、アーキテクチャパターンによって採用している方法が異なります。
同期方法の違いによってデータの受け渡しやコードの書き方のお作法も変わってきます。
書き方の違いがあれば、読みやすさの違いやそのコードに込める意図の違いなどにもつながる話になります。

このトークではフロー同期とオブザーバー同期という2つのデータの同期方法の違いから、アーキテクチャパターンの違いを説明します。
また、アーキテクチャパターンにとらわれずに、もう一段具体的な話として「このシチュエーション、このデータ同士の場合にはこの同期方法を選択するとよい」などの話もします。",https://fortee.jp/files/iosdc-japan-2019/speaker/6c6708db-a2d3-4ed2-9cbe-b041a600c989.png,kagahiro_kasumi,https://fortee.jp/iosdc-japan-2019/proposal/f98e8099-cd51-44d2-a303-91ac9c32e282,,,False,,
Swift Package Manager を利用してテスト実行サイクルを高速化する,Yusuke Hosonuma,LT,"テスト駆動開発（TDD）をうまく進めるためには、Red → Green → Refactor のサイクルをすばやく回すことが大切とされています。
この一連のサイクルをリズムよく回していくことで、自信をもって開発を進めていけると言っても過言ではありません。

しかし、現時点におけるiOSアプリ開発においては、テスト実行のためにはシミュレータが必須となっています。

1. シミュレータを起動し
2. アプリがシミュレータにインストールされるのを待機し
3. ようやくテストが実行されます

本質的にほしいのは、3.のテスト実行のみであり、実際Androidアプリ開発においてはJVMのみで実行することが可能となっています。
1.と2.の時間は、高スペックなマシンを利用すれば改善しますが、それでも快適なリズムで開発するためにできるだけ短くしたいはずです。

本トークでは、Swift Package Manager を利用して、本質的に必要な 3.のテスト実行のみで完結させる方法について解説します。",https://fortee.jp/files/iosdc-japan-2019/speaker/be37b116-dfaa-4dc0-b9dc-c066d0638ae0.jpg,tobi462,https://fortee.jp/iosdc-japan-2019/proposal/eead70e0-c221-4aed-9625-72bb03febf1a,,,False,,
"Write the ""code"", Change the world. 〜エンジニアと法律〜",niwatako,LT,"iOSエンジニアが転生してブロックチェーンエンジニアになりました。
と思いきや、私はいま、暗号資産関連の法改正に向けて、法律を学び、調査報告や提言、要望を作成しています。
これは、アプリケーション開発の前の、開発環境構築の前の、社会環境構築です。
プログラムも法律も""Code""です。どちらも世界を変えるものでしょう。
Write the ""code"", Change the world.
日本は民主主義です。ソースコード以外にも、私達が世界を変えるためにコミットできるコードがあります。
Coinhiveやアラートループが逮捕されるこんな時代だからこそ、私達がすべきコミットがあるのではないでしょうか。",https://fortee.jp/files/iosdc-japan-2019/speaker/fbdfd13d-531d-48fd-a83a-9c2fda361733.jpg,niwatako,https://fortee.jp/iosdc-japan-2019/proposal/7b99f91a-25e0-4d9c-b05f-fec111c11693,,,False,,
メディアアプリの計測Tips,樋口雅拓,LT_R,計測は重要です。レポートを作成することで、運営による改善が可能となります。また、計測した指標で運営できるようになったら、機械に置き換えて効率化を行う事ができます。ハマりやすい「CTR」、「読了率」、「WebView」、「A/Bテスト」の計測Tipsを共有します。,https://fortee.jp/files/iosdc-japan-2019/speaker/11bd93dd-88ea-4f50-b5f5-2d296d7755e6.png,mahiguch1,https://fortee.jp/iosdc-japan-2019/proposal/4026e424-46e8-4b00-a987-9cf7ac61951b,,,False,,
Firebase A/B Testingを使ってサーバ側をA/Bテスト,樋口雅拓,LT_R,Firebase A/B Testingは、色や形などデザインについてA/Bテストする事例をよく見ます。しかしRemoteConfigの値を変更できるため、それ以外にも応用可能です。 サーバのデータ取得APIのA/BテストをFirebase A/B Testingを使ってやってみた事例を発表します。,https://fortee.jp/files/iosdc-japan-2019/speaker/11bd93dd-88ea-4f50-b5f5-2d296d7755e6.png,mahiguch1,https://fortee.jp/iosdc-japan-2019/proposal/248038af-97f3-4046-8b46-586bfbbc39c5,,,False,,
RecommendWidget開発,樋口雅拓,LT_R,"RecommendWidgetとは、メディアアプリの記事下に付いているオススメ記事と広告をセットにしたものです。 オススメ記事はRecommendEngine、広告は広告システムから取得しています。
既存のRecommendWidgetを使っていたが、思ったほど成果が上がりませんでした。じゃあ、内製化するか！軽い気持ちで始めたら、想定外の要件が発生。同じ罠にハマる人が減るように、経験を共有します。",https://fortee.jp/files/iosdc-japan-2019/speaker/11bd93dd-88ea-4f50-b5f5-2d296d7755e6.png,mahiguch1,https://fortee.jp/iosdc-japan-2019/proposal/69d1c9f6-b54d-4cb7-a8a1-71ad58474234,,,False,,
チームで設計力を上げる！組織で学び、学習速度をn倍にした開発プロセス,福尾幸太郎,LT,"アプリの設計本が出版されたり、アーキテクチャの話が話題に上がることが多く見受けられる今日この頃。
設計に関してはすでにGoFのデザインパターンやSOLID原則をはじめ様々な設計パターンが存在します。

しかしその一方で、現実にはそのパターンや考え方を知っていたとしてもうまく適用できなかったり、適用箇所に気が付かなかったり、その他の要因によって設計の難しさは増加します。
また設計は経験や引き出しの多さ、ときにはひらめきなどによっても変わってきます。

では僕たちはどのようにして設計力を身につければ良いのでしょうか？
どのようにしたらベストな設計に近づくことができるのでしょうか？

そこで本トークでは実際に僕らのチームで行っている「設計レビュー」について説明し、どのようにしてチームで設計力を上げたかをお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/ac3c9f65-a1b4-410d-8928-6cba4b9aed24.jpg,haptaro,https://fortee.jp/iosdc-japan-2019/proposal/520335fa-8656-45ed-a5f7-2acd8e38c307,,,False,,
チームで設計力を上げる！組織で学び、学習速度をn倍にした開発プロセス,福尾幸太郎,15m,"アプリの設計本が出版されたり、アーキテクチャの話が話題に上がることが多く見受けられる今日この頃。
設計に関してはすでにGoFのデザインパターンやSOLID原則をはじめ様々な設計パターンが存在します。

しかしその一方で、現実にはそのパターンや考え方を知っていたとしてもうまく適用できなかったり、適用箇所に気が付かなかったり、その他の要因によって設計の難しさは増加します。
また設計は経験や引き出しの多さ、ときにはひらめきなどによっても変わってきます。

では僕たちはどのようにして設計力を身につければ良いのでしょうか？
どのようにしたらベストな設計に近づくことができるのでしょうか？

そこで本トークでは実際に僕らのチームで行っている「設計レビュー」について説明し、どのようにしてチームで設計力を上げたかをお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/ac3c9f65-a1b4-410d-8928-6cba4b9aed24.jpg,haptaro,https://fortee.jp/iosdc-japan-2019/proposal/5808279f-28b4-436f-8f0a-d1279465f681,,,False,,
しくみから理解するSwiftUI,Kazumasa Kumamoto,15m,"SwiftUIの登場で、まるで魔法のようにシンプルな形で、UIを記述することが可能な時代が訪れようとしています。

しかしSwiftUIは、本当に「なんだかよく分からない魔法」なのでしょうか？

いいえ、れっきとしたSwiftのコードです。

このトークでは、

* some View や VStack/HStack が動くしくみ
* @State や @Binding が動くしくみ

など、一歩だけ踏み込んで、なぜ SwiftUI が動くのかを一緒に紐解いていきましょう。

これらを理解することで、SwiftUIをより自信を持って使えるようになれるようなお話をしたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/cb8a25e4-b688-47cd-8836-e2bb313b13fa.jpg,kumamo_tone,https://fortee.jp/iosdc-japan-2019/proposal/e658773d-8ee7-4f8a-a159-082085111298,,,False,,
勉強会の名札を作る,Kazumasa Kumamoto,15m,"「Twitterのアイコンは分かるんだけど、顔が覚えられない…」

ということが、インターネットに生きていると、しばしば起こります。

勉強会などで名札を用意してくださる場合もあるのですが、
名刺サイズの大きさのことが多く、
立ち位置によってはよく見えないという課題がありました。

また、業者に依頼すればきれいで大きな名札を作ることもできるのですが、
コストがかかりすぎるため、普段のイベントではやや大げさになってしまいます。

そこで、ある勉強会で、実験的に大きなアイコン付きの名札を作るため、
Mac上で動く自動名札作成アプリを、PDFKitを使って自作してみたところ、
アンケート上では良い反応を得ることができました。

このLTでは、名札づくりをはじめ、
継続的に勉強会を運営をしていて直面した課題、得られた知見、Tipsなどをお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/cb8a25e4-b688-47cd-8836-e2bb313b13fa.jpg,kumamo_tone,https://fortee.jp/iosdc-japan-2019/proposal/69baf97c-0c14-4963-838b-f776a853f711,,,False,,
勉強会の名札を作る,Kazumasa Kumamoto,LT,"「Twitterのアイコンは分かるんだけど、顔が覚えられない…」

ということが、インターネットに生きていると、しばしば起こります。

勉強会などで名札を用意してくださる場合もあるのですが、
名刺サイズの大きさのことが多く、
立ち位置によってはよく見えないという課題がありました。

また、業者に依頼すればきれいで大きな名札を作ることもできるのですが、
コストがかかりすぎるため、普段のイベントではやや大げさになってしまいます。

そこで、ある勉強会で、実験的に大きなアイコン付きの名札を作るため、
Mac上で動く自動名札作成アプリを、PDFKitを使って自作してみたところ、
アンケート上では良い反応を得ることができました。

このLTでは、名札づくりをはじめ、
継続的に勉強会を運営をしていて得られたちょっとしたTipsをお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/cb8a25e4-b688-47cd-8836-e2bb313b13fa.jpg,kumamo_tone,https://fortee.jp/iosdc-japan-2019/proposal/a8e63191-59d5-42dd-800c-80546cff827b,,,False,,
Dark Mode対応と色管理,Kazumasa Kumamoto,15m,"iOS13 から、OSの見た目に Dark Mode が選択できるようなりました。

Dark Mode への対応は必須ではなく推奨という位置づけですが、
Dark Mode に正しく対応して色管理することで、
色の指定のし忘れや、変更し忘れに強い形にリファクタリングすることができます。

これを機に、色管理のしかたを見直してみませんか？

このトークでは、

* Dark Mode への対応の方法
* 色の管理のしかた
* Sketch との連携
* どうしても iOS10 を切れないときに使えるTips

などをお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/cb8a25e4-b688-47cd-8836-e2bb313b13fa.jpg,kumamo_tone,https://fortee.jp/iosdc-japan-2019/proposal/db45acf7-8c99-428b-98c8-fca635c4dc4c,,,False,,
Bagelを使ってチームでお手軽ネットワークデバッキング！,平野哲也,LT,"こんな経験はありませんか？
ある日、QAさんから「表示がおかしい」とバグ報告がありました。
しかし、アプリの画面を見るだけでは何が起きているのかわかりません…
再現が難しい場合は問題の切り分けに格闘することになります。

そんな時は、このトークで登場するBagelで不具合が発生した端末の通信結果をみれば
問題の切り分けがすぐにできます。

BagelはiOSの通信のリクエストやレスポンスを監視することができる
オープンソースのMacアプリです。
このトークではBagelとCharlesなど他のツールと比較し、
Bagelの導入の仕方、Bagelならではの通信デバッグTipsをお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/4d496e74-91d8-4af6-be5c-46aea3007532.png,hiranodept,https://fortee.jp/iosdc-japan-2019/proposal/5237bb0c-6018-4993-8d1d-ddce8e123e87,,,False,,
iOSDCのプロポーサル判別器をつくろう,Daiki Matsudate,LT,"今年もiOSDCのプロポーサルを考える季節がやってきましたね。一人でたくさん応募できるので、たくさん書くぞ！と息巻きます。かといって、たくさん出すのは骨が折れます。もし、採択されるかどうか事前にわかれば…？

このトークでは、iOSDC4年分のプロポーサルを使って、判別機を作成し、実際に採択されるか判別してみます。",https://fortee.jp/files/iosdc-japan-2019/speaker/3e8e4b99-1c45-4ca3-a1b9-945778a76795.jpg,d_date,https://fortee.jp/iosdc-japan-2019/proposal/f48c494e-0ae2-468b-bb8e-57fcef43e499,,,False,,
おじさんだってkawaiiしたい！！！,sachi_p,iOS,"「バ美肉おじさん」という存在を知っていますか？
耳馴染みのない方は「よくわからない名詞」+「おじさん」というパワーワードに困惑すると思います。

「バ美肉」とはバーチャル美少女受肉の省略形であり、バーチャル世界で活動するための2Dまたは3Dの美少女アバターを得ることです。
そして、「バ美肉おじさん」とはバーチャル美少女受肉を果たしたおじさんのことを指します。

見た目は美少女、声はおじさんで活躍していらっしゃる方もいますが、
自力で女声を出したりボイスチェンジャーを使ったりして声まで完全にkawaii化を果たしたおじさんもいます。

さて、この「バ美肉おじさん」ですが、美少女になりたいと日々願う私にとって夢のような存在でした。
早速、手持ちのボイチェンを取り出して試してみるのですが、まさかそんな安々と美少女ボイスが手に入るわけｎ

「あれ…？？？自分って思ったよりかわいい…？？」

原体験です。Welcome to ようこそ沼。
しかし、既存のボイチェンを使い続けるうちに満足できない自分がいることに気付きます。
ですが、我々はエンジニア。既製品で解決できないのであれば、自分で作ればよいのです。

ということで「Gachikoe!」というPC向けのボイチェンを作りました。
https://twitter.com/sakurane_sachi/status/1098209948830330880

このトークはkawaiiを求めた限界おじさんがGachikoe!を作り続けるための道のり(全12話)のディレクターズカット版です。
- なぜkawaii目指すのか
- Gachikoe!で目指した世界
- 就職しても開発を続けるためにしたこと
- クロスプラットフォーム（Windows/Mac/Linux）対応させる話",https://fortee.jp/files/iosdc-japan-2019/speaker/b6579b43-2a32-447a-9e60-eb955d2f20f2.jpg,sakurane_sachi,https://fortee.jp/iosdc-japan-2019/proposal/e800f3f6-deac-46b3-b129-60716c517d11,,,False,,
突然ですが、あなたには今からiOSエンジニアになっていただきます。,sachi_p,LT_R,"みなさんがもしSwift未経験で、突然こう告げられたらどうしますか？
しかも、前任者は明日退職するので引き継ぎは1日だけ！
新機能の納期まで……1ヶ月！？
これを1人で！？

………出来らぁ！！！！！！！！！！

このトークは、知識も人手も前任者もない状況から
会社のiOSアプリメンバーの力を借りて、新機能リリースにこぎつけるまでの
激動の1ヶ月の物語です。",https://fortee.jp/files/iosdc-japan-2019/speaker/b6579b43-2a32-447a-9e60-eb955d2f20f2.jpg,sakurane_sachi,https://fortee.jp/iosdc-japan-2019/proposal/08cd488b-89b3-429d-97a4-9adc36bedcea,,,False,,
Edge Swipe以外のRedirectable UIなSwipe Back導入してますか？導入する際の注意点と解決策,荒木 敦,LT_R,"Edge Swipe以外で、途中で方向転換可能なSwipe Backを導入したことがありますか？
導入する時に注意しなければならない点が以下のようにたくさんあります。
そういうトラブルに自分が当たった時の解決策の例を解説します。
遷移先、遷移元でUINavigationBarの表示/非表示が変わる場合
遷移先、遷移元で下タブの表示/非表示が変わる場合
UITableViewCellをスワイプで削除できる場合
iOS10の場合
キーボードが表示される場合
無限スクロールで指が時計回りにスクロールしていた場合
MicroViewControllerでsetNavigationBarHiddenを複数使っていた場合
Swipe Backを禁止にしたい画面の場合
Peek & Popを使ってた場合
Swipe Back中にガチャガチャいろんな操作をした場合
UINavigationItemのsearchControllerを使っている場合
etc... 
たくさんいろんなバグを踏んだ時の解決法の例を紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/ae8fd507-ddf6-42fb-b158-d3e9092a162a.jpg,applideveloper,https://fortee.jp/iosdc-japan-2019/proposal/7b1e99fd-ab5d-4496-bf3d-27b4ed067584,,,False,,
Swiftの知識を使ってC++の世界に飛び込もう,rikusouda,15m,"iOSアプリ開発者にとってC++を直接使う機会は少ないかもしれません。しかしiOSアプリとC++は全く無関係ではないと考えます。
iOSアプリではC++で記述されたライブラリを使うこともできますし、Objective-C++を用いてアプリ開発することもできます。またSwiftコンパイラやLLVMのソースコードにはC++で書かれた部分もあります。

C++を知ることは、普段開発しているアプリがどのように動作しているのかをより深く調査するための足がかりとなります。

このトークでは、すでにSwiftを知っている人向けにC++の動作をSwiftに例えながら、Swiftと違う部分や自己学習すると戸惑いそうな部分にフォーカスを当てて解説します。このトークのゴールは「C++とSwiftにはこのような違いがある」ということを理解し、学習のための足がかりを構築することです。これを足がかりにC++の世界に飛び込みましょう。",https://fortee.jp/files/iosdc-japan-2019/speaker/1c56b174-74a5-4e81-839b-d139f0d61195.jpg,rikusouda,https://fortee.jp/iosdc-japan-2019/proposal/c39e331a-8c70-42ef-b58e-38f798f40295,,,False,,
iOSエンジニアならではのMacのベンチマーク観点,kanari3,15m,"一般的なMacのトータルベンチマーク、CPUスコアは公開されている通りですが
iOSエンジニアとしてコスパの良いMac選びの為、どのようなベンチマーク観点が必要かをまとめます。
iOSデベロッパベンチマークの標準化を目指したいです。

・一般的なスコアとの乖離
・CPUコア数の影響
・メモリは多い程良い？
・採用アーキテクチャによる差
・Xcodeのバージョンによる影響
・クリーンビルドの時間だけで判断できるか？
・CI/CDツールとの兼ね合い
・Macbook Proの物理的な仕様差についてのTips
・上長を納得させるためのノウハウ",https://fortee.jp/files/iosdc-japan-2019/speaker/35f809be-14e8-41b1-aa35-f52fcdd5f9fb.png,kanari3333,https://fortee.jp/iosdc-japan-2019/proposal/1c7dd94a-c4fd-4141-91fc-aa4c27871e2d,,,False,,
Amazon Pinpoint でユーザーに合わせたプッシュ通知を実現する,kiwi,LT,"プッシュ通知の配信といえば Firebase を思い浮かべる方が多いと思いますが、
AWS でも Pinpoint というサービスを使うことで、プッシュ通知のセグメント送信をすることができます。
さらに、 AWS Pinpoint では AWS Lambda を使ってセグメントをカスタマイズすることができるため、
ほかの AWS リソースのユーザー情報をもとに通知内容をユーザーごとに変更することまでできます。
また、ユーザーに複数のチャネルを割り当てることができるため、プッシュメールとプッシュ通知を使い分ける、といったことも可能です。

本 LT では、 Pinpoint を用いたプッシュ通知の配信から、こうしたユーザーごとのカスタマイズまでを扱います。
特に普段のアプリのバックエンドで AWS を活用しており、通知配信も AWS 内で行いたい方の参考になれば幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/084ebfaf-8139-4b31-bd6e-baaebf4912d4.jpg,koga_wiwi,https://fortee.jp/iosdc-japan-2019/proposal/2c0d8d55-9ee0-4443-ad99-06385c3a22e6,,,False,,
Swift でサーバーレス !!,Kensuke Shimokawa,15m,iOSのバックエンドとして、Server Side Swiftを書く場合、SwiftのServer Side Frameworkを使って書くことが多いと思います。これらの Frameworkを使ってもクラウドサービスとの連携はもちろん可能ですが、サーバーレスでSwiftを動かすことで、クラウドサービスとのシームレスな連携ができます。今回はイベントドリブンにServerless Swiftを動かす方法を紹介します。,https://fortee.jp/files/iosdc-japan-2019/speaker/84ccc1a2-d82a-4d3c-9dbb-35677c739f8a.png,_kensh,https://fortee.jp/iosdc-japan-2019/proposal/ac1475bf-8001-4890-91cd-2c33efbffcab,,,False,,
ヴァイオリンの鑑定ができないのでCore MLを利用してそれっぽいことを言う,kanari3,15m,"元弦楽器屋が、あったらいいなを実現しました。
オールドの弦楽器の鑑定は難しく、プロの鑑定家でも即答できない場合が多々あります。
機械学習で、制作国・流派・年代などオピニオンの手助けになる情報を少しでも引き出します！

弦楽器ならではの難しさを聞くだけでも面白いと思います♪
・距離によって見え方が変わる
・裏板・表板が誤反応してしまう
・ラベルはf字孔からだと1枚絵として観測できない
・立体的な認識の絡む難しさ",https://fortee.jp/files/iosdc-japan-2019/speaker/35f809be-14e8-41b1-aa35-f52fcdd5f9fb.png,kanari3333,https://fortee.jp/iosdc-japan-2019/proposal/dcb2e329-3575-43ee-a17d-bf255791df44,,,False,,
脱 cocoapods-keys のやり方、そして 脱 cocoapods-keys することによるその効果。,中川泰夫,LT_R,"iOS アプリを作るにあたって、内製、他サービス問わず、 API や SDK を利用することが多くなった今日このごろ。
利用するものそれぞれに Sandbox 環境と Production 環境があり、 iOS アプリ側に設定しなければならない値も違うことがよくあります。
また、それらの API や SDK で利用する認証情報は GitHub といった外部でホスティングされているサービスへアップロードせずに共有する必要があります。

私が今関わっているプロジェクトでは cocoapods-keys を利用して、上記の課題を解決していたのですが、管理している設定値の一つに内製の API の向き先が含まれており、その向き先が頻繁に変わるため、変わるたびに pod update を打たされ、その都度、 Pods プロジェクトが再読込されて、フルビルドが走り、 Break Time に突入します。

適度の休憩は大切だけど、この待ち時間を減らせたら、より多くの時間を開発に回せるはず！
本 LT ではどうやって脱 cocoapods-keys をしたか、その効果についてお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/f9b8edfa-9c71-43ea-abe1-d0871b82e57b.png,ynakagawa33,https://fortee.jp/iosdc-japan-2019/proposal/b2758d15-ed9a-46dd-a09e-87e0126d2163,,,False,,
Appleと、私たちと、音声操作。,akatsuki174,LT,"Appleは古くからアクセシビリティ対応に力を入れています。その中でも特に音声に関する機能強化はよく耳にすると思います。iOSアプリの外に目を向けてみても、スマートスピーカーが徐々に一般家庭に進出しており、音声技術の発達とその活用法が期待されるところとなっています。そう、いまや音声技術は特定の誰かのためだけでなく、すべての人のための技術と言うことができます。

このトークでは音声操作対応をまだやったことがない人、そもそも対応方法がわからない人に向けて、次のことを紹介します。

・Siri、VoiceOver、VoiceControlとは何なのか
・音声操作対応はユーザ体験をどこまで変えるか
・特別な実装が必要ないケース/あるケース",https://fortee.jp/files/iosdc-japan-2019/speaker/04c7a269-1283-42f2-86b8-afca89cc26f2.jpg,akatsuki174,https://fortee.jp/iosdc-japan-2019/proposal/c6fbc89f-c84b-4c65-96f3-bc858a23239a,,,False,,
すべての人のためのアクセシビリティ対応,akatsuki174,30m,"あらゆる人が、あなたの提供するアプリの恩恵を受けられるように。
あらゆる人が、あなたの提供するアプリをより便利に使えるように。

アクセシビリティ対応と言うと特定の誰かのための対応だと思われ、優先度が低くなってしまいがちです。確かにアクセシビリティ対応は特定の誰かのための対応という側面もありますが、すべての人のための対応でもあります。いつも使っているアプリが、手を使わずに使えるようになったら。もっと使う手間を省けたら。夢は広がるばかりです。

「とはいえアクセシビリティ対応をしても一般ユーザは使ってくれないのでは？」そう思う方もいると思います。しかしアクセシビリティ対応で可能になることをきちんと理解して実装、広く告知をすれば、一般ユーザも便利に使えるような体験革命ができるかもしれません。

このトークでは、Appleがどのようなアクセシビリティ機能を提供しているのか、そして私たちiOSアプリ開発者はどのような実装を経て、どのような体験をユーザに提供できるのかについてお話します。

【目次】

・アクセシビリティ最新情報（WWDC2019 Keynoteより）
・設定 - 一般 - アクセシビリティから何ができるのか
・視覚のアクセシビリティ
　・文字サイズの変更に耐えうるデザイン作り
　・VoiceOverにきちんと対応するには
　・アプリデザインとコントラスト
・聴覚のアクセシビリティ
　・Siriはどこまでユーザを楽にするのか
・身体のアクセシビリティ
　・Voice Controlに見るアプリの未来",https://fortee.jp/files/iosdc-japan-2019/speaker/04c7a269-1283-42f2-86b8-afca89cc26f2.jpg,akatsuki174,https://fortee.jp/iosdc-japan-2019/proposal/940b3857-749f-4f9e-a740-71761fe53627,,,False,,
スケールするモバイルアプリを最速で開発する方法,福井厚,30m,"モバイルアプリを開発するチームにサーバーサイドやインフラに強い人が少なくて困ったことはありませんか？このセッションではバックエンドサービスを楽々構築して利用増加に対応するスケーラブルなモバイルアプリを素早く構築する方法を紹介します。

バックエンドのAPI、データベース、認証、認可、ログ収集などの基盤の構築や、急にスパイクしたときに自動的にスケールしたいなどインフラやサーバーサイドの構築、設定が難しくて困ったことはないでしょうか？これらサーバーサイドの課題はクラウドのマネージドサービスをうまく利用することで解決することが出来ます。でもどこから手をつけて良いのか分かりませんよね。

このセッションではAWS Amplifyファミリーを利用することで、モバイル開発者がこれらの問題に悩まず素早くアプリを構築する方法を分かりやすくご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/38ab872c-2cd9-442c-8eba-63be6cf9ffae.jpg,afukui,https://fortee.jp/iosdc-japan-2019/proposal/c3dbeb5e-79dc-498f-b942-24a0f5ba299f,,,False,,
「App内課金のプロモーション」を活用しよう,坂本 和大,LT,"「App内課金のプロモーション」はiOS11から追加された機能で、対応すればApp Storeの画面上にApp内課金の訴求と購入するための導線を設置することができる、というものです。この機能を上手く活用すれば、既存ユーザーへの訴求はもちろん、期間限定の課金アイテムを訴求することなどで新規ユーザーの流入にもつなげることができます。

さらにこの「App内課金のプロモーション」を実装していればApp Storeの「Today」タブや「App」タブ、「ゲーム」タブでアプリが特集され、ユーザーが特集から直接App内課金を購入するための導線が配置される、とったこともあります（Appleのサイトにその旨の記述もあります）。

本トークでは、「App内課金のプロモーション」の概要とハマりどころ、さらにはアプリの審査提出時に気をつけるべきことまでを5分に集約して語ります。みなさんが辛いリジェクトを経て世に送り出したApp内課金たち、それを少しでも多くのユーザーに届け、アプリを便利に使ってもらえる手助けになれば幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/426395bb-4ffe-4443-9ba7-a678350311f8.jpg,kazu0620,https://fortee.jp/iosdc-japan-2019/proposal/7374cc53-fa31-48c2-a453-d974b687754b,,,False,,
「App内課金のプロモーション」を最大限に活用しよう,坂本 和大,15m,"「App内課金のプロモーション」はiOS11から追加された機能で、対応すればApp Storeの画面上にApp内課金の訴求と購入するための導線を設置することができる、というものです。この機能を上手く活用すれば、既存ユーザーへの訴求はもちろん、期間限定の課金アイテムを訴求することなどで新規ユーザーの流入にもつなげることができます。

さらにこの「App内課金のプロモーション」を実装していればApp Storeの「Today」タブや「App」タブ、「ゲーム」タブでアプリが特集され、ユーザーが特集から直接App内課金を購入するための導線が配置される、とったこともあります（Appleのサイトにその旨の記述もあります）。

本トークでは、この「App内課金のプロモーション」の具体的な実装方法とハマりどころ、さらにはアプリの審査提出時に気をつけるべきことから、お試しオファーと組み合わせたキャンペーンでの活用方法までを詳細に語ります。みなさんが辛いリジェクトを経て世に送り出したApp内課金たち、それを少しでも多くのユーザーに届け、アプリを便利に使ってもらえる手助けになれば幸いです。

【対象の方】
- App内課金の機能を備えたアプリをすでに開発運用している
- App内課金を少しでも多くのユーザーに利用してほしいと思っている
- プロモーションオファーやお試しオファーを利用したキャンペーンを行う予定がある
- またはそれらに関心がある",https://fortee.jp/files/iosdc-japan-2019/speaker/426395bb-4ffe-4443-9ba7-a678350311f8.jpg,kazu0620,https://fortee.jp/iosdc-japan-2019/proposal/c1809023-c3b0-46bb-bec9-1d314fb2d34c,,,False,,
iOSエンジニア的Androidアプリ開発,akatsuki174,iOS,"「同じモバイル分野だし、Androidもすんなり理解できるんでは？」
そう思っていた時期が私にもありました。

しかし実際に始めてみると、

・Kotlin（Java）でどう書けばいいかわからない
・Android Studioの基本的な操作、デバッグ方法ってなんだ？
・流行りの設計/ライブラリ等がわからない
・画面回転させたらいろいろリセットされた！
・多サイズ対応難しい…

などなど数々の躓きポイントがありました。

このトークでは、以下の項目を通じてiOSエンジニアに適した形でAndroidアプリ開発の基礎について紹介したいと思います。

・Android Studioを一通り使えるようになろう
・Swiftと比較しつつKotlinを学ぼう
・Androidアプリ開発環境の「イマ」を知ろう
・Androidアプリ特有の仕組みを知ろう
・iOSと似ているアレは、内部的にどのような違いがあるのか把握しよう

「Androidアプリ開発をやってみたいけどきっかけがなくてまだやっていない」という方、きっかけを作るので始めてみましょう！",https://fortee.jp/files/iosdc-japan-2019/speaker/04c7a269-1283-42f2-86b8-afca89cc26f2.jpg,akatsuki174,https://fortee.jp/iosdc-japan-2019/proposal/b1f7b7a0-9400-46e1-ba51-437bee7fa7ab,,,False,,
今こそ理解しよう、輸出コンプライアンス,坂本 和大,LT,"iOSアプリを審査に提出するときに回答が必要となる「輸出コンプライアンス情報」についての質問。あなたは毎回、正しく理解して最適な答えを選ぶことが出来ている、と胸を張って言えますか？

HTTPSも暗号化に含まれるの？暗号化を使用しているけれど、EAR（米国輸出管理規則）の免除資格を満たしているか曖昧だ、など不安を抱えながら回答している、という方もいらっしゃるのではないでしょうか。

本トークでは5分間でフローチャートを交えながらこの「輸出コンプライアンス情報」にあなたのアプリがどう回答するべきなのかを説明します。このトークさえしっかり聞けば、明日以降のiOSアプリの申請では自信を持って「輸出コンプライアンス情報」に回答することができるようになるでしょう。",https://fortee.jp/files/iosdc-japan-2019/speaker/426395bb-4ffe-4443-9ba7-a678350311f8.jpg,kazu0620,https://fortee.jp/iosdc-japan-2019/proposal/a972c654-1928-47e7-ba2a-24eb5152fecc,,,False,,
Core MLでしょうがっこうのせんせいをたすける,kanari3,15m,"学校の先生って大変ですよね。少しでも楽にしてあげたい！ということで…

機械学習を用い、小学校のテストを自動採点できるようになるまでの軌跡をお話しします。
採点結果をプリンタで出力したり集計したり、できることはなんでもやります！
先生からのコメントもあるかも！",https://fortee.jp/files/iosdc-japan-2019/speaker/35f809be-14e8-41b1-aa35-f52fcdd5f9fb.png,kanari3333,https://fortee.jp/iosdc-japan-2019/proposal/43c8884e-e21a-4f40-9d28-89534fe00a77,,,False,,
BitriseにAppCenter APIを利用したオリジナルステップを公開するまで,kanari3,15m,"Bitrise x AppCenter

iOSはデバッグシンボルのアップロードステップがあるけど、Androidはまだない！
ということで、AppCenter CLIにも実装されていない機能を、APIを読み解いてBitriseに公開するまでをお話しします。

1. AppCenterの現状
2. AppCenter CLIに実装されていないステップをAPIドキュメントを読み解いてスクリプト化
3. 運用、もやもや
4. Bitrise CLI、AppCenter CLIを利用してステップを作成
5. 遺物化

公開したコミュニティステップは以下
- iOS ipa upload
- iOS dSYM upload
- iOS ipa & dSYM upload
- Android mapping.txt upload

今まで関わりのなかったステップのメンテについてもお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/35f809be-14e8-41b1-aa35-f52fcdd5f9fb.png,kanari3333,https://fortee.jp/iosdc-japan-2019/proposal/24f40bfe-cb4f-48d4-8d21-41c20240a199,,,False,,
Create MLを使ってTwitterの感情分析を行う,46kuro,LT_R,"Create MLによって、iOS開発者が簡単に機械学習のモデルを使用できるようになりました。
本トークでは、Create MLの機能を利用してテキスト分類を行い、普段Twitterに呟いてる内容から感情を分析してみた話をします。
Create MLを使ってみて感じたことなどを話せればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/a44ed556-d420-4c87-b2ec-1580138b4861.jpg,kuroFront46,https://fortee.jp/iosdc-japan-2019/proposal/9e60f047-9b02-4735-a55f-ad3743fbf6b7,,,False,,
サービスにおけるデザインシステムの構築,nakajijapan,15m,"モバイル開発をしている上でデザインとの関係性は切手は切れない関係だとお思います。
また、プロダクト自体も成長に伴い複雑性がましてきました。そのときに私はデザインシステム
に注目して様々なアプローチしてきました。

本発表ではあまり馴染みではない「デザインシステム」はどういうものなのかという基本的な話から
ではどのようにしてプロダクトにデザインシステムを導入し、どこまで何をしていったのか
エンジニアリングを持って何を解決していったのかを解説します。

概要
- デザインシステムの基礎
- 導入にあたって
- エンジニア側からできること
    - カラー管理・自動化
    - 画像管理
    - インタラクション",https://fortee.jp/files/iosdc-japan-2019/speaker/039a7f8d-a25c-44a0-9eee-4e606938987c.png,nakajijapan,https://fortee.jp/iosdc-japan-2019/proposal/a3126674-646c-402a-8d15-69080fd7efe3,,,False,,
マイクロインタラクション啓蒙活動,nakajijapan,30m,"モバイル開発を行う上でUIやインタラクションを実装することは少なからず通る道だと思います。
しかし、インタラクションの実装となると、工数をかける時間がなかったり、周りから理解されずに開発できなかったりと
なかなか実装に踏み込めない場合があります。また具体的に何をすればいいのかわからないケースもあります。

本発表では、本来のUXを解決しつつ、
そこを達成するための様々な動作（マイクロインタラクション）をどのように開発に導入していくか、導入のメリット、事例などをお話し、プロダクト開発がより良いものになるための手助けをします。",https://fortee.jp/files/iosdc-japan-2019/speaker/039a7f8d-a25c-44a0-9eee-4e606938987c.png,nakajijapan,https://fortee.jp/iosdc-japan-2019/proposal/98fe4d90-ea33-4d1b-9187-215027ee440b,,,False,,
支給マシンがHDモデルでもSSDに負けない💪,kanari3,15m,"ジョイン後支給されたマシンが4コアiMacで(´▽｀)ﾎｯっとしたのもつかのま、
おやおや？うちのMacbook Proより遅いようだ😇

SSD領域の少ないFusion Drive搭載マシンで爆速開発を行う為のノウハウをお伝えします！
RAM Diskの導入、ベンチマークから運用のベストプラクティスまで、失敗談を交えてお話しします。
ツールの公開もあるよ！",https://fortee.jp/files/iosdc-japan-2019/speaker/35f809be-14e8-41b1-aa35-f52fcdd5f9fb.png,kanari3333,https://fortee.jp/iosdc-japan-2019/proposal/7fce1a8d-31c4-4b34-99b7-a7dd62fd48bd,,,False,,
Swiftのスタック変数とCPUレジスタの関係を読み解いた,rikusouda,LT,"このLTはコードの解説というよりは体験共有に比重を置いたLTです

Swiftの関数内でIntのような型(struct)のインスタンスを確保すると、スタックのメモリ領域に格納されるということは過去のWWDCセッションでも語られています。「スタック」とはメインメモリ上の領域です。CPUが演算をするときには「レジスタ」という高速なデータ領域を利用します。メインメモリはCPUのレジスタに比べてとてもアクセス速度が遅いことが知られています。一般的には変数は「スタック」に確保することになっていますが、実際にはCPUレジスタを使って高速化したほうがよい気がしますよね? しているはずですよね? でも確証がありません。

決してSwiftコンパイラに詳しくない私は自分で調査するという発想になかなかならず、疑問を抱えたまま過ごしていました。
WWDC19に参加することができたので、かねてよりの疑問をのラボで聞きました。しかし直接の回答にはたどり着けません。いただいたアドバイスは「LLVM IRとかアセンブラ読むといろいろわかって面白いよ」と。
覚悟を決めて、LLVM IRやARM64のアセンブラを読みました。

雰囲気で「こう動いている気がする」と思っていたことが明確になり「Swiftわからない」という気持ちが減りました。そして、その過程はとても面白い体験となりました。

決してSwiftコンパイラに詳しくない私が、どのように結論にたどり着いたのかの体験を共有します。",https://fortee.jp/files/iosdc-japan-2019/speaker/1c56b174-74a5-4e81-839b-d139f0d61195.jpg,rikusouda,https://fortee.jp/iosdc-japan-2019/proposal/c2a89fff-ce66-4821-b2d4-4b7b6ff293d5,,,False,,
あなたが求めるインスタンスを簡単生成！Fixturableの紹介,永田 健人,LT,"テストケースを書く際に特定プロパティーのみを指定してインスタンスを生成したいと思うことはありませんか？
つまり、特定のプロパティには興味があるけど、他のプロパティ値には興味がなく適当な値でも良いというケースです。
こういったケースにおいても特定のプロパティーのみを指定してインスタンスを作る方法があります。
本トークでは、Sourceryを利用してFixture生成メソッドを自動生成することのできる Fixturable プロトコルの実装についてご紹介します。
Fixturable を使って快適なテスト環境を作ってみませんか？",https://fortee.jp/files/iosdc-japan-2019/speaker/fcf39d0b-198c-48d6-9153-d5fd69f9428a.png,ngtknt,https://fortee.jp/iosdc-japan-2019/proposal/c9baff74-6639-4eb8-8f31-4b9d8f020930,,,False,,
あなたが求めるインスタンスを簡単生成！Fixturableの紹介,永田 健人,15m,"テストケースを書く際に特定プロパティーのみを指定してインスタンスを生成したいと思うことはありませんか？
つまり、特定のプロパティには興味があるけど、他のプロパティ値には興味がなく適当な値でも良いというケースです。
こういったケースにおいても特定のプロパティーのみを指定してインスタンスを作る方法があります。
本トークでは、Sourceryを利用してFixture生成メソッドを自動生成することのできる Fixturable プロトコルの実装についてご紹介します。
Fixturable を使って快適なテスト環境を作ってみませんか？",https://fortee.jp/files/iosdc-japan-2019/speaker/fcf39d0b-198c-48d6-9153-d5fd69f9428a.png,ngtknt,https://fortee.jp/iosdc-japan-2019/proposal/ea1221e3-4fe3-4142-8e1b-b505b88d9412,,,False,,
Accessibility Identifierを自動生成してUIテストをもっと簡単に,永田 健人,LT,"UIテストでは Accessibility Identifier を利用してUI要素を特定し操作します。
この Accessibility Identifier はプロダクトコードで開発者が指定し、テストコードで利用します。
そのためUIテストを書く際に、各開発者が新しいコンポーネントに出会う度に命名し設定しなければなりません。
この課題に対して、本トークでは以下のアプローチをご紹介します。

- 開発者に依存しない一貫性のある命名
- Swift や Objective-C のリフレクションAPIを利用したAccesiiblity Identifierの自動生成",https://fortee.jp/files/iosdc-japan-2019/speaker/fcf39d0b-198c-48d6-9153-d5fd69f9428a.png,ngtknt,https://fortee.jp/iosdc-japan-2019/proposal/c236d256-b80a-4860-b1af-6d7aafde31ab,,,False,,
Accessibility Identifierを自動生成してUIテストをもっと簡単に,永田 健人,15m,"UIテストでは Accessibility Identifier を利用してUI要素を特定し操作します。
この Accessibility Identifier はプロダクトコードで開発者が指定し、テストコードで利用します。
そのためUIテストを書く際に、各開発者が新しいコンポーネントに出会う度に命名し設定しなければなりません。
この課題に対して、本トークでは以下のアプローチをご紹介します。

- 開発者に依存しない一貫性のある命名
- Swift や Objective-C のリフレクションAPIを利用したAccesiiblity Identifierの自動生成",https://fortee.jp/files/iosdc-japan-2019/speaker/fcf39d0b-198c-48d6-9153-d5fd69f9428a.png,ngtknt,https://fortee.jp/iosdc-japan-2019/proposal/6186744e-6a55-486d-88c7-f76063322a01,,,False,,
Firebase A/B Testingを使ってA/Bテストをはじめよう,永田 健人,30m,"Firebase A/B Testing は Firebase が提供するA/Bテスト基盤です。このA/Bテスト基盤は、設定値管理を提供する Firebase Remote Config とトラッキング基盤である Firebase Analytics を利用して構築できます。
このトークでは、Firebase A/B Testing の概要、セットアップ、A/Bテストの運用してプロダクトの改善に繋げるために必要なことを共有します。
このトークを聞いて明日からプロダクトの改善に活かしましょう！

本トークの対象者:

- Firebase A/B Testing に興味がある方
- A/B テストを実施してプロダクト改善に繋げたい方",https://fortee.jp/files/iosdc-japan-2019/speaker/fcf39d0b-198c-48d6-9153-d5fd69f9428a.png,ngtknt,https://fortee.jp/iosdc-japan-2019/proposal/03b1eee3-2348-47f9-95d3-edafd8f751a1,,,False,,
Firebase A/B Testingを使ってA/Bテストをはじめよう,永田 健人,15m,"Firebase A/B Testing は Firebase が提供するA/Bテスト基盤です。このA/Bテスト基盤は、設定値管理を提供する Firebase Remote Config とトラッキング基盤である Firebase Analytics を利用して構築できます。
このトークでは、Firebase A/B Testing の概要、セットアップ、A/Bテストの運用してプロダクトの改善に繋げるために必要なことを共有します。
このトークを聞いて明日からプロダクトの改善に活かしましょう！

本トークの対象者:

- Firebase A/B Testing に興味がある方
- A/B テストを実施してプロダクト改善に繋げたい方",https://fortee.jp/files/iosdc-japan-2019/speaker/fcf39d0b-198c-48d6-9153-d5fd69f9428a.png,ngtknt,https://fortee.jp/iosdc-japan-2019/proposal/c32e0c19-ff6b-4b2d-b4e5-38792fa12f43,,,False,,
Swift で実践する Page Object Pattern,永田 健人,LT,"UIテストはお好きですか？
開発者はUIテストを書くことによってクリティカルパスを安全に変更できるようになり、安心して夜を過ごすことができます。一方で、UIテストを書くコストが非常に高いと感じている開発者も多いでしょう。
本トークでは、UIテストを非常に簡潔に書けるようにするためのデザインパターンである Page Object Pattern をご紹介します。Page Object Pattern ではある画面を一つのクラスに抽象化することで、各テストケースではシンプルに実装することができます。

本トークで得られること:
- Page Object Pattern の概要
- Swift での実践コード",https://fortee.jp/files/iosdc-japan-2019/speaker/fcf39d0b-198c-48d6-9153-d5fd69f9428a.png,ngtknt,https://fortee.jp/iosdc-japan-2019/proposal/f42ef89a-27c1-4f8a-abe5-8056c2608957,,,False,,
Swift で実践する Page Object Pattern,永田 健人,15m,"UIテストはお好きですか？
開発者はUIテストを書くことによってクリティカルパスを安全に変更できるようになり、安心して夜を過ごすことができます。一方で、UIテストを書くコストが非常に高いと感じている開発者も多いでしょう。
本トークでは、UIテストを非常に簡潔に書けるようにするためのデザインパターンである Page Object Pattern をご紹介します。Page Object Pattern ではある画面を一つのクラスに抽象化することで、各テストケースではシンプルに実装することができます。

本トークで得られること:
- Page Object Pattern の概要
- Swift での実践コード",https://fortee.jp/files/iosdc-japan-2019/speaker/fcf39d0b-198c-48d6-9153-d5fd69f9428a.png,ngtknt,https://fortee.jp/iosdc-japan-2019/proposal/0174fa27-3612-4f94-b0e9-2ecea88e10d3,,,False,,
リアクティブ時代におけるPromise/Future,taiki komaba,15m,"WWDCでCombine.frameworkが発表され、世は一気に大リアクティブ時代へ。
コルーチンやasync/awaitは一体どこにいってしまったのか。

そんな時代の流れに逆らってPromise/Futureについて語ります！
いくつかのPromise/Futureライブラリを渡り歩き、コントリビュートしてきた経験によるPromise/Futureの説明、
リアクティブとの違い、Promise/Futureライブラリ比較、そしてそれらを実際に利用していく際に失敗した点やテクニックをご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/0443ae5b-e80d-47ec-b31d-37a59c68c4d1.jpg,r_plus,https://fortee.jp/iosdc-japan-2019/proposal/e4545f8e-c167-4a1a-94eb-5faae67496d1,,,False,,
iOS12.2の新機能 プロモーションオファーを探る,齋藤健悟,LT_R,"一度退会してしまったユーザーが、再度戻ってきてくれることほど嬉しいことはありません。
iOS12.2から使えるようになったプロモーションオファー機能を活用することで、一度退会したユーザーをカムバックさせるチャンスを広げることができます。
実際に導入対応を行った経緯を交えつつ、プロモーションオファーの機能と活用方法を紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/9bd58c58-b328-4971-b63d-d19f60ebbc7c.jpg,hamayokokuririn,https://fortee.jp/iosdc-japan-2019/proposal/d253382e-efa7-4d7c-80e4-9e3cd723c301,,,False,,
XCTestを使ってModel層のJSONデコードのリファクタリングをTDD,Tamappe,15m,"Swift 4 でCodableが導入されてJSONデコーダーの選定ライブラリ戦争が幕を閉じました。
めでたし、めでたし。

ではありませんよね。
社内事情やアプリ開発の都合でCodable以外のライブラリを使っていたり
ガリガリデコードしてきたアプリもあると思います。
筆者はこれまでSwiftyJSONからObjectMappaerだったりCodable以外のJSONデコードで実装されてきた
アプリをリファクターしてCodableに書き直した経験があります。
大体そういうアプリはモデルのパラメータが多すぎ問題だったり複雑な事情を抱えるクラスが多かったです。

このセッションではあまり実用されてこなかったXCTestをJSONデコードのライブラリの置き換え作業を通して
実践することでXCTestやTDDなどの基本的な概念とリファクタリングの感覚的な方針を説明できればいいなと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/4f755bb4-6d84-477f-831d-faf011ddeaa0.png,tamapppe,https://fortee.jp/iosdc-japan-2019/proposal/94b5f8e5-1f79-4930-9fe0-1be193be202f,,,False,,
自作して理解するリアクティブプログラミングフレームワーク,y.imajo,30m,"WWDC19で発表されたCombine.frameworkはリアクティブプログラミングという言葉では発表されなかったものの、
複雑になりがちなイベント処理をデータの流れとして統一的に扱い、
イベントへ反応する処理を組み合わせる宣言的なコーディングを実現します。
このことによりCombine.frameworkは最近のリアクティブプログラミングのパラダイムに沿ったフレームワークと言えるでしょう。
 
そして、同じくWWDC19で発表されたSwiftUIと並んで、
iOS 13以降のiOSアプリ開発の標準手法となりゲームチェンジャーとなっていくはずです。
そのような将来に備えて、
我々はリアクティブプログラミングのパラダイムを仕組みから理解する時がやってきたのです。

このトークでは、
現状のリアクティブプログラミングフレームワークであり広く普及しているRxSwiftを構成するソースコードを解説し、
それを参考にテストコードを交えながら最小限のリアクティブプログラミングフレームワークをトークの中で作成していきます。

そのことにより、今まで雰囲気で知っていた次のルールがその心で理解できるはずです

- Coldなストリームはなぜsubscribeされないと動作しないのか
- SubjectがObservable/Observerの性質を持つというのはどういう意味か
- ColdをHotなストリームに変換する具体的な方法
- Hotなストリームがsubscribeされても1回しかイベントを発生しないとはどういう原理か

本セッションの進行とともに、皆さんには「理解したわー。リアクティブプログラミング完全に理解したわー」という感想を持っていただければ幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/739bb25a-c20d-431f-a87c-f9d63bbdd05d.jpg,yimajo,https://fortee.jp/iosdc-japan-2019/proposal/9974a56b-757e-49be-a161-8a2cf8dd67fb,,,False,,
センサの意外な使い道😎,じんむ,LT,"🍎様の製品には、加速度センサ、近接センサ、バイブレーション、カメラなどなど、様々なセンサが搭載されており、
それらを簡単にかつ高精度に扱えるAPIが、続々と用意されています。
このLTでは、センサの""意外な""使い道を、じんむが実装した愉快なアプリたちを並べつつ、楽しく紹介したいと思います😎

・変なアプリを開発したいがアイディアがない！
・自分のアプリにスパイスを加えたい！
人向けです✨",https://fortee.jp/files/iosdc-japan-2019/speaker/0d7bcfb6-a7ea-47cb-9346-159b8ed569c8.jpg,koooootake,https://fortee.jp/iosdc-japan-2019/proposal/6b1c2983-e288-4407-9ae6-a99c4d37318f,,,False,,
エクセルみたいな列番号と行番号のあるスプレッドシート風味のUIを実装してみた,Tamappe,LT_R,"あまり見かけないUIですがカレンダーのような予定表を実現させるとあるタスクが降りかかってきました。
エクセルではとある列と行を固定して上下左右にスクロールさせることが簡単です。
ですが、これをiOSで実現させるとなるとなかなか大変でハマりポイントが多いことが分かりました。

タスクの仕様は
- 1行目と1列目を固定させる
- スクロールできる部分は上下固定・左右固定といった制限がある
- 一つのセルのサイズはどの端末でも固定のサイズを指定するが1行目(ヘッダー)だけ高さを可変にしたい
- セルはタップできる物とタップ不可の物が混同している

このような仕様をUICollectionViewで実現させました。
このセクションでその時の実装方法をハマったポイントを紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/4f755bb4-6d84-477f-831d-faf011ddeaa0.png,tamapppe,https://fortee.jp/iosdc-japan-2019/proposal/793a51dc-b2b7-4b8d-8e83-3dcf29d1dcb7,,,False,,
リアクティブプログラミングのパラダイムをおさらいし、iOS 13以降のCombine.frameworkに備える,y.imajo,15m,"このトークはCombine.frameworkとは何であり、何ができるかということを既存のRxSwiftと比較する形で説明します。

WWDC19で発表されたCombine.frameworkはリアクティブプログラミングという言葉では発表されなかったものの、
複雑になりがちなイベント処理をデータの流れとして統一的に扱い、
イベントへ反応する処理を組み合わせる宣言的なコーディングを実現します。
このことによりCombine.frameworkは最近のリアクティブプログラミングのパラダイムに沿ったフレームワークと言えるでしょう。

そして、同じくWWDC19で発表されたSwiftUIと並んで、
iOS 13以降のiOSアプリ開発の標準手法となりゲームチェンジャーとなっていくはずです。
そのような将来に備えて、
なぜリアクティブプログラミングがここまで普及していて、
どう使えばよりよく使いこなせるのかを考えていくことをあらかじめ整理しておく必要があるはずです。

そのため、これまでのリアクティブプログラミングフレームワークのプログラミングパラダイムについての歴史を振り返り、
現状のリアクティブプログラミングフレームワークであり広く普及しているRxSwiftの採用する関数型プログラミング・Observerパターン・Iteratorパターンそれぞれのアイデアについてもおさらいします。

なお、Combine.frameworkの内容は現在公開されているベータ用ドキュメントから考察するものであり、
正式版とは仕様や動作が異なる可能性があります。
さらに、今回のトークで発表していない内容の質問に関しては答えない可能性があり、
発表資料の一般公開は予定していません。",https://fortee.jp/files/iosdc-japan-2019/speaker/739bb25a-c20d-431f-a87c-f9d63bbdd05d.jpg,yimajo,https://fortee.jp/iosdc-japan-2019/proposal/0311f78c-6db1-427b-85b3-213a0904439c,,,False,,
HUNTER×HUNTERに学ぶRxSwiftのViewModel設計パターン,y.imajo,LT,"週刊少年ジャンプで不定期連載中の少年漫画『HUNTER×HUNTER』には、
登場人物たちの戦いを戦略的に進める「念能力」という特殊能力の概念があります。
この念能力の使用には強い条件である「制約」とそれを遵守する「誓約」という2つの概念によって、
物語の登場人物たちが強い制限に従うリスクを持ち、
そのリターンとして能力が向上し物語を大きく転換させるという図式がこの作品を奥深くさせている1つの要因ともなっています。

我々がアプリケーションを作成するプログラミングをしていく上で、
一人でコードを書き続けるのならば設計やコーディングスタイルは自由で良いのでしょうが、
多くの場合は複数人で同意した設計をもってコードを築き上げていく必要があります。
もしそれができなければ、
複数人での開発作業はプログラミング手法自体の知識差や考え方の違いが大きく実装に現れ、
次のような課題が現れるはずでしょう。

- 要求に対して正しく実装されているかどうかの相互レビューが難しい
- メンバーが作成したコードに対して機能を追加・修正するのが難しい
- 都度無駄な議論をレビュー時に行ってしまう

これらの課題を生み出さないための手段として、
「より良くコードを書いていくための条件」として「それを遵守させること」を設計として実現することであると筆者は考えます。

本トークでは、『HUNTER×HUNTER』の名勝負を振り返りながら、
強い制約を持たせた設計により、強い誓約を表現できるインタフェースが上記課題の解決に近づけるということを述べます。",https://fortee.jp/files/iosdc-japan-2019/speaker/739bb25a-c20d-431f-a87c-f9d63bbdd05d.jpg,yimajo,https://fortee.jp/iosdc-japan-2019/proposal/09b2728b-eca7-4938-aabf-a3aa3663ac3a,,,False,,
`setTabBarHidden` でUITabBarを自在に扱う,kagemiku,15m,"複数のコンテキストを持つ、ほぼ全てアプリにおいて使われているUITabBar。
基本的には、常に表示しておくか、push遷移した際にhiddenにするかの2択だと思います。

このトークでは、そのUITabBarをより柔軟に扱う方法を紹介します。
具体的には、`setTabBarHidden`というメソッドを定義することにより、画面によってUITabBarの表示・非表示を柔軟に切り替えられるようにします。
Home画面ではUITabBarを表示し、一度どこかへpush遷移した際に非表示にする。その後、push遷移を続けていく過程で、もう一度UITabBarを表示する。そしてまた非表示に……　のような制御が可能になります。

ただ、そう簡単にはいきません。SafeArea対応、Edge Swipe Back対応、navigationBarの有無やisTranslucentのtrue/falseなどなど、ハマるポイントが多くあります。
実装する上で、上記のようないくつかあるハマりポイントを解決していく過程を、ライブコーディング形式でのデモを交えつつ、丁寧に解説していきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/4053b639-9c68-4b3f-9294-2636b5e39af4.png,kagemiku_en,https://fortee.jp/iosdc-japan-2019/proposal/2ef0846a-aab9-4e05-b16a-d4333bd425a9,,,False,,
Firebase A/B Testing For RemoteConfig の活用,Takao Horiguchi,LT_R,"プロダクトを良くするためにA/Bテストを使って数々の施策を試してみることは多いと思います。
弊社ではFirebaseのFirebase A/B Testing For RemoteConfig（以下、ABTesting）を活用してA/Bテストを行っております。
しかし、ABTestingやRemoteConfigは運用する上でハマりやすい特徴がいくつかあります。
このトークでは、数々の施策を打ってきた中で得た知見やサポートとのやりとりで得た情報などをお話したいと思います。

- ABTesting, RemoteConfigをどのように活用しているか
- ABTesting, RemoteConfigのつらみ",https://fortee.jp/files/iosdc-japan-2019/speaker/18943de3-4ccc-4b5e-8460-dd473f747127.jpg,takaoh717,https://fortee.jp/iosdc-japan-2019/proposal/d871efce-aae7-4d3c-a65d-56fe921386ec,,,False,,
UIを全部コードで実装するようになって変わったこと,Takao Horiguchi,LT_R,"iOS開発の際にStoryBoardを使用するかコードで実装するかという話はよく耳にすることがあると思います。
私が所属しているチームでは元々StoryBoardとXibでレイアウトを作成していましたが、課題を感じてコードのみでレイアウトを組むようにしてみました。
このトークでは、コードのみでUIの実装を行ってみてのメリットデメリットや実際に実務で1年以上開発してみてどうだったかという知見をお話したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/18943de3-4ccc-4b5e-8460-dd473f747127.jpg,takaoh717,https://fortee.jp/iosdc-japan-2019/proposal/4d89cf25-783f-4605-a3ae-c5700f3d6d9a,,,False,,
退屈なことは Xcode Custom File Templates にやらせよう,kagemiku,LT_R,"新しいViewControllerを追加する際、「New Fileして、既存のファイルからコードをコピペして…」というようなこと、していませんか？
その定型作業、退屈じゃないですか？
退屈なことは Xcode Custom File Templates にやらせましょう。
少々クセのあるマクロの扱い方の解説から、実際の利用事例の紹介まで。
個人開発ではもちろん、チーム開発ではさらなる効果を発揮するXcode Custom File Templatesを使いこなしましょう。
これを聞けば、退屈から少しだけさよならできます。そんなトークです。",https://fortee.jp/files/iosdc-japan-2019/speaker/4053b639-9c68-4b3f-9294-2636b5e39af4.png,kagemiku_en,https://fortee.jp/iosdc-japan-2019/proposal/9991b464-5c03-48fa-854f-b030f9963a77,,,False,,
マルチデバイスに対応したApple専用アプリから見たiOS 13,nakajijapan,15m,"私は、CloudKitを利用しマルチデバイスに対応したMarkdown特化型メモアプリを個人的に開発しています。
そして、今回のWWDC 2019では各デバイスで去年以上に様々なアップデートの発表がありました。
私もこのアップデートに合わせて各OSの対応が必要となりました。

本発表では、マルチデバイス（iOS, iPadOS, macOS）に対応したアプリでどのようにして今回のアップデートに対応していったか、
CloudKitで新しく発表された便利なAPIの有用性について話します。

## 概要
- iOS, iPadOS, macOS
    - SwiftUI
    - Dark Mode 
    - CloudKit
        - 新しいAPIが発表されたのでその有用性があるか
    - 各OSアップデートにおけるジレンマ",https://fortee.jp/files/iosdc-japan-2019/speaker/039a7f8d-a25c-44a0-9eee-4e606938987c.png,nakajijapan,https://fortee.jp/iosdc-japan-2019/proposal/f08dde1c-380b-4ba3-8e32-66909c290dbb,,,False,,
実践 CallKit/PushKit ときどき🐛退治,monoqlo,15m,"みなさんは音声通話機能を実装したことがありますか？

iOS 10 から導入された CallKit を使うと、純正電話アプリのような見た目の着信画面や通話中画面を表示することができます。また、割込通話や割込通話による保留と保留解除なども簡単に対応できます。

そんな素晴らしいフレームワークですが、いつまにか Apple 公式サンプルコードは提供されなくなり、ドキュメントや Web 上の記事などを頼りに試行錯誤する必要があるのが現状です。

このトークでは、バックエンドに Twilio を用いて、PushKit と CallKit を使用して通話機能を実装する過程で得た知見を共有します。
具体的には、CallKit および PushKit の概要および使い方、効率的なデバッグ方法に加え、Twilio のワークアラウンドや、気づきにくい致命的な CallKit のバグと、それにどう対処したのかについてもご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/ac51af72-ee48-418e-9a35-6e6de4cd3804.jpg,monoqlo,https://fortee.jp/iosdc-japan-2019/proposal/1682af8a-9c94-4040-9f0c-086c81aea9a3,,,False,,
iOSアプリのユニットテストにおけるTable Driven Testの導入と、そのためのライブラリを作った話,Akio Yasui,LT_R,"近年のiOSアプリ開発では、MVVMやVIPERといったアーキテクチャの普及により、「ビジネスロジックだけでなくビューについてのロジックも可能な限りテストする」という考え方が人口に膾炙しつつあります。しかし、アプリが大きく複雑になるほど、ビューのロジックが持つ入出力は増えていき、パターンの数が膨大になっていくため、テストの複雑性も高まっていきます。

たとえば、APIから取得したコンテンツの一覧をリストで表示するような画面を一つとっても、コンテンツの数や種類だけでなく、ログイン状態やサブスクリプションの状態、ユーザー設定、ネットワーク接続状態や端末の種類などといった""入力""のパターンによって、表示されるデータはそれぞれ異なってくるでしょう。この表示ロジックをユニットテストする際、それぞれのパターンを網羅的にテストするためには、各々の組み合わせについてテストケースを作る必要があります。パターンの組み合わせによりテストケースを作ること自体は機械的な作業により行えたとしても、それらは冗長でメンテナビリティの低いコードになってしまいがちです。

そこで、一つのロジックに対して入力と出力の組み合わせをテストするための手法として、""Table Driven Test""もしくは""Parametrized Test""と呼ばれる考え方についてご説明します。また、このTable Driven Testを簡単に記述するために用いることができる、拙作のOSSライブラリをご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/84010de4-9641-44ae-9c62-b2a505f0046a.png,akkyie,https://fortee.jp/iosdc-japan-2019/proposal/2015988d-0ab4-4e17-a1c8-4465a429b940,,,False,,
Interactive User Notification の実装,sato-shin,15m,"様々なアプリから送信される通知。皆さんも毎日、いくつもの通知を受け取っていると思います。その中でも「通知を受け取ってはいるけど、無視してる」という通知も多いのではないでしょうか。

通知は「xxさんからの返信があります」とか、「今からyyをやりましょう」など、アプリを起動していない状況でも、ユーザにアプローチできる強力な機能です。
特に Firebase Cloud Messaging などのサービスの登場により、Remote Notification はとても手軽に送ることが可能になりました。
しかし、「どのタイミングで通知を送るか？」、「どんなメッセージだったら反応を示してくれるか？」などに重きが置かれているように感じます。
「目に留まる通知」を考えるのはとても大事なことですが、「通知を通してユーザはどんなアクションを行うのか？」まで、デザインしているでしょうか？

このトークでは以下の実装を説明しながら、良い通知とは何か？を見つめ直していきたいと思います。

* 通知をタップしたら、メッセージに対応する画面へ遷移する通知の実装方法
* アクション可能な通知の実装方法
* サムネイル画像がある通知の実装方法",https://fortee.jp/files/iosdc-japan-2019/speaker/4b05b8e3-ca3b-4fb1-be6e-bb4068cfd5b5.jpg,sankakuButton,https://fortee.jp/iosdc-japan-2019/proposal/961e41ac-f66a-448f-9652-fcd0416c01fd,,,False,,
VIPERアーキテクチャとUnitテスト,佐藤 光,15m,"私が担当している2つのプロジェクトでは現在MVC→VIPERアーキテクチャへ移行しています。
VIPERアーキテクチャへ移行することで様々な恩恵を受けています。
* iOSの開発現場で生まれたアーキテクチャなのでレイヤー分けに過不足がない
* 特定の画面だけVIPERアーキテクチャにできるので、徐々にアーキテクチャの移行ができる
* 各レイヤーがprotocolにのみ依存しているのでUnitテスト時にMockに差し替えやすい

私はVIPERアーキテクチャに移行するために多くの記事やGitHub上のサンプルコードを見て勉強しました。
ですが、Unitテストの書き方とセットになっている記事やサンプルコードが少なかったため、アーキテクチャ移行当初はUnitテストがかけるイメージが湧くまで時間がかかりました。

そこで本セッションでは、サンプルコードを用いてVIPERの実装方法とUnitテストの書き方の例をご紹介します!
実際に導入してわかったTipsや、デメリットの解消方法なども踏まえてVIPERアーキテクチャの魅力を余すことなくお伝えしたいと思います!!",https://fortee.jp/files/iosdc-japan-2019/speaker/e1764806-9ac7-4f18-a7b1-9acec4d64026.jpg,hicka04,https://fortee.jp/iosdc-japan-2019/proposal/1c3606d9-dd70-4167-8eee-b65e8fb9221a,,,False,,
地方で勉強会(HAKATA.swift)を始めた理由と今後,いたる,LT,"福岡でios,swiftに関する勉強会を2ヶ月に一度実施して1年半ほど経ちました。
勉強会を立ち上げた理由と今後について、iOSDCに参加したみなさんに話します。
これまでに気づいたこと、今まで集まってくれた方達とどのように交流してきたか。
そして、今後地方で働く方、UターンIターンを考えているエンジニアの方に今の福岡の状況をお伝えします
これから私たちエンジニアはどこでもマルチに場所を選ばす活躍できる可能性があります。
そのきっかけになれるようなLTをします！",https://fortee.jp/files/iosdc-japan-2019/speaker/ffbccdd2-00ed-429a-86d6-42afa220911c.png,itaru_sugimoto,https://fortee.jp/iosdc-japan-2019/proposal/76bd2a08-2d88-43ae-afb6-edba0b050e41,,,False,,
Property Wrappersの応用例10連発,たなたつ,LT,"Swift 5.1 (Xcode 11) で Property Wrappers が使えるようになります。
これを利用することで、ボイラープレートコードを削減でき、実装の可読性を高めることができます。

しかし、新しく使えるようになったこの機能をどう活用したらよいのか、まだイメージしにくい方もいるのではないでしょうか？
そこで、実際のアプリ開発に利用できる Property Wrappers の具体的な応用例を 10 連発で紹介します。
具体例を多く見ることで、さらなる応用イメージが湧くようになるでしょう。",https://fortee.jp/files/iosdc-japan-2019/speaker/76790564-fd96-4047-a364-93ba189abd83.jpg,tanakasan2525,https://fortee.jp/iosdc-japan-2019/proposal/feb30269-ab8b-4c95-b70c-d200aa35ff5e,,,False,,
Property Wrappersの可能性,たなたつ,15m,"Swift 5.1 (Xcode 11) で Property Wrappers が使えるようになります。
今までプロパティに付与できる Attributes は標準で用意されているものだけでしたが、Property Wrappers によって自作することができるようになるということです。
これによってボイラープレートコードを削減でき、実装の可読性を高めることができます。

このトークでは Property Wrappers を利用することで何を解決できるのかを解説し、実際のアプリ開発に活用できる具体的な応用例を紹介しつつ、Property Wrappers の可能性について発表します。",https://fortee.jp/files/iosdc-japan-2019/speaker/76790564-fd96-4047-a364-93ba189abd83.jpg,tanakasan2525,https://fortee.jp/iosdc-japan-2019/proposal/b9f188a9-85e1-4714-913a-82d9b951a96a,,,False,,
SwiftyMath で学ぶ数学（抽象代数学）,さのたけと,30m,"iOSDC 2017 でのトーク「Swift で数学のススメ」から 2年を経て、 SwiftyMath は ver 1.0 となりました。
このトークでは SwiftyMath のコードをベースに、抽象代数学の入門として

・基礎的な概念である「群・環・体」
・具体例としての数（整数・有理数・実数・複素数）・行列・多項式
・剰余類環、中国剰余定理、代数拡大

などについて解説します。これらの概念は数学専攻で学ぶもので、初学者にはハードルの高いものですが、抽象的な公理を protocol として、具体的な対象を struct として実装したコードと合わせて解説することで、Swift に慣れている人ならスンナリと理解できるようになることを目指します。

Swiftで代数学入門： https://qiita.com/taketo1024/items/bd356c59dc0559ee9a0b
SwiftyMath： https://github.com/taketo1024/SwiftyMath",https://fortee.jp/files/iosdc-japan-2019/speaker/c0073493-73e7-48c4-acdd-72c855c23189.jpg,taketo1024,https://fortee.jp/iosdc-japan-2019/proposal/ccb52efe-bd6e-4e73-9162-c9f5997c9545,,,False,,
iOSアプリのリジェクトリスクを早期に発見するための取り組み,Kesin11,15m,"iOSアプリ開発は年々複雑化しています。次々と追加される新デバイスや新しいAPIへの対応など技術的な要因はいくつかありますが、それ以外にも更新され続けているApp Store Reviewガイドラインやその他のApp Storeに提出できるアプリの要件を遵守する必要があるのもその要因の1つです。

ガイドラインや提出できるアプリの要件は日々修正、追加されているため常に最新情報を把握することは難しいです。ですがこれを怠ってしまうと、いざリリースという段階になってリジェクトされてしまい、思わぬ対応コストとスケジュールの変更を余儀なくされる可能性があります。

この問題を解決するため、ビルドされたアプリに対してガイドラインやApp Storeに提出できるアプリの要件を遵守できているか機械的にチェックするツールを作成しました。このツールはFastlaneプラグインとして提供され、Fastlaneによるビルドパイプラインに簡単に組み込むことが可能です。ツールによるチェック結果はコンソールログ以外にHTMLレポートとして出力が可能で、検証を担当されているQAチームと連携してリリース前の段階でアプリに問題が無いことを確認しています。

本発表では以下の内容をお話しします

- このツールを開発した経緯
- 実際にどのような項目をチェックしているのか
- チェック機能の実装方法
- QAチームとの連携
- ガイドラインを追い続けるための情報源

iOS開発においてApp Store ReviewガイドラインとApp Storeに提出できるアプリの要件を満たすために気をつけるべき注意点と、今回紹介するチェックツールと同様のものを自作するために必要な知識を持ち帰ってもらいたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/3887f8a1-39a7-4071-81ae-3492451a264c.jpg,Kesin11,https://fortee.jp/iosdc-japan-2019/proposal/d51e7062-2eb1-4a86-bf5f-4928fa3b04c8,,,False,,
Webフロントエンドから学ぶSwiftUIにおける状態管理とデータフロー,ロクネム,iOS,"WWDC19で発表されたSwift製のUIフレームワーク、SwiftUI。
『Data Flow Through SwiftUI』のセッションでは主に以下の3つの方針が語られました。

・Single Source of Truth
・宣言的なViewは状態によって一意に定まる
・一方向のデータフロー

これらの方針によって、SwiftUIは予想可能で理解のしやすいコードを実現します。

さて、この考え方自体はWebフロントエンド開発において、すでにある程度成熟しつつあります。
そこで本トークでは、Webフロントエンドにおける状態管理とデータフローを支えるフレームワーク、Vue.js(MVVM), Vuex(Flux), Reduxの3つを取り上げ、それぞれにおける良い点, 悪い点を比較しつつ、それらの考え方をSwiftUIに適用した場合の具体的な実装をご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/6e380c5d-3558-4a21-b216-3d3d6e175fb3.jpg,_rockname,https://fortee.jp/iosdc-japan-2019/proposal/dfad7f7e-f317-4658-9167-9c5ff9b1b214,,,False,,
機能開発に集中するための開発ルール作り,佐藤 光,15m,"私達は普段の開発で常に選択を迫られています。
* どういうUIにしよう…?
* どういう設計にしよう…?
* どうやってテストしよう…?
上記以外にもいろいろな選択をしながら開発を進めていると思います。

ですが、なにかを選択するということはものすごいエネルギーと時間を使います。
そこで私が担当するプロジェクトでは開発ルールをあらかじめ決めておくことで、選択に費やしていた時間を機能開発に集中できるようにしました。
本セッションでは実際に策定しているルールとその導入効果についてご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/e1764806-9ac7-4f18-a7b1-9acec4d64026.jpg,hicka04,https://fortee.jp/iosdc-japan-2019/proposal/bf81f967-9277-4bad-8dfa-3558d9add89a,,,False,,
もし文系卒の女子エンジニアが 5年もののiOSアプリにユニットテストを導入しようとしたら,Matsui Mai,LT_R,"登場人物
文系卒の女子エンジニア
・エンジニア歴＝社会人歴のiOSエンジニア
・一部機能追加くらいはSwiftで開発できるようになった
・テストは業務で全く書いたこと無し

5年もののiOSアプリ
・2013年リリースで、リリース当時のコードも現役でバリバリ稼働中
・リリース当時はフルObjective-C、現在は一部Swift化
・テストコードは1行も無し

このLTではテストを書いたことないエンジニアが、年季の入ったアプリにユニットテストを導入するまでの格闘をテスト初心者視点から語ります。

まだテストを書いたことがない方、うちのアプリはレガシーすぎてテストなんて書けないと思っている方が、
テストを書いてみよう！と思ってくれることを目標としています。",https://fortee.jp/files/iosdc-japan-2019/speaker/bf76ba10-6d3d-4793-8fd3-92e360c28c77.jpg,Ni5_21maimai,https://fortee.jp/iosdc-japan-2019/proposal/4e048f49-289b-4316-b4e6-e325a64c3793,,,False,,
今年から新規にiOS開発をする場合に使うであろうライブラリを紹介します,Tamappe,LT_R,"iOSエンジニアなら誰もが考えるであろうiOSの個人開発を新規でするなら
どのようにして開発を進めていくのかを順を追って説明していきます。

新規開発で検討する事項をあげるとすれば
- 採用する設計パターン
- 使用するライブラリー
- ディレクトリー構成
- サーバーサイドをどうするのか
- 使用するDatabaseについて

これらをメインにお話しできればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/4f755bb4-6d84-477f-831d-faf011ddeaa0.png,tamapppe,https://fortee.jp/iosdc-japan-2019/proposal/ea8248b3-3f85-4dfc-b9b7-7b9c31144716,,,False,,
明日から使えるiOSアプリ開発の小ネタ30選,Masanori Sotozaki,LT_R,"明日から使えるiOSアプリ開発の小ネタを30個紹介します
LTは5分間(300秒)ありますので1つあたり10秒以内で紹介していきます
30個あれば誰もが明日から使える小ネタを1つは持ち帰ることが出来るはずです
厳選して全員が知っているような内容は話さないようにするつもりです。

このセッションで話すかもしれないこと
- ログに一工夫して見やすくする方法
- ImageLiteralの便利な編集方法
- シミュレーターを使いこなす方法
- plistの便利な編集方法
- ちょっと便利な初期化の方法

このセッションでは話さないかもしれないこと
- CocoaPodsの使い方
- 便利なライブラリ紹介
- Xcodeの便利ショートカット",https://fortee.jp/files/iosdc-japan-2019/speaker/366f7370-fd9d-42d4-af47-47440b579f75.jpg,_sotozaki,https://fortee.jp/iosdc-japan-2019/proposal/a080c426-620e-4cd7-8cc4-f9cb196f8d0d,,,False,,
5分で分かるFitbitを用いたヘルスケアアプリの作り方,anrem,LT_R,"健康を大事にしているエンジニアのためのお話。
""健康意識を高めるためにも""気軽にヘルスケアアプリを作ってみましょう！
なぜApple WatchではなくFitbitを選定したのか、Fitbitではどのような情報が取得出来るのかなども踏まえてお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/a5cf300b-ab58-47da-91a1-41991086dc2f.jpeg,_anrem,https://fortee.jp/iosdc-japan-2019/proposal/0ebe81b8-3385-4e43-a1a3-af311c725436,,,False,,
総復習 Local/Remote Notification,sato-shin,30m,"様々なアプリで利用される  Remote/Local Notification ですが、
Remote Notification は iOS 3.0 から、Local Notification は iOS 4.0 から利用できる、iOS の中でも長い歴史を持つ機能です。

Remote/Local Notification はアプリの利用率に直結する重要な機能であるため、多くの進化を遂げてきました。

進化の一例として、以下のような機能があります。

* アプリが Foreground にない状況下でデータの更新のためなどに利用する、Silent Remote Notification
* インタラクティブな Notification を実現するための、Notification Action
* Remote Notification のペイロードを操作する、Notification Service app Extension
* Notification にカスタムViewをのせる、Notification Content app Extension

このトークでは、現在の Notification はどのような機能があるのか？
そして、どのように実装して、どんなことができるのか？を網羅的にご説明します。

通知のUXとは何か？を考えるキッカケになればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/4b05b8e3-ca3b-4fb1-be6e-bb4068cfd5b5.jpg,sankakuButton,https://fortee.jp/iosdc-japan-2019/proposal/24257905-e921-4320-86eb-1354442f1529,,,False,,
もっと便利に使おう、Hyperion,Kenzo Nirasawa,15m,"Hyperion-iOSをご存知でしょうか？
iOSの端末やSimulator上でデザインチェックができる、素晴らしいツールです。
非常に有益なツールなのですが最近は開発が滞っているようで、サードパーティのプラグイン開発手法のドキュメントについては
> The plugin creation guide is a work in progress
のまま動きがありません。

本トークではそんなHyperion-iOSのサードパーティプラグインの実装にフォーカスし、実際に便利なプラグインを作ってみたいと思います。

このトークをきっかけに、Hyperionのコミュニティをより広げ、iOS開発に関わるメンバーがより実用的にこのツールを使い、より良いアプリを作れる世界を目指していきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/56558fdd-4bba-42a7-bed0-f19c98f9b304.jpg,nirazo,https://fortee.jp/iosdc-japan-2019/proposal/c7a9b700-3782-4624-b7cd-80fcdd88f41f,,,False,,
もっと使える！Lottie,Kenzo Nirasawa,15m,"アプリ上でアニメーションを実装する際に、Lottieは有力な選択肢となります。
アプリ上での実装は非常に簡単であり素晴らしいライブラリなのですが、それ故にただ漫然と使用していることも多いのでは
ないでしょうか？
また、
・ちょっとしたアニメーションでしか使わないでしょ？
・デザイナーさんへの修正依頼の往復が地味に面倒…
などの悩みをお持ちの方も多いのでは無いかと思います。

そこで本セッションでは、
Lottieを
「ただファイルを読み込んで使う」から
「多様な使い方をする」「デザイナーとのコミュニケーションをより効率的にする」へ、
より活用するための知識共有や知見の紹介をします。

トーク概要
- Lottieの仕組み
- Lottieでできること
- Lottieに向いていないこと
- Lottie導入時のTips",https://fortee.jp/files/iosdc-japan-2019/speaker/56558fdd-4bba-42a7-bed0-f19c98f9b304.jpg,nirazo,https://fortee.jp/iosdc-japan-2019/proposal/b8685ed6-a976-4c7a-afb4-158707d27ed1,,,False,,
もっと使える！Lottie,Kenzo Nirasawa,30m,"アプリ上でアニメーションを実装する際に、Lottieは有力な選択肢となります。
アプリ上での実装は非常に簡単であり素晴らしいライブラリなのですが、それ故にただ漫然と使用していることも多いのでは
ないでしょうか？
また、
・ちょっとしたアニメーションでしか使わないでしょ？
・デザイナーさんへの修正依頼の往復が地味に面倒…
・個人開発でデザイナーさんいないしアニメーションなんて作れない！
などの悩みをお持ちの方も多いのでは無いかと思います。

そこで本セッションでは、
Lottieを
「ただファイルを読み込んで使う」から
「多様な使い方をする」「デザイナーとのコミュニケーションをより効率的にする」「アニメーションを自分で作って使う」へ、
より活用するための知識共有や知見の紹介をします。

トーク概要
- Lottieの仕組み
- Lottieでできること
- Lottieに向いていないこと
- Lottie導入時のTips
- Adobe After Effectsを使ったアニメーションの作り方",https://fortee.jp/files/iosdc-japan-2019/speaker/56558fdd-4bba-42a7-bed0-f19c98f9b304.jpg,nirazo,https://fortee.jp/iosdc-japan-2019/proposal/15e6b595-9ee4-425b-979f-ddfe148b36b8,,,False,,
速習RxSwift、MVCからMVVMをはじめてからていねいに,Tamappe,LT_R,"iOS開発において避けては通れないRxSwiftの説明セッションです。

RxSwiftはそのあまりにも複雑な機構であったりCocoaのライフサイクルとの整合性の合わせにくくさから
広く初心者殺しとして有名になりました。
実際にiOSを開発するだけにおいてはRxSwiftの知識は必要になることはありませんが、
大規模なアプリになるとどうしてもMVVMへの移行を検討し始めます。
筆者も元々はRxSwiftを始めとするMVVM機構に苦手意識がありました。

このセッションではそんな筆者がどうやってMVVMの苦手意識を解消させたエピソードであるUITableViewを通して
初心者でもほぼRxSwiftの「使い方」が「一発」で分かるように従来のCocoaのメソッドと比較しながら説明します。",https://fortee.jp/files/iosdc-japan-2019/speaker/4f755bb4-6d84-477f-831d-faf011ddeaa0.png,tamapppe,https://fortee.jp/iosdc-japan-2019/proposal/48f97480-0851-4b6d-a162-51c323bff862,,,False,,
MVVM with Combine,深谷哲史,15m,"WWDC19でCombineという新しいフレームワークが発表されました。
このフレームワークによって、iOSでのリアクティブプログラミングがAppleによって標準サポートされたことになります。
このセッションでは、Combineを使用してMVVMをどのように実現するかについて説明したいと思います。
MVVM with Combine in SwiftUI（SwiftUIとCombineを使用して、MVVMで開発する方法）
MVVM with Combine in UIViewController（UIViewControllerとCombineを使用して、MVVMで開発する方法）
の両方を実際にコードを交えながら説明します。",https://fortee.jp/files/iosdc-japan-2019/speaker/206ce086-b353-400c-922a-9a7a29670e7c.jpg,akifumifukaya,https://fortee.jp/iosdc-japan-2019/proposal/a25abd9c-fa1f-4400-9c67-7a803a7b393e,,,False,,
MVVM Overview,深谷哲史,15m,"直近一年間、MVVMアーキテクチャを使用して開発しています。
最初にMVVMの概要を説明し、どのようにMVVMを実現しているかを説明します。
以下の内容を理解しやすいようにまとめながら話す予定です。
* MVVMでのiOSアプリを開発する手法
* MVVMで開発するメリット
* ユニットテストの書き方
* プログラムの品質向上
* テストカバレッジ",https://fortee.jp/files/iosdc-japan-2019/speaker/206ce086-b353-400c-922a-9a7a29670e7c.jpg,akifumifukaya,https://fortee.jp/iosdc-japan-2019/proposal/f31617ef-876c-4447-a515-01bd718ed5bd,,,False,,
機械学習とは何か？,吉田悠一,15m,"iOSで機械学習を用いたアプリケーションをするためのフレームワークCore MLがリリースされて，2年が経とうしています．
WWDC2019で発表されたCore ML 3は，Appleの機械学習に対するスタンス，「オフライン」「プライバシー保護」「エッジコンピューティング」の哲学を踏襲するものでした．
このセッションでは，以下の3つの観点から，このAppleの哲学に対して，機械学習フレームワーク，サービスとどのように付き合えい，考えればよいのかを議論します．

１．機械学習とは何か？そもそも必要なのか？
２．Core MLは，機械学習を用いた開発をどうサポートするのか？
３．Core MLで見える機械学習におけるGoogleとAppleの違い",https://fortee.jp/files/iosdc-japan-2019/speaker/8e45a1c6-b215-4fb6-bca4-612a94a7ba5f.png,sonson_twit,https://fortee.jp/iosdc-japan-2019/proposal/5eef7353-181c-4e85-941e-5c9ed787b59e,,,False,,
UI画像を用いた、特徴点検出・特徴量記述と画像差分,Horita Yuya,30m,"1. 画像の特徴とは
2. 特徴点検出と特徴量記述アルゴリズム
3. 画像差分

一般的に、人間にとって、「この画像のこの部分はこっちの画像のこの部分」と判断することは、それほど難しいことではありません。
もし、その様な画像比較の処理をコンピュータに任せることが出来れば、UIのスクリーンショットを使って様々な応用が出来るでしょう。(実際、いくつかの素晴らしいプロダクトが存在しています。)

その為にはどのような命令を出せば良いのでしょうか。
今回は、画像の特徴点検出・特徴量記述アルゴリズムと画像差分について、背景にある数学の話を織り交ぜながら発表をします。",https://fortee.jp/files/iosdc-japan-2019/speaker/ab5622cf-68e8-479d-a5c7-e05031ae10eb.jpg,horita_yuya,https://fortee.jp/iosdc-japan-2019/proposal/d38c9224-5838-42dd-8d99-6f664676341f,,,False,,
UIテストを高速化する,tarappo,15m,"UIテストで避けて通れない課題の1つとして実行時間が長くなってしまうという問題があります。
これによりUIテストを諦めてしまっている人もいるのではないでしょうか。

UIテストの実行時間を短くするにはどうしたらいいのでしょうか。
諦めるしかないのでしょうか。

そんなことはありません。

このトークでは次について紹介をしていきます。

 * そもそもなぜUIテストは遅いのか
 * UIテストを高速化するためにどのようなことをやると良いか
 ** テストコード実装時にやるべきこと
 ** テストを実行する際にやるべきこと
 ** テストの実行環境においてやるべきこと
 * 対策をなにもおこなっていないときと対応をしたときの実行時間の差

このトークにより、UIテストをさらに知って、UIテストをより効果的に利用できるようになればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/f91b366d-a45c-4dde-bc23-8d9540b6aa4b.jpg,tarappo,https://fortee.jp/iosdc-japan-2019/proposal/99463928-0b18-45db-b962-f499388af2a8,,,False,,
モバイル決済アプリの作り方,kenmaz,15m,"近年、モバイル決済アプリが非常に話題になっています。
このトークではそんなモバイル決済アプリの開発現場から、様々な技術的トピックについてiOSアプリ開発者視点からみなさんに共有します。
モバイル決済アプリ開発特有のトピック、例えば
- Apple Pay In-App Provisionig を用いたiD決済の仕組み
- QRコードによるコード決済の仕組み
- 銀行口座接続や顔認証＋公的証明書による本人確認手法技術について
- 既存の巨大なアプリに対して、いかに安全・効率的にモバイル決済機能を追加するか
- お金を扱うアプリとしてのセキュリティの重要性とその実現方法
- モバイル決済アプリ開発の今後
などについてお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/dae56483-c2e5-4c71-9a0f-75b76b869c97.jpg,kenmaz,https://fortee.jp/iosdc-japan-2019/proposal/8cec3433-83bd-48cd-a13d-6742430518d2,,,False,,
めくるめくシェーダアートの世界,Youichi Takatsu,30m,"シェーダアートとは各ピクセルの座標値と共通のデータからそのピクセルの色を決定し、様々なイメージをスクリーン上に表現する手法のことです。時にシェーダ芸と呼ばれることもあります。
これは主にシェーダと呼ばれるGPUで実行されるプログラムを記述することで実現します。

様々な手法が編み出され、そのシンプルな原理とは裏腹に実に多彩な表現が可能となっています。

Web上にはシェーダを閲覧/投稿できるGLSL SandboxやShadertoyといったサイトがあり、多くの驚くべき作品を目にすることができます。

もちろんWebに限らずiOSでもシェーダアートは実現できます。

本セッションではまずシェーダアートの動作原理を解説します。
次にstep関数やfract関数といったシェーダ用の組み込み関数をいくつか学んだ後、距離場・極座標など表現方法のヒントとなる概念に加えて、複製・ノイズなどの基本的なテクニックも紹介します。

また、共通データに時間を渡すことでアニメーションを行ったり、加速度センサーやマイクの音量を渡すことでインタラクティブな表現ができるデモも披露します。
さらにレイトレーシングの一種であるレイマーチングを用いた3次元的な表現も紹介します。

普段のプログラミングとはまた一味違う体験を、そしてあなた独自の世界を表現してみませんか？",https://fortee.jp/files/iosdc-japan-2019/speaker/09ec1eb6-908d-43ea-8948-4b85168745bf.jpg,ta_ka_tsu,https://fortee.jp/iosdc-japan-2019/proposal/3a33e098-b3c4-4012-872f-ce56b4d2882c,,,False,,
Kotlinで作ろう! iOSアプリのバックエンド,Noritaka Kamiya,15m,"えっ、Kotlinで？Android用じゃないの？と思われるかもしれません。

Swiftで学んだ知識を武器に、活躍の幅をさらに広げられるフィールド、それがサーバーサイドKotlinの世界なのです。

型推論, クロージャ, タイプセーフ, nullセーフ, パターン・マッチ, イミュータブルなデータ構造など、Swiftで学んだ多くのことはそのままKotlinプログラミングで活かすことができます。

この機会に、サーバーサイドKotlinの世界に足を踏み入れて、エンジニアとしての可能性を広げてみませんか?

このセッションでは、サーバーサイドKotlinを取り巻く生態系と、Spring BootとKotlinを使ったバックエンド開発について紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/7e9ba49b-3d2d-44dd-bc15-628b029ca23c.jpeg,nolili,https://fortee.jp/iosdc-japan-2019/proposal/2aa3ce37-ae2c-4149-a7af-369900054f59,,,False,,
アーキテクチャとしてのVisual Regression Testing,Ryo Aoyama,30m,"# このトークが可能にすること
- UIの差分を可視化・比較テスト
- プルリクエスト上で視覚的に確認、レビューの時短
- UIのコンポーネント化を促進
- コンポーネントのカタログ化によるデザイナーや新メンバーへの共有
- 疎結合で関心の分離が進んだ設計を補助
- 依存性のDIを強制

開発が大規模になるほど常にUIのリグレッションが伴います。
これに対する解決策として、UI TestingやQA/QCによる保守等がありますが、いずれもそれ自体のメンテナンス性やヒューマンエラー、時間的・金額的なコストは無視できません。

このトークではUI変更のテストをSnapshot Testingで自動化するだけではありません。
差分を可視化してプルリクエスト上で目視確認を可能にするようなRegression Testingの導入を通して、
テストを可能にするための手段がそのまま、Webアプリ開発におけるStorybookのようなUIのカタログ化を実現するとともに、
疎結合な設計の補助、通信や時間のようなUIの依存性をDIすることの強制など、様々な利益のあるアプリ全体のアーキテクチャをiOSアプリ開発に導入する手法をお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/c6d5cbd9-e77e-47e0-8edb-a318caa9ba3b.png,ra1028fe5,https://fortee.jp/iosdc-japan-2019/proposal/95af1438-b16c-4329-9540-4d98a6e58b74,,,False,,
Combine の導入に備えて,星野恵瑠,15m,"今回の WWDC では SwiftUI の他に、我々エンジニアに大きなインパクトを与えたもう一つのフレームワーク：データバインディングの Combine も発表された。FRP のコンセプトを基にしたこのフレームワークは使いやすく、またネイティブフレームワークなので純粋の Swift との相性も良い。しかし一つだけ欠点がある：それは iOS 13 以上でしか使えないことだ。
エンジニアとして一日でも早く Combine を使いたいが、ビジネスを考えなくてはならないプロダクトではまだしばらく導入が難しいだろう。ならば Combine が使えるようになるその日のために、我々は何をすれば Combine への移行コストを最小限に留められるのか、このトークではそんな TIPS を発表していきたい。",https://fortee.jp/files/iosdc-japan-2019/speaker/27291157-656c-4144-993e-c4bf232df3ce.jpg,lovee,https://fortee.jp/iosdc-japan-2019/proposal/65e2e3b9-3dfb-42ea-8104-7d8b652a8ec3,,,False,,
Kotlin/Native MPPのススメ~SwiftUIを添えて~,kobaken,LT,"クロスプラットフォーム開発環境戦国時代。
React Native? Flutter? Xamarin?
いいえ、これからはKotlin/Native Multiplatformの時代です。
ドメインロジックをKotlinで記述し、コードベースの共有は勿論、UI層はそれぞれ本家のしきたりに従えます。
iOSにはSwiftUI、AndroidにはJetpack ComposeとUIを宣言的に記述できる手法が公式から登場しつつあります。
これ(Kotlin/Native MPP)がワイの答えや！

本セッションでは、
- Kotlin/Nativeの強み
- 各クロスプラットフォーム開発環境との比較
- サーバサイドとの共演(Kollaboration)
- 最強のクロスプラットフォーム開発環境
をご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/06e7f1d4-3e31-4327-9091-4927bef4f2b0.jpg,koba_dog_,https://fortee.jp/iosdc-japan-2019/proposal/b784df3d-cd56-4c5c-9ea8-60c012f9212b,,,False,,
元iOSアプリなAndroidアプリエンジニアによるSwiftUIの素晴らしさを語ります,kobaken,15m,"元iOSエンジニアがData Bindingに恋い焦がれ早n年...
来るWWDC 2019。颯爽と現れたSwiftUI。
モバイルUI実装を革命する力を！

本セッションでは、
- SwiftUIとは？
- 遂にiOSにData Bindingが到来した？！ 
- 2-way bindingのみならず、差分更新も？！良いことずくめのSwiftUI
- AndroidエンジニアからみたSwiftUI
- ViewControllerとはサヨナラ:wave: SwiftUIの登場でこれからのiOS開発がどうなっていくのか
をご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/06e7f1d4-3e31-4327-9091-4927bef4f2b0.jpg,koba_dog_,https://fortee.jp/iosdc-japan-2019/proposal/f0e18dba-8155-489d-bdf2-2f064c6e7740,,,False,,
ユーザ体験のためのロギング戦略,Hatuyuki4,15m,"MAU,PV,Revenue,Retantion Rate...アプリ開発するうえで着目すべき指標やKPIはいろいろありますが、それだけではユーザがどのようにアプリを使っているのか把握することはできません。ユーザはアプリの中のどの要素に注目しているのか、ユーザはちゃんとアプリを使って目的を達成できているのか・・・ユーザ行動を把握するためには、ユーザ行動に沿ったロギング戦略が必要になります。

ユーザ行動を捉えるためにどのようなログを送るべきなのか、その後集めたログをどのように分析しどのような改善を行っていけばよいのか。弊社の事例を踏まえつつ話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/0c10dfb6-7272-4948-b041-ee53ea01150e.jpg,hatuyuki4,https://fortee.jp/iosdc-japan-2019/proposal/44d4a32c-3986-4f6d-ab94-fd94b964c5a4,,,False,,
BLEビーコンを使おうとする時に知っておくとちょっといいこと,除村 武志,LT,ユーザの位置を検出するタスクにBLEビーコンを使うというアイディアはもはや定番とも言えます。その際に知っておきたい選定のポイントやビーコンの特性についてのTipsです。,https://fortee.jp/files/iosdc-japan-2019/speaker/d8335700-6fdc-4485-8fee-4e956e1e03db.png,Yokemura,https://fortee.jp/iosdc-japan-2019/proposal/470f87d8-7cd3-4c50-9bf6-e8feb1868ef7,,,False,,
Firebase MLKitで物体を検出,fuwamaki,LT,"今年Google/IOにて、Firebase MLKitに物体検出機能、
Object Detection and Tracking が発表され、
顔だけでなく物体の検出をすることができるようになりました。

本トークでは実際にiOSアプリでObject Detection and Trackingを用いてみた話をします。

モノを検出した結果を出力するだけでなく、機械学習済みのGoogleAPIを利用して、
類似したモノを取得・表示するまでのデモと、具体的なフローを簡単に説明します。",https://fortee.jp/files/iosdc-japan-2019/speaker/b10f7e26-a2fa-4b99-a20a-b9614037675c.jpg,fuwamaki24,https://fortee.jp/iosdc-japan-2019/proposal/4c4c6a39-1f4d-48a8-8c69-6fbb7569ba13,,,False,,
命名規則のアンチパターン,fuwamaki,LT,"変数名やメソッド名について、我々は自由に決めることができます。
問題なく動作すれば、間違ったNamingではないと言えます。

しかし、主にチーム開発で重要となる保守性や可読性を考慮すると、
どうしても「避けるべき」Namingは存在します。

そこで本トークでは、swiftにおける自分が直面した命名規則の「避けるべき」アンチパターンをいくつか紹介します。
アンチパターン例を提示するだけでなく、「なぜ避けるべきなのか」を明確に説明したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/b10f7e26-a2fa-4b99-a20a-b9614037675c.jpg,fuwamaki24,https://fortee.jp/iosdc-japan-2019/proposal/698f9d0a-894d-4647-9f4a-022740249823,,,False,,
Redux for iOS,fuwamaki,30m,"Reduxについて初心者の方向けのトークです。

Reduxは単方向フローの考えに基づいたアーキテクチャの一つで、状態管理に長けています。
単方向フローはSwiftUIでも採用されており、知っておくべき概念の1つと言えます。

今回はReduxに触れたことがない人にも分かるように、Reduxの概念・コード例を説明できればと思います。

ただどのアーキテクチャにも言えることですが、アーキテクチャ1つに対して、書き方は様々存在します。
そこでコード例については1種類だけでなく、何種類かご提示します。

また、Reduxを単体で用いた場合だけでなく、
UIアーキテクチャにMVVM・システムアーキテクチャにReduxを用いた
MVVM+Reduxアーキテクチャについてもコード例として提示する予定です。

聞いてくださる方々が、Reduxを用いるときの参考になれば幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/b10f7e26-a2fa-4b99-a20a-b9614037675c.jpg,fuwamaki24,https://fortee.jp/iosdc-japan-2019/proposal/559b07d4-8249-42e3-ae12-cdef6030ed4a,,,False,,
Redux for iOS,fuwamaki,15m,"Reduxについて初心者の方向けのトークです。

Reduxは単方向フローの考えに基づいたアーキテクチャの一つで、状態管理に長けています。
単方向フローはSwiftUIでも採用されており、知っておくべき概念の1つと言えます。

今回はReduxの概念・コード例を、Reduxに触れたことがない人にも分かるように説明する予定です。

ただどのアーキテクチャにも言えることですが、アーキテクチャ1つに対して、書き方は様々存在します。
そこでコード例については1種類だけでなく、時間の許す限り何種類かご提示します。

聞いてくださる方々が、Reduxを用いるときの参考になれば幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/b10f7e26-a2fa-4b99-a20a-b9614037675c.jpg,fuwamaki24,https://fortee.jp/iosdc-japan-2019/proposal/e82f3b1c-9e2a-46e4-8278-45b336d94cc2,,,False,,
Property Delegatesがもたらす新しいSwiftプログラミング,darquro,LT_R,"Swift 5のiOS13から使用できる機能の一つにProperty Delegates(SE-0258)というものがあります。
SwiftUIでも@StateなどすでにPropety Delegatesで実装されたものもあり、目にした方もいらっしゃると思います。

Property Delegatesはとてもユニークな機能で、これまで書いていたボイラープレートを解消できたり、アーキテクチャやコンポーネント設計を考える上でも、重要な機能の一つとなってくるのではないでしょうか？

この発表ではProperty Delegatesとはどのようなものなのかを紹介するとともに、
どのような課題を解決するのか例を踏まえて紹介します。

概要
Property Delegatesとは
実装例の紹介(State、User Defaults、Validation)
Swiftプログラミングにおける継承、抽象化、関心の分離などのこれまでの考え方などを踏まえたProperty Delegatesの役割の考察",https://fortee.jp/files/iosdc-japan-2019/speaker/9266d57a-a89e-4221-ad22-8b6023240ad2.jpg,darquro,https://fortee.jp/iosdc-japan-2019/proposal/50e7c0de-bfb4-4716-8a0b-1e728a43ff50,,,False,,
アーキテクチャを決めるだけではコードはキレイにならない,fuwamaki,15m,"一般的にアーキテクチャを適用することで、ある程度のルールを設けられるため、
統一感のある「キレイなコード」を書くことができます。
iOSではMVPやMVVM、Redux、Flux、VIPER、RIBsなど様々なアーキテクチャが存在します。

しかし、実際にはアーキテクチャを選定しただけで「キレイなコード」になるわけではありません。
その要因の一つに、アーキテクチャ1つに対して書き方が様々存在することが挙げられます。

例えば、テスタビリティを考慮してクラス間の参照にprotocolを用いるかなど、
統一感のある「キレイなコード」を目指すためには、他にも決めるべきことがあります。

また、どのアーキテクチャを選定すべきかという点も重要です。

iOS開発では公式に推薦されているアーキテクチャがあるわけではなく、正解はありません。
メンバーのスキルやチーム体制、サービス内容などを考慮して選定すべきアーキテクチャは異なります。
また開発言語が進化していく中で、アーキテクチャの種類も変わっていきます。

そこで今回はアーキテクチャの「決める内容」「決め方」に焦点を当てます。

- アーキテクチャ1つに対して、複数の書き方がある例
- 私の所属するチームでアーキテクチャを体系的に考え直した具体的な手順

をメインにお話することで、皆さまに

- どうやってアーキテクチャを決めるのか
- 何を決めるべきか、何を決めないか

の考え方を知る1つの機会になればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/b10f7e26-a2fa-4b99-a20a-b9614037675c.jpg,fuwamaki24,https://fortee.jp/iosdc-japan-2019/proposal/f34525a9-f55b-4c43-aebd-a649df79f0b0,,,False,,
Carthageの成果物をキャッシュするツールを導入したら幸せになった話,nekowen,LT_R,"アプリ開発でたくさんライブラリを使っていると、Carthageのフルビルドにとても時間がかかりますよね。
根本的な解決策としてライブラリを減らすことも考えられますが、開発の都合上どうしても使う必要があるものが多く、減らすのがなかなか難しい。
さてどうしたものか。Carthageディレクトリをみていて、ふとおもいました。

「もし、この成果物をキャッシュして開発チーム内で共有できたとしたら？」
「誰かが最初にビルドしてしまえば他の人がビルドしなくてよくなるし、最高なのでは…？」
「キャッシュしたものをCIでも使えたら、デプロイまでの時間も短縮できるのでは…？」

そんな願いを叶えてくれたCarthageキャッシュツール「Rome」を、
プロダクト開発に取り入れるまでの流れから実際に取り入れた後、チーム開発にどのような影響を与えたのかをお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/535061b8-1988-417d-ae4b-96034e7eb8d6.jpg,n3k0w3n,https://fortee.jp/iosdc-japan-2019/proposal/294eeef5-8f15-4c88-bd7b-3c5f81ec1c36,,,False,,
ゼロから始めるプッシュ通知機能の開発,mogaming,15m,"私が開発を担当するWeb小説プラットフォームは100万人以上のユーザーに利用いただいています。この度、今年の4月にフルリニューアルしました。ネイティブアプリも刷新し、Firebase Cloud Messagingを活用したプッシュ通知の機能を提供し始めました。

プッシュ通知の機能を提供する上で、考えなければならないことが各領域でたくさんあります。
  - デバイストークンの登録・更新・削除
  - 送信対象の絞り込み
  - 文面の生成
  - 送信のスケーラビリティ
  - 通知がタップされたときの処理
などなど、あげればキリがありません。

iOS/Android/バックエンド、すべての領域での開発を行なった私がプッシュ通知機能を開発する上で行なったことを、DBのテーブル設計からアプリ側の受信のハンドリング、果てはインフラといった隅から隅までお話いたします。

「いまさらプッシュ通知？」と思われるかもしれませんが、プッシュ通知を提供するために必要なすべての開発領域を1度に聞ける機会はそうそうないと考えておりますので、この機会にキャッチアップしてみてはいかがでしょうか？",https://fortee.jp/files/iosdc-japan-2019/speaker/68bddc1e-ab0c-494e-a3ad-a5fbd0b853d2.png,_mogaming,https://fortee.jp/iosdc-japan-2019/proposal/13e16354-d96c-44ae-b7ed-b8e73b28ee3a,,,False,,
ビルド待ちのTwitterとサヨナラ！Sandboxアプリで快適に開発する,なかの,15m,"日々の開発ではアプリケーションのビルドを何度も行いますが、コード量や外部ライブラリの数が増えていくにつれどんどんビルド時間がかかるようになってきます。

長いビルド時間を待っている間にTwitterをしてしまい、気づいたらビルドが終わってるのにTwitterをやめられない。

そんな事はないでしょうか？ありますよね？
僕はあります。

ビルドに時間がかかる要因はさまざまあります。
よくある方法だとEmbedded Frameworkを活用するなどがありますが、弊社でもこの方法は活用したりCarthageの利用やcocoapods-binaryを使用してCocoa Pods関連のライブラリは事前にバイナリとしてビルドしておいたりとなるべくビルド時間の削減に勤めています。

ですが、それでもプロダクト本体のコードに変更があった時に発生するビルド時間が長く修正・追加した箇所の動作確認を短いサイクルで行いたい時にこのビルド時間が長い事がストレスになっていました。

そこでiOSチームではSandboxと名付けた機能毎に切り出した別アプリを作成し、ビルド時間を大幅に短縮して開発を行う事ができるようになりました。

この発表では弊社で行なっているSandboxアプリを作成し、ビルド待ちの時間を減らして快適に開発している事例をちょっとしたデモを交えてご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/956234e5-1941-40e3-9f50-1a2679ec7f02.jpg,nkano_t,https://fortee.jp/iosdc-japan-2019/proposal/f7affbb9-f938-4ffa-bdb9-2fb3dcf52253,,,False,,
ビルド待ちのTwitterとサヨナラ！Sandboxアプリで快適に開発する,なかの,LT,"日々の開発ではアプリケーションのビルドを何度も行いますが、コード量や外部ライブラリの数が増えていくにつれどんどんビルド時間がかかるようになってきます。

長いビルド時間を待っている間にTwitterをしてしまい、気づいたらビルドが終わってるのにTwitterをやめられない。

そんな事はないでしょうか？ありますよね？
僕はあります。

ビルドに時間がかかる要因はさまざまあります。
よくある方法だとEmbedded Frameworkを活用するなどがありますが、弊社でもこの方法は活用したりCarthageの利用やcocoapods-binaryを使用してCocoa Pods関連のライブラリは事前にバイナリとしてビルドしておいたりとなるべくビルド時間の削減に勤めています。

ですが、それでもプロダクト本体のコードに変更があった時に発生するビルド時間が長く修正・追加した箇所の動作確認を短いサイクルで行いたい時にこのビルド時間が長い事がストレスになっていました。

そこでiOSチームではSandboxと名付けた機能毎に切り出した別アプリを作成し、ビルド時間を大幅に短縮して開発を行う事ができるようになりました。

この発表では弊社で行なっているSandboxアプリを作成し、ビルド待ちの時間を減らして快適に開発している事例をご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/956234e5-1941-40e3-9f50-1a2679ec7f02.jpg,nkano_t,https://fortee.jp/iosdc-japan-2019/proposal/bbd193dc-ee83-478e-89e8-b3196186c058,,,False,,
ReactNativeを利用したOTAを導入している話,ぽんた,LT,"RettyではReactNativeを""部分""導入しています。
さらにOTAの仕組みを導入することで、ちょっとした修正ならAppStoreを通さずにユーザーに届ける事を可能にしました。
導入してみて良かった部分、苦労した部分、""闇の話""など洗いざらいお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/d3db808f-bf81-4811-88f2-060f187f2cad.jpeg,ponta_zip,https://fortee.jp/iosdc-japan-2019/proposal/d55d60df-db10-48b0-a97a-ee9015a29cde,,,False,,
広告流入の分析基盤の構築と、広告データに基づいたUIの検討,まりーな,LT,"○概要
アプリに出会う前のユーザーのことを考えてみてください。どうやって、このアプリに出会い、存在を認識し、アプリを入れようと思ってくれたのでしょう？
ユーザーがアプリの存在を知らない場合、広告から流入してきたというパターンが多いのではないでしょうか。インストール数を増加させることが、広告の達成目標になることが多いかとおもいます。果たしてそれで良いのでしょうか？

ユーザーがアプリをインストールするというのは大きな壁です。そのユーザーの裏側には、「アプリを入れて解決したいこと」があったはずです。ユーザそれぞれの物語をキーワードやキャンペーン情報で汲み取れないだろうかということを考えました。
広告の情報をインストール数を増やすことを目標にするだけではなく、UIの検討に使えるようにした取り組みをお話しします。

○発表の中身
まずはじめに、FirebaseとiAdFrameworkを連携し、BigQueryを用いて社内のデータ基盤に、ユーザーの行動と課金情報と流入元を紐付けられる基盤を構築した方法を説明します。
次に、紐づけた情報から、Apple Search Adsの流入元の広告によってユーザーの行動は違うのか、OSごとに行動に違いがあるのかについてお話します。
最後に、ユーザーがインストール時に検索したキーワードやキャンペーンのデータによってUIを変えた結果、より課金につながりやすくなったのかを検証した話をします。

○この発表をお聞きの皆様が得られる知見
・広告流入からインストール数アップだけではなく、課金につながる施策を打てているのか考える機会になる
・データの基盤構築を意識できる。
・FirebaseとiAdFrameworkの連携が楽なのでやってみたくなる。
・アプリの広告について知ることができる。",https://fortee.jp/files/iosdc-japan-2019/speaker/0b6847d7-da24-423b-8dd1-1d6fbd8ddd76.jpg,marina10172013,https://fortee.jp/iosdc-japan-2019/proposal/3e55c3a1-6368-44d3-957a-5a069a291a7e,,,False,,
俺たちのARKitでめちゃめちゃ表情豊かなVTuber向け表情トラッカーを作るぞ,hiragram,LT,"Animojiにも使われているTrueDepthカメラを使って3Dモデルの表情を動かす表情トラッカーを作りました。webカメラを用いて顔認識する他のシステムよりも精度高く、細かく、感情表現に必要な顔のパラメータを取得できるTrueDepthカメラの本気をお見せします。

表情トラッキングの精度以外にも、ARKitのおかげでバーチャルYouTuberを運用するにあたって地味に嬉しい機能をたくさん獲得しているので、プロデュースの現場の目線から面白おかしく紹介できればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/02ce3bc9-9ec2-4a6d-adc6-8aa7504b3a85.png,hiragram,https://fortee.jp/iosdc-japan-2019/proposal/b9fb9fac-d193-4ed1-9740-496b7ac332bc,,,False,,
iOSアプリ開発初心者は経験したことのない手法の大切さを自ら考えよう,クウルス,LT_R,"私は2019年3月に初めてiOSアプリ開発に携わり始めた初心者です。プログラミングは少しかじっていましたが、開発を効率よく進める手法である自動テストのことは全く知らないので、「実行してみればわかるじゃん…」と思いながらXCUITestを作成していました。しかし、そうやって疑問に感じながら開発を進める途中で、自動テストの大切さに気づくきっかけを体験しました。
自動テストにまつわる私の体験談を通じて、初心者が学習を進める上で必要な「自ら考えるマインド」についてお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/7f9a2418-49dd-4e50-8bdc-2e916ba8f7f3.jpg,Qoo_Rus,https://fortee.jp/iosdc-japan-2019/proposal/7f65b9dd-26ac-448f-8488-e9db8a04668b,,,False,,
自動テストでバグ発見と原因細分化をして開発速度を上げよう,クウルス,LT_R,"アプリ開発の経験が浅い初心者は、アプリのバグを自分一人で修正することに苦労しがちではないでしょうか？初心者の私が苦労していた要因は2つあります。
「バグを作り込んだことに気づくタイミングが遅いこと」
「バグの原因を適切に細分化できないこと」
ポイントを押さえて自動テストを導入することで、その2つを改善することが可能です。
XCUITestの基本的な使い方を交えながら、自動テスト導入時のポイントについてお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/7f9a2418-49dd-4e50-8bdc-2e916ba8f7f3.jpg,Qoo_Rus,https://fortee.jp/iosdc-japan-2019/proposal/eacdaf58-0630-4062-8e51-b1b0b173b9d2,,,False,,
LLDBデバッガで不具合の原因を特定して開発速度を上げよう,クウルス,LT_R,"アプリ開発の経験が無く、プログラミングそのものの経験も浅い、そんな初心者の困り事の一つは、不具合の原因を特定するのに多くの時間を費やしてしまうこと。
原因特定スピードを上げるにはLLDBデバッガが有効です。
Xcode10.2から登場したvコマンドについて
- vコマンドでわかること
- vコマンドの操作手順
- poコマンドとの違い
をお話します。
LLDBデバッガを活用した経験があまりない方や、poコマンドを普段使っていてvコマンドを使ったことがない方向けです。",https://fortee.jp/files/iosdc-japan-2019/speaker/7f9a2418-49dd-4e50-8bdc-2e916ba8f7f3.jpg,Qoo_Rus,https://fortee.jp/iosdc-japan-2019/proposal/e04ea30b-0363-4fe9-8501-841ed3261918,,,False,,
ハイブリッドアプリの今,HONDA,15m,"ハイブリッド開発はつらいと経験者は語ります。近年では、クロスプラットフォーム開発でReact Native, Flutterと人気なフレームワークが登場し、環境、選択肢共に大きく変わって来ました。
群雄割拠の中、新たに登場したCapacitorは、一つのコードでをiOS、Android、Electron、およびWebで動作を可能とします。iOSエンジニアが、Webアプリケーション開発(PWA)にアサインされて、Capacitorでハイブリッドアプリにした経験を元に、開発における注意点、貢献ポイントなどについてご紹介するつもりです。",https://fortee.jp/files/iosdc-japan-2019/speaker/4c8e76ad-00ec-450d-9ef2-4ee7e1a2398f.jpg,1wa46,https://fortee.jp/iosdc-japan-2019/proposal/26891567-33bc-44fb-8026-aae260d83109,,,False,,
花火大会向けアプリをサーバレスで作った話,Atsushi,15m,"地方の花火大会向けのアプリの一部機能をサーバレスで作ったお話です。
なぜサーバレスでやったのか？というところから、
そもそもなぜ花火大会にアプリが必要なのか、花火大会の当日の運用などイベント系アプリ特有の開発・運用の難しさについてトークします。",https://fortee.jp/files/iosdc-japan-2019/speaker/7f22bfb2-363d-4e55-8b4e-52a8e1657dc7.jpg,ec16091g_cap,https://fortee.jp/iosdc-japan-2019/proposal/5b815f6a-e07f-413c-8649-4cc893f01dfb,,,False,,
iOSエンジニアが知っておきたいアプリ分析入門,Atsushi,15m,"みなさん、リリースしたアプリちゃんと分析していますか？
リリースしたけど、あんまり分析せずに放置。。なんてことも多いと思います。
本セッションでは、アプリ分析って何やったら良いの？という方向けに、次の項目を説明します。
- そもそも分析に必要なデータってどうやって取るの？
- 取ったデータをどう調理するの？
- どういうデータを見ればいいの？

分析する際にアプリの中身を知っていたほうがより深く分析できますが、アプリ開発を行っていない人がアプリ開発を学ぶより、
アプリ開発者が分析手法を学んだほうが早くて、確実です。これは間違いないと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/7f22bfb2-363d-4e55-8b4e-52a8e1657dc7.jpg,ec16091g_cap,https://fortee.jp/iosdc-japan-2019/proposal/33fc4487-ee37-427e-9f36-0ffab5ff5848,,,False,,
エセつよつよエンジニアになる方法,uhooi,LT_R,"「つよつよエンジニア」、それは全エンジニアが目指す最強の称号です。

つよつよエンジニアになるためには、長年にわたる努力に加え、第一線で成果を出す必要があり、その道のりは長く険しいです。

しかし、ちょっとした工夫をすることで、誰もがつよつよエンジニアのように見せかけることが可能なのです。

ちょっとした工夫の例↓
・TwitterでIT関連のツイートをする
・Twitterでエンジニアの方と交流する
・Qiitaに記事を投稿する
・Qiitaの記事にコメントする
・勉強会に参加する
・勉強会でLTをする

つよつよエンジニアに見せかけることを、私は自虐的に「エセつよつよエンジニア」と呼んでいます。

私は少しでも他の人の役に立てば「エセつよつよエンジニア」でもいいと思っています。

みんなで優しい世界を作りましょう。
そうすればいつかきっと真のつよつよエンジニアになれる日が来ます！

---

本セッションではエセつよつよエンジニアになる方法を伝授します。
私がどのような思いでTwitterやQiitaを使い、勉強会に臨んでいるか、時間の許す限り語ります。

【想定する聞き手】
・つよつよエンジニアでない人
・エセでもいいので他の人の役に立ちたいエンジニアさん

【ゴール】
・SNSで気軽にエンジニアの方と交流できるようになる
・Qiitaなどを活用して知見を広めるようになる
・iOSDC Japan 2020に登壇する意欲が湧く",https://fortee.jp/files/iosdc-japan-2019/speaker/785cd411-35dc-440c-841a-09304078c653.jpg,the_uhooi,https://fortee.jp/iosdc-japan-2019/proposal/75494363-ce10-4aa6-bb2e-c0516c6beda3,,,False,,
一人iOSエンジニアでも気持ちよく開発できるiOSアプリ開発になる！,entaku,15m,"""設計に正解は無い""

そうはわかっていても実際にiOS開発において、何がベストな選択かわからないままフレームワークを導入し、
どこかのwebの情報を鵜呑みにしながら開発を行なっている皆さんも多いでしょう。

特に一人iOSエンジニアで仕事をしているとよりその傾向が強くなると自身の経験から考えています。

本トークではスタートアップで働いていたiOSエンジニアがFatViewControllerでiOS開発のつらみを経験し、
悩みながら、RxSwiftの考え方を導入し、これなら""気持ち良く開発するiOSアプリ開発者になれる！""
と思うまでの物語です。

ルーキーズLTで同じトークテーマで出していますが、
こちらでは具体的なアプリでどういう考察で設計を決めているかをいくつかの画面の実例を交えて発表したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/77757a20-aaf9-4a66-89b9-a517e13a7c94.jpg,entaku19890818,https://fortee.jp/iosdc-japan-2019/proposal/24300977-7dbb-4c2b-b807-8a06aab5b2ac,,,False,,
一人iOSエンジニアでも気持ちよく開発できるiOSアプリ開発になる！,entaku,LT_R,"""設計に正解は無い""

そうはわかっていても実際にiOS開発において、何がベストな選択かわからないままフレームワークを導入し、
どこかのwebの情報を鵜呑みにしながら開発を行なっている皆さんも多いでしょう。

特に一人iOSエンジニアで仕事をしているとよりその傾向が強くなると自身の経験から考えています。

本トークではスタートアップで働いていたiOSエンジニアがFatViewControllerでiOS開発のつらみを経験し、
悩みながら、RxSwiftの考え方を導入し、これなら""気持ち良く開発するiOSアプリ開発者になれる！""
と思うまでの物語です。",https://fortee.jp/files/iosdc-japan-2019/speaker/77757a20-aaf9-4a66-89b9-a517e13a7c94.jpg,entaku19890818,https://fortee.jp/iosdc-japan-2019/proposal/931cd4ce-9aa8-48cd-a18a-b36e85d7ef87,,,False,,
時は西暦2018年 OpenGL界はAppleの炎に包まれた！,Youichi Takatsu,LT,"時は西暦2018年
OpenGL界はAppleの炎に包まれた！
OpenGLはMojaveから非推奨とされ
OpenGL ESはiOS12から非推奨とされ
OpenGLシリーズはAppleプラットフォームから絶滅したかに思われた！

だが！OpenGLシリーズは絶滅していなかった！

その名はWebGL。
ブラウザで3Dグラフィックスを表示するためのAPI標準仕様である。
なんとか非推奨を免れたWebGLだったが、新たな刺客が迫る！

『Appleからの刺客！？その名はWebGPU！』

果たしてWeb界の3D描画APIの覇者の栄光は誰の手に？
お楽しみに！",https://fortee.jp/files/iosdc-japan-2019/speaker/09ec1eb6-908d-43ea-8948-4b85168745bf.jpg,ta_ka_tsu,https://fortee.jp/iosdc-japan-2019/proposal/9a3f0e9b-6612-4e45-b081-88ccff5995f5,,,False,,
iOS 12以下でDark modeに対応した地獄の話,かっくん,LT,"私が個人的に開発している# Typeというアプリには、iOS 13が発表されるより前にRxSwiftを利用せずにDark mode機能を導入しました。導入するにあたって、

- Dark mode機能の考え方
- 実装方法
- iOS 13以降への対応

を紹介します。その上で実際にアプリにDark modeを導入する際に発生した表示崩れ修正地獄についても紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/ae96e5b3-11a8-4223-ba19-c8304e357352.jpg,fromkk,https://fortee.jp/iosdc-japan-2019/proposal/0a4ff74b-01fb-4054-938e-0fac9c8c6e03,,,False,,
非エンジニアのQAメンバーでも自動テストを作った話,かっくん,15m,"私が所属しているTimersでは2014年頃からFammという家族向けのアプリを作っています。弊社では品質担保の為にQAのメンバーが3人所属していますが、全員がプログラミング経験が皆無の主婦の方々です。5年以上アプリの開発を続けていると

- 機能もどんどん増えてしまい
- 品質チェックの項目が肥大化し
- QA実施の時間が長く

なってしまいました。たまに項目を見直して不要な所を削ったりするもののそれでも機能が増えていくので、「変更が少ない箇所のテストは自動化して、本当に見ないといけない所に注力したい」という要望がQAメンバーより上がり始めました。そこで品質管理委員会という会議を発足し、Firebase Test Labを試してみたり、Magic Podを試しながら実際に自動テストを業務に導入していって、今後どの様に運用していくのかを紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/ae96e5b3-11a8-4223-ba19-c8304e357352.jpg,fromkk,https://fortee.jp/iosdc-japan-2019/proposal/6604f1b6-c900-4cdd-a0ca-4f213f80b6bb,,,False,,
非エンジニアのQAメンバーでも自動テストを作った話,かっくん,LT,"私が所属しているTimersでは2014年頃からFammという家族向けのアプリを作っています。弊社では品質担保の為にQAのメンバーが3人所属していますが、全員がプログラミング経験が皆無の主婦の方々です。5年以上アプリの開発を続けていると

- 機能もどんどん増えてしまい
- 品質チェックの項目が肥大化し
- QA実施の時間が長く

なってしまいました。たまに項目を見直して不要な所を削ったりするもののそれでも機能が増えていくので、「変更が少ない箇所のテストは自動化して、本当に見ないといけない所に注力したい」という要望がQAメンバーより上がり始めました。そこでMagic Podを試しながら実際に自動テストを業務に導入していって、今後どの様に運用していくのかを紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/ae96e5b3-11a8-4223-ba19-c8304e357352.jpg,fromkk,https://fortee.jp/iosdc-japan-2019/proposal/ce137bf8-e8f8-49d0-b073-7a146fc25b73,,,False,,
無理しないで続ける個人アプリ開発・運用,かっくん,LT,"# TypeというMarkdownエディタアプリの開発・運用を初めて丸2年半が経過しようとしています。「会社での業務をしながら個人的にアプリを開発したり運用したりするのは大変じゃ無いか？」と思われるかもしれませんが、(2019年6月現在)月に一度から二度程度の更新を続けてこれています。ここでは

- モチベーションの保ち方
- どういう方針で更新しているのか
- 問い合わせ対応の方法
- CI/CDの活用

を踏まえてどの様に省エネで開発・運用しているのかを紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/ae96e5b3-11a8-4223-ba19-c8304e357352.jpg,fromkk,https://fortee.jp/iosdc-japan-2019/proposal/6b884be5-9ae7-4de8-a801-a504366a13e6,,,False,,
きみでも作れる！自作キーボード基板⌨︎,Iceman,15m,"自作キーボード、最近流行ってませんか？
でもせっかく作った自作キーボード、びっっっっみょーーーーーーに違う！俺はこうしたいんだ！！！みたいな気持ちが湧き出たりしませんか？？？

このセッションでは分割キーボードのメリットや自分に合わせた配列の探し方の紹介と、
自分に合わせたオリジナル配列のキーボードを 基板から 作成するための方法を紹介します

さらにXcode上で自作キーボードを活用してどのような操作ができるようになるかも紹介します！",https://fortee.jp/files/iosdc-japan-2019/speaker/44833880-5add-4a5b-8a98-c214ca834e6e.jpg,iceman5499,https://fortee.jp/iosdc-japan-2019/proposal/0befd7da-b521-45ae-8eee-31d373b843b0,,,False,,
SwiftUIでの開発に向けた我々が出来る既存アプリのリファクタリング,くろるり,LT,"WWDC2019でSwiftUIが発表され、iOSアプリ開発の新たな時代が幕を開けようとしています。
しかしSwiftUIが使えるのはiOS13からです。では我々はiOS12が世間一般から退場するまで何も出来ないのでしょうか？
そんなことはありません。来るべきSwiftUIでの開発に向けて我々が間違いなく行うべきことが１つあります。それはリファクタリングです。
このLTでは来るべきSwiftUIでの開発に備え、我々が今から出来る既存アプリのリファクタリングを大きく分けて3つ紹介します。
- UI開発のコンポーネント思考化
- プレゼンテーションとドメインの分離
- 依存性注入の導入
そしてなぜこれらを行うべきか、Appleが公式に一般公開しているSwiftUI Tutorialsの中から特に以下のトピックに注目しつつ、解説します。
- Use UIKit and SwiftUI Views Together
- BindableObject / EnvironmentObject
- PreviewProvider",https://fortee.jp/files/iosdc-japan-2019/speaker/90615c24-99d2-47b0-8801-4d549179a38f.jpg,kuroruri,https://fortee.jp/iosdc-japan-2019/proposal/faddde97-b0bc-411b-833b-4f2dd7b646c1,,,False,,
すぐそこにあるマルチカーソル,Iceman,LT_R,"Xcode10からマルチカーソル機能が追加されているのですが、みなさん有効に活用していますか？
あれってカーソルを縦にしか増やせないから使いづらい？そんなことはありません。

Xcode Source Editor Extension を使用することで任意の場所にカーソルを生やして単純作業を効率化するテクニックを伝授します！",https://fortee.jp/files/iosdc-japan-2019/speaker/44833880-5add-4a5b-8a98-c214ca834e6e.jpg,iceman5499,https://fortee.jp/iosdc-japan-2019/proposal/28e7ac7e-6830-4f6a-8704-00a321a87bcc,,,False,,
Xcodeのコードカバレッジ計測ではなぜブランチカバレッジが取れないのだろうか？,kariad,15m,"テストコードを書いている場合、コードカバレッジを計測しているチームが多いのではないでしょうか。
私たちはXcodeの機能を使えば簡単にコードカバレッジを計測することが可能です。

一方でコードカバレッジにはいくつか種類があり、Xcodeではその一つであるステートメントカバレッジしか計測できないということをご存知でしょうか。
カバレッジの種類によりどこまで厳密網羅されているかが変わってきます。
その中でも分岐の網羅までチェックするものがブランチカバレッジと呼ばれます。

お隣を見渡せばAndroidのJaCoCoではブランチカバレッジも計測することができます。

ではなぜ私たちの扱うXcodeではブランチカバレッジを計測することができないのでしょうか？
そもそもSwiftでブランチカバレッジを計測することができないのでしょうか？

本トークではそんなXcodeでのコードカバレッジ計測でブランチカバレッジを計測できない理由はなぜなのか、本当に計測することができないのか。
それをSwiftのカバレッジ計測の仕組みから解き明かしていきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/bc3724c3-6728-4b75-9791-b1875c391f82.png,kariad_uu,https://fortee.jp/iosdc-japan-2019/proposal/762f9e85-d71c-41e8-a891-d60d0129a355,,,False,,
サービスの価値を最大化するためのテスト戦略,kariad,LT_R,"iOSアプリ開発ではテストは日常的に行われています。
しかし私たちは一体何のためにテストをしているのでしょうか。

やるのが当たり前だからでしょうか？
品質を高めるためでしょうか？

それらの理由もあるかもしれません。
しかし本来私たちが目指す場所はただ一つ、
アプリが提供するサービスの価値の最大化、
すなわちユーザーに喜んでもらうことなのではないでしょうか。

そしてテストは適切に行うことでサービスの価値の最大化のスピードを早くしてサービスの価値を高めることが可能です。

本トークでは今まで何となくテストをしていた…という方に向けて、
サービスの価値を最大化するためにはどのようにテストを行っていくべきかという「テスト戦略」についてお話しいたします。",https://fortee.jp/files/iosdc-japan-2019/speaker/bc3724c3-6728-4b75-9791-b1875c391f82.png,kariad_uu,https://fortee.jp/iosdc-japan-2019/proposal/e479e8ae-6bc6-4ba3-9c4c-02fd71c5624d,,,False,,
令和時代のゲームボーイ開発 👾,ぎぎにゃん,LT,"1989年に発売したゲームボーイは、今年30周年を迎えました。
そんな今だからこそ、実機で動くゲームボーイ開発をしてみましょう！

30年の時を経て、ゲームボーイが最新の技術で蘇ります。",https://fortee.jp/files/iosdc-japan-2019/speaker/7f58b7a1-82ad-4209-99de-c7c7e0b0fb4a.png,giginet,https://fortee.jp/iosdc-japan-2019/proposal/1a25edb5-ff96-4453-8780-72a0158bb394,,,False,,
アプリリリースのハンドリング、そして過去のコードの寿命との向き合い方,六々,15m,"iOSアプリやAndroidアプリはアプリストアからユーザーの端末にインストールして使われます。
この仕組み上、過去のコードの生成物が常に世界のどこかに残ってしまいます。
そのためアプリ開発では通常よりもタイムスケールの大きな「リリース」や「寿命」に注意を払う必要があります。

このトークではビルドしたアプリがユーザーに届くまでの話や、APIの破壊的変更やローカルデータベースのスキーマ変更など、アプリ開発につきまとう寿命についてまとめます。
また、こうした状況に出くわしたときアプリエンジニアはチーム内でどう対応するべきか、チームに何を知っておいてもらわないといけないのか、といったことにもフォーカスします。

内容
- リリースとは、寿命とは
- iOSアプリやAndroidアプリがユーザーに届くまで
- iOSとAndroidでの段階的リリースという概念の違い
- APIのサポート期間
- マイグレーションのサポート期間
- OS/端末のサポート期間
- 開発言語のアップデートや変更
- ユーザーへのアップデート訴求",https://fortee.jp/files/iosdc-japan-2019/speaker/4b109918-c119-457f-987e-73411d4ccbb5.gif,496_,https://fortee.jp/iosdc-japan-2019/proposal/38bfab3e-f0e3-4b0e-b278-50f2eaf592d9,,,False,,
縦書きエディタを6プラットフォームで開発してみて,六々,iOS,"Windows / macOS / Ubuntu / iOS / Android / UWP向けに縦書きのできるテキストエディタを趣味で開発しています。
小説や脚本などでいまだに根強い需要のある縦書きのテキスト入力を6プラットフォームに提供する唯一のプロダクトを目指しています。
（Windows / macOS / Ubuntu / Androidでリリース済み、iOS版リリース予定、UWP版プロトタイプ完成済み）

このプロダクトでは全プラットフォームで同じ描画結果を手に入れるためにテキスト描画エンジンから自前で作っています。
トークでは文字とコンピュータの関係、縦書きという特殊な書字方式とその裏側の実装、テキストエディタや組版、iOSやAndroidに限らないクロスプラットフォームなアプリ開発について話します。

内容
- テキストを表示するために必要な文字コードとフォントの知識
- コア機能をC++で作る理由
- デスクトップアプリとモバイルアプリを開発するための環境
- デスクトップアプリのテキスト入力とモバイルアプリのテキスト入力
- プラットフォームで千差万別なIMEという特異点
- iOS / Androidの標準TextViewのUIとその縦書きでの再実装",https://fortee.jp/files/iosdc-japan-2019/speaker/4b109918-c119-457f-987e-73411d4ccbb5.gif,496_,https://fortee.jp/iosdc-japan-2019/proposal/b4b05cda-3ace-4a71-8bd1-3a648f164310,,,False,,
肥大化するアプリケーションのデグレード回避術,izumi,15m,"アプリが多機能化、肥大化するにつれてデグレード(デグレ)の発生率は高まっていく傾向にあります。

多くのユーザーは新機能よりも既存機能が安定して使える事に対する関心が高く、今まで使えていた機能が使えなくなることに大きなストレスを感じます。
そのため、ストアで高評価を維持するためにもデグレを回避する事は非常に重要です。

このセッションでは

- 何故デグレが発生してしまうのか
- デグレを未然に防ぐための回避術
- デグレが発生してしまった場合の対応策

について、私が遭遇したデグレを実例に出しながらお話したいと思います。
技術的な解決策に加え、仕様策定やチーム内コミュニケーションなどの幅広い観点からお話しする予定です。",https://fortee.jp/files/iosdc-japan-2019/speaker/4c46077a-c211-4019-ba2f-4ced7ec60291.jpg,izm256,https://fortee.jp/iosdc-japan-2019/proposal/3438e9d2-34d7-4108-b2c6-b0037dec5b5b,,,False,,
アプリ内デバッグメニュー、やめました。,FromAtom,LT,"アプリ開発をしていると、アプリ内にデバッグメニューを作りたくなると思います。
しかし、うっかり条件分岐を間違えるて一般ユーザーに漏れたり、App Storeで配信されているアプリでは
デバッグメニューが使えないといったデメリットがあります。

そこで、アプリ内にデバッグメニューを実装することをやめて、
別のアプリからデバッグフラグを注入することにしました。

このトークでは、デバッグ対象アプリに外からデバッグフラグを注入する方法と、
実装時に注意するポイントについてお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/90d30785-dcb9-417f-bfcb-54c039f32274.png,FromAtom,https://fortee.jp/iosdc-japan-2019/proposal/a107267e-1e29-42f2-927f-4ec33812ba49,,,False,,
アプリ内にデバッグメニューを作るのはやめよう。外から注入しよう。,FromAtom,15m,"アプリ開発をしていると、接続するサーバーを切り替えたり、特別なポップアップが毎回出るようにするために、アプリ内にデバッグメニューを作りたくなると思います。しかし、アプリ内デバッグメニューには下記のようなデメリットもあります。

・フラグ管理を誤ると、一般ユーザにもデバッグメニューが見えてしまう事故が起きる
・App Storeで配布されているアプリでデバッグメニューが使えない
・アプリごとにデバッグメニューの実装が異なり、他チームのエンジニアがヘルプに入った際の学習コストや、エンジニア以外がドッグフーディングする際にコストがかかる
・そもそもデバッグメニューがないアプリにUIから実装するの大変

こういったデメリットを解決するために、アプリ外部からデバッグ用のデータを注入・抽出できる仕組みを実装しました。この仕組みを用いると、App Storeに配布されているアプリにも安全にデバッグ用データを差し込むことが可能になります。

このトークでは、アプリに外部からデバッグ用データを注入・抽出する仕組みの実現方法と、得られるメリットとデメリットについてお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/90d30785-dcb9-417f-bfcb-54c039f32274.png,FromAtom,https://fortee.jp/iosdc-japan-2019/proposal/2387dfbd-056b-458b-89b0-37f488b1dd26,,,False,,
画像プレビュー画面をSwiftUIで作り直してみる,your3i,LT,"みなさん画像を拡大・縮小・移動ができるプレビュー画面を作ったことがありますよね。私もあります。

今担当しているプロジェクトでは、ImageViewerという画像プレビューライブラリーを自作し、利用しています。
このライブラリは画像の表示・非表示時に独自の遷移をしてくれます。
さて、このライブラリーをSwiftUIを使って作り直すと、どこまでSwiftUIの恩恵が受けられるでしょうか？

このトークでは、UIKitで提供していた体験をSwiftUIで提供するとどんな違いがあるのか、UIレベルのロジック、アニメーションなどの面から比較していきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/a9ad15d1-d847-45fb-93c1-50f9756eb21c.jpg,your3i,https://fortee.jp/iosdc-japan-2019/proposal/3b14905e-071f-42d6-a38d-307874690a67,,,False,,
画像プレビュー画面をSwiftUIで作り直してみる,your3i,LT_R,"みなさん画像を拡大・縮小・移動ができるプレビュー画面を作ったことがありますよね。私もあります。

今担当しているプロジェクトでは、ImageViewerという画像プレビューライブラリーを自作し、利用しています。
このライブラリは画像の表示・非表示時に独自の遷移をしてくれます。
さて、このライブラリーをSwiftUIを使って作り直すと、どこまでSwiftUIの恩恵が受けられるでしょうか？

このトークでは、UIKitで提供していた体験をSwiftUIで提供するとどんな違いがあるのか、UIレベルのロジック、アニメーションなどの面から比較していきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/a9ad15d1-d847-45fb-93c1-50f9756eb21c.jpg,your3i,https://fortee.jp/iosdc-japan-2019/proposal/8de82e24-8e70-4a62-96fa-0a3cb7439168,,,False,,
iOS13のSF Symbolの活用方法を探る,your3i,LT,"iOS13からSF Symbolsというアイコンリソースが使えますが、すでにサービスのブランドイメージに沿ったアイコンを利用している既存アプリでは、活用シーンがあまりイメージできなかったかもしれません。
しかし、システムフォントとシームレスにインテグレートでき、スケールとウェイトやダークモード対応までもされているSF Symbolは非常に強力で便利です。

このトークでは、そんなSF Symbolsをすでにリリース済みのアプリでも活用していく方法を紹介していきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/a9ad15d1-d847-45fb-93c1-50f9756eb21c.jpg,your3i,https://fortee.jp/iosdc-japan-2019/proposal/131853a8-ba9e-4f6b-a994-7d4c8708f6cc,,,False,,
駆け出しVTuberが語る！お仕事しながらでもできるVTuberのはじめ方、続け方、工夫どころ💐,花芽尋かすみ,iOS,"はじめまして！バーチャルお絵描きプログラマの花芽尋かすみです、こんすみすみー💐

VTuber=バーチャルYouTuberというのは、2Dや3Dのアバターを使ってYouTubeでライブ配信や動画投稿を行う人を指します。
最近流行ってきてますよね！😊

私は今年の4月頃からバーチャルYouTuberとしてデビューしました。
YouTubeでの主な活動はゲーム/プログラミング/お絵描き/雑談などの配信です。
https://www.youtube.com/channel/UC2kRNS1VUq98B9y1-Yy_w6g/videos

このセッションでは活動6ヶ月のVTuberであり、同時にVTuberオタクの私が隙あらば自分語りをしていきます(๑˃̵ᴗ˂̵)و 
・VTuberになった動機
・ここが楽しい！VTuber活動！
・VTuberのはじめ方
　 ・VRoid Studioを使ったアバターの用意
　 ・声（ボイスチェンジャー）の用意
　 ・配信環境（機材、配信ソフトウェア）の用意
　 ・動画編集環境の用意
　 ・サムネイルの作り方
・お仕事をしながらVTuberを続けるには
・活動の中で行なった工夫集

情報収集、アバターの用意、音声・動画・画像編集、継続的な活動のためのワークフローには技術的な要素が盛りだくさん！
VTuberは総合芸術と言っても過言ではありません！

こんな人に聞きにぜひぜひぜひぜひぜひぜひ！来て欲しいです！✨✨✨
・VTuberが好きな人
・VTuberに興味がある人
・VTuberを始めてみたいなと思っている人
・ボイスチェンジャーに興味がある人",https://fortee.jp/files/iosdc-japan-2019/speaker/6c6708db-a2d3-4ed2-9cbe-b041a600c989.png,kagahiro_kasumi,https://fortee.jp/iosdc-japan-2019/proposal/624cbc3e-364a-4c32-bf63-6ec496285ac7,,,False,,
iOS13のSF Symbolの活用方法を探る,your3i,LT_R,"iOS13からSF Symbolsというアイコンリソースが使えますが、すでにサービスのブランドイメージに沿ったアイコンを利用している既存アプリでは、活用シーンがあまりイメージできなかったかもしれません。
しかし、システムフォントとシームレスにインテグレートでき、スケールとウェイトやダークモード対応までもされているSF Symbolは非常に強力で便利です。

このトークでは、そんなSF Symbolsをすでにリリース済みのアプリでも活用していく方法を紹介していきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/a9ad15d1-d847-45fb-93c1-50f9756eb21c.jpg,your3i,https://fortee.jp/iosdc-japan-2019/proposal/f403dc40-7af4-4d2b-8e32-8611a2fc2424,,,False,,
ディレクトリ縦割り構成って良いの? 横割りからの移行は大変? 気になる効果は?,kwzr,LT,"自分が担当するプロダクトでは当初、Storyboards、ViewControllers、Models、...のようにファイルの役割ごとにディレクトリが分けられていました。
しかし、ファイルが探しにくいなどの問題があって、機能ごとのディレクトリに分けていく、いわゆる縦割り構成に変更することにしました。
このトークでは、移行の大変だった部分や、縦割り構成のメリットについて話したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/f9e72a81-6c2e-4924-8674-0c6ff214994c.jpg,_kwzr_,https://fortee.jp/iosdc-japan-2019/proposal/bb062236-362c-4fef-809c-df8c46a7d610,,,False,,
人手が足りないけど、仕組みで何とかしてって言われたのでした,kwzr,15m,"弊社では現在6アプリを8人くらいで開発しています。
大体のアプリが1人で開発しているという状況で、新機能開発からバグ修正、テストなどを行わないといけません。
アプリエンジニアが少ない状況の中、「仕組みで解決できない?」とのお達しを受けたので、様々な面から開発効率向上を目指しました。
このトークでは以下の内容について話します。

・アプリ自体の構成について
・デバッグ環境の整備
・CI / CDの整備
・コードレビューの健全化
・ロジック共通化への挑戦
・マルチプラットフォーム環境への挑戦
・アプリエンジニアにコンバートするための勉強会
・仕組みで解決できる限界",https://fortee.jp/files/iosdc-japan-2019/speaker/f9e72a81-6c2e-4924-8674-0c6ff214994c.jpg,_kwzr_,https://fortee.jp/iosdc-japan-2019/proposal/f1a6f788-8a9e-4839-9c8c-debf63b72bd5,,,False,,
最近流行りのAIってやつでいい感じにリリースフローを高速化してください！,ダンボー田中,LT,"プログラムの変更というのは、変更していないと思っている箇所にも影響を及ぼしてバグを生み出してしまうことがありますよね！
そのため多くのプロダクトでリリース前には、主要な機能の動作確認するはずですよね！

でもその動作確認って手でぽちぽちやっているとすごくめんどう！人がやる仕事じゃない！
自動化するにもあんまり時間がない...！
あー、最近流行りのAIってやつでなんとかならないかなー...！

そんなあなたにMagic Pod！
AIの力でいい感じに画面の要素を検証して、それを元に簡単なGUI操作でぽちぽち作業のステップが組めます。インストールも容易！
これまでやっていた手作業による動作確認を自動化して、リリースフローを高速化させましょう。

このトークではめんどうな動作確認作業を自動でやってくれるMagic Podの簡単なデモをします。
実際のプロダクトで運用しているお話も交えつつ、向き不向きなどもご紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/d6b65a82-42b9-4765-8180-b4673f234f38.jpg,ktanaka117,https://fortee.jp/iosdc-japan-2019/proposal/bb9ca946-ac41-480e-9b51-8b703e41ada6,,,False,,
FatViewControllerを安全に書き換える方法が見つからなかったので、どういう痛みを許容するか考えた,ダンボー田中,15m,"安全にリファクタリングを行うには「お約束」があります。

「自動テストを書いてからリファクタリングする」

言葉にしてしまえば簡単で「プログラマであれば当然のことだ」とおっしゃる方もいらっしゃるかもしれません。
でもそれを難しくするのがヤツの存在です。そう、iOSエンジニアならば切っても切れない関係のFatViewControllerです。

前述のお約束を守るために、こんな堂々巡りに陥ったことのある方は少なくないのではないでしょうか。
・「UIテストを書いた上で書き換えを行うか？」「時間がかかりすぎる、ダメだ...！」
・「ユニットテストを充実させて設計を変更しながら書き換えを行うか？」「先にプロダクトコードの変更が発生してしまう、ダメだ...！」

このトークではFatViewControllerの書き換えを「自動テストを書いてから」というお約束を守ってこなすのが難しかった話をします。
そのうえでなるべく安全に、現実的に書き換えていく方法にはどんなものがあったか、どんな部分で安全を切り捨てて痛みに耐える判断をしたのか話をします。",https://fortee.jp/files/iosdc-japan-2019/speaker/d6b65a82-42b9-4765-8180-b4673f234f38.jpg,ktanaka117,https://fortee.jp/iosdc-japan-2019/proposal/123b9027-1aea-4557-997e-fd2c5275974b,,,False,,
値オブジェクトへのCodable対応,maguhiro,LT_R,"「API通信のデータをJSONで受け取ってEntityに変換する」、みなさんもそういったご経験はあるかと思います。
Swift4でCodableが登場してから、このようなJSONデータをより簡単に変換できるようになりました。

一方で、例えばEntityにユーザーIDや写真IDといった一意に識別する値を単純なInt型やString型で定義してしまうと、引数にユーザーIDを渡すべき関数で誤って同じ型である写真IDを渡してしまう恐れがあります。
ドメイン駆動設計(DDD)における値オブジェクト(Value Object)という戦術的設計を導入し、それぞれ異なる型として定義することで誤った代入を防ぐことができます。

しかしながら、Codableと値オブジェクトの相性は悪く、対応するには工夫が必要となります。
このトークでは、簡単なJSONデータを用いて値オブジェクトを含むEntityへのCodable対応についてお話します。


■アジェンダ
・単純な型を利用した場合のCodable対応
・単純な型を利用した場合の課題
・値オブジェクトとは？
・値オブジェクトとCodableの課題
・値オブジェクトへのCodable対応方法",https://fortee.jp/files/iosdc-japan-2019/speaker/69902f7a-c2a3-4923-b656-6d65dc450303.jpg,maguhiro,https://fortee.jp/iosdc-japan-2019/proposal/3b8c98a2-4861-449e-a2c9-e1327db431e2,,,False,,
Re: ゼロから始めるWatchApp開発,くろるり,15m,"AppleWatchが発売されて約5年程たち、我々の生活の中でもスマートウォッチ自体珍しいものではなくなってきました。
ですが我々のアプリはスマートウォッチにきちんと対応できているでしょうか？対応していないか、あるいは発売当初の珍しさに乗っかった一過性のアプリがあるだけだったりしないでしょうか？
ではもし、そんな一過性のアプリを不意にメンテナンスすることになったらどうしましょう？Objective-Cなんて読めないし、使っていたライブラリはメンテされていない、そんなコードなんてメンテできるわけがありません。きっと作り直すはめになるでしょう。
あるいは今あるアプリに対しWatchアプリを組み込んでいくことになったら、iOSとは勝手の違うWatchOSアプリをどう作っていけばよいでしょうか？
本セッションではWatchAppをゼロから作り始める人及び作り直す人向けに、WatchAppの作り方を基礎からプロダクトを実際に作るレベルの発展編まで解説するとともに、開発時のいくつかのTIPSを紹介します。
本セッションのゴールは聴衆がOSSライブラリを使用したiOSアプリとデータをやり取りするWatchAppを作れるようになることです。

#Agenda
基礎編
- iOSAppとWatchKitAppの関係性、WatchKitとWatchExtension
- UIレイアウト
- iOSAppとWatchKitApp間のデータ連携
発展編
- iOSとWatchKitAppでコードを共有する
- carthageを使ってOSSライブラリをWatchExtensionで使う
TIPS編
- ライブラリ使用時の実機デバッグ遅い問題
- Menuボタン表示時のライフサイクルの罠",https://fortee.jp/files/iosdc-japan-2019/speaker/90615c24-99d2-47b0-8801-4d549179a38f.jpg,kuroruri,https://fortee.jp/iosdc-japan-2019/proposal/e6c5ff6d-ca46-4483-88db-a7af5dc5b353,,,False,,
オーディオのリアルタイム処理,八十嶋祐樹,30m,"iOSではAVAudioPlayerを使ってオーディオファイルを再生できたり、AVAudioEngineでエフェクトを簡単に色々かけられたりしますが、「もうちょっとこんなことができたら良いのに…」と思うこともあるのではないでしょうか。そんな時は、AudioUnitを使って独自に処理を実装すると解決するかもしれません。

そうは言っても、オーディオの処理を安定して処理させるには、通常のiOSのプログラミングでは扱うことのない知識が必要となってきます。マルチスレッド、C・C++、デジタル信号処理…。

このトークでは、オーディオのリアルタイム処理を実装するにあたって、どのようなことを考慮しなければならないか、オーディオファイルの再生処理のサンプルコードを元にお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/0fe88c04-f466-4d49-9116-d5756a5be069.png,yaso_san,https://fortee.jp/iosdc-japan-2019/proposal/9f112f23-414c-434a-91d5-1feaaea54e83,,,False,,
Making your own tools using SwiftSyntax,北 裕介,15m,"コードフォーマッターやコード検査ツールなどをSwiftで作成したいと思ったことはありませんか？ 今まではSourceKitを利用するのが無難な方法でしたが、SwiftSyntaxがSPM経由で利用可能となりました。SwiftSyntaxはSwift APIによって、SwiftソースコードをパースしてAST(Abstract Syntax Tree)を提供する便利なツールです。
本トークでは、SwifSyntaxの概念や基礎を説明して、生産的なツールを作成する際にどのようにSwiftSyntaxを使えば良いかを簡単な例を用いて解説します。",https://fortee.jp/files/iosdc-japan-2019/speaker/3f8b103b-e5a2-46bb-9927-5437679048bd.jpg,kitasuke,https://fortee.jp/iosdc-japan-2019/proposal/55ee0054-f279-4309-a054-840e9cee0842,,,False,,
ガウスが見つけた黄金定理の素晴らしさをSwiftで辿る,kojiaomatsu,15m,"ガウスという数学者が自ら黄金定理と呼んだ「平方剰余の相互法則」。
定理の解説をSwiftによる実装を織り交ぜながら行います。
また、整数論の論理の展開をSwiftで再現するにはどのようにしたら良いのかについても解説します。
定理を使わない場合の処理との速度の比較を行い、この定理の素晴らしさが少しでも伝わればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/a89a4c69-d5a2-43ae-a8a6-19f0efbda6c6.jpg,kojiaomatsu,https://fortee.jp/iosdc-japan-2019/proposal/3b845aa3-f2ae-4a8e-802a-066e549399f7,,,False,,
この機能が遅すぎる！そんなあなたのための Swift パフォーマンスチューニング入門,Kuniwak,30m,"サクサク動くアプリはそれだけでよいユーザー体験になるのは皆さんもご存知のことだと思います。
しかし、アプリは機能追加によって徐々に速度が低下していきます。

このとき、どのようにしてパフォーマンス劣化の原因を突き止め、そしてどのように改善しますか？

このトークでは、実務ですぐに活かせるパフォーマンスチューニングの原則や、問題発見のための手順、ツールの使い方を解説します。
なお、パフォーマンスの測定も改善もどちらもアプリケーションレイヤーから低レイヤーまで幅広い知識を要求されますが、それらは優しく丁寧に解説します。",https://fortee.jp/files/iosdc-japan-2019/speaker/e871a2d6-8b5d-4d2b-869a-79cb2295796a.png,orga_chem,https://fortee.jp/iosdc-japan-2019/proposal/c8f7eb1c-791c-4ec4-b435-02c45e4b1276,,,False,,
iPhone 設定をアプリから操作してらくらく環境構築,Kuniwak,LT,"iOS の設定は Configuration Profile という形式のファイルをインストールすると変更できることは、意外と知られていません。
もし、これをアプリを通してインストールできれば、iOS 11 未満でも Wi-Fi を QR コードで繋げるなど様々な可能性が広がります。

この LT では、Configuration Profile によってできること、そしてアプリから Configuration Profile をインストールする方法を解説し、皆さんの iPhone 環境構築体験を豊かにするための知識を披露いたします。",https://fortee.jp/files/iosdc-japan-2019/speaker/e871a2d6-8b5d-4d2b-869a-79cb2295796a.png,orga_chem,https://fortee.jp/iosdc-japan-2019/proposal/28c5a85d-f597-46de-b597-8aea019777bc,,,False,,
ガウスが見つけた黄金定理の素晴らしさをSwiftで辿る,kojiaomatsu,LT_R,"ガウスという数学者が自ら黄金定理と呼んだ「平方剰余の相互法則」。
定理の解説をSwiftによる実装を織り交ぜながら行います。
また定理を使わない場合の処理との速度の比較を行い、この定理の素晴らしさが少しでも伝わればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/a89a4c69-d5a2-43ae-a8a6-19f0efbda6c6.jpg,kojiaomatsu,https://fortee.jp/iosdc-japan-2019/proposal/07486e25-75d1-48fb-8587-fdbc77228cc1,,,False,,
納期は1ヶ月。0→1アプリリリースのためにやったこと,raz,LT_R,"社長「8月2日に記者会見やるから、それまでにアプリをリリースしてくれ！」
残された時間はわずか1ヶ月。要求される大量の画面たち。
スタートアップがアプリをリリースするまでの1ヶ月

本セッションでは
1ヶ月でアプリをリリースを達成するためにやったことを発表します。

そこにあったのは金の弾丸とデザイン。あとは、気持ち。
しかも、奇跡的にiOSエンジニア総勢6名(初心者3人、熟練者3人)での並列開発しました。
荒れ狂うslack、通らない審査、増える仕様。
それでもリリースがしたかったんです。

運命の審査提出はいかに！！
※本セッションの内容について、良い子(経営者)は絶対に真似しないでください",https://fortee.jp/files/iosdc-japan-2019/speaker/f4cfa8e1-2a50-41aa-be84-7b4aaa329353.jpg,raz_tech01,https://fortee.jp/iosdc-japan-2019/proposal/209eaa71-559e-4217-a0aa-8f41773b576f,,,False,,
フィードやチャットのスクロールを全力でなめらかにする,Hiroshi Shikata,LT,"UICollectionViewやUITableViewでセルの高さが可変なフィードやチャット画面を作る機会は多いと思います。

そして作ったものを動かしてみると、スクロールが微妙にカクつきがあることに気づきます。

InstagramやFacebookアプリのフィードはなぜあんなになめらかにスクロールできるのか？

5分で実装方法をお話します！",https://fortee.jp/files/iosdc-japan-2019/speaker/e6b05c08-51f0-4437-9981-103e5f62da2c.png,dotrikun,https://fortee.jp/iosdc-japan-2019/proposal/de50c56a-f1b4-43b6-917e-e0911c4bb78d,,,False,,
VIPERに魅力を感じるのは間違っているだろうか,uhooi,LT_R,"「RxSwiftなどのMVVMアーキテクチャが主流でも、私はVIPERを使い続けています」

---

みなさんは「VIPER」というアーキテクチャをご存知でしょうか？

一言でいうと「Clean Architecture + MVP + Router」を組み合わせたアーキテクチャです。

5つのレイヤーに分かれているのが特徴で、各レイヤーの頭文字を取って「VIPER」と呼ばれています。
・View (GUI)
・Interactor (ビジネスロジック)
・Presenter (ビューロジック)
・Entity (エンティティ)
・Router (DI、画面遷移ロジック)

実は、私は約半年前までVIPERを知りませんでした。

しかし、VIPERを知って実際のプロジェクトで使うことで、魅力を感じるようになりました。

非常に優れたアーキテクチャなのですが、あまり使われていないように感じており、寂しいです。

本セッションでは、VIPERの概要とメリット・デメリット、そして魅力を熱く伝えます。

【想定する聞き手】
・VIPERを知らない人
・VIPERを使っていない人

【ゴール】
・VIPERを好んで使うようになる",https://fortee.jp/files/iosdc-japan-2019/speaker/785cd411-35dc-440c-841a-09304078c653.jpg,the_uhooi,https://fortee.jp/iosdc-japan-2019/proposal/75f6d41d-4d9a-4d25-99f0-a1ecfef82ae4,,,False,,
vieperアーキテクチャ,永田大祐,LT,"viperアーキテクチャの2案件に関わりました。

viperアーキテクチャのメリット、デメリットについて、シンプルに解説します。

何故viperアーキテクチャをなのか？
viperアーキテクチャから学んだ事は？
技術コストは？
viperアーキテクチャからの進化系は？

アンラップをされた自動生成されたスクリプトファイルへの対応は？

メモリ管理は？

などなど具体的に要点をまとめて解説致します。",https://fortee.jp/files/iosdc-japan-2019/speaker/d4ddb501-2a03-46c8-a77c-33141988ea3e.png,dbank0208,https://fortee.jp/iosdc-japan-2019/proposal/a0b4a34d-0287-4892-85f6-5dcc5e4fe7ec,,,False,,
viperアーキテクチャ,永田大祐,LT,"viperアーキテクチャの2案件に関わりました。

viperアーキテクチャのメリット、デメリットについて、シンプルに解説します。

何故viperアーキテクチャをなのか？
viperアーキテクチャから学んだ事は？
技術コストは？
viperアーキテクチャからの進化系は？

アンラップをされた自動生成されたスクリプトファイルへの対応は？

メモリ管理は？

などなど具体的に要点をまとめて解説致します。",https://fortee.jp/files/iosdc-japan-2019/speaker/d4ddb501-2a03-46c8-a77c-33141988ea3e.png,dbank0208,https://fortee.jp/iosdc-japan-2019/proposal/6b319013-6cd3-4c1a-9045-44daf3fb338f,,,False,,
RxSwift だけで満足してない？サーバ上のデータの変更もリアクティブに受けとる仕組み,辰濱健一,15m,"昨今リアクティブプログラミングが注目され、RxSwift を使った iOS アプリ開発が主流となっています。
そして、WWDC 2019 では Apple からも Combine Framework が発表されました。
これにより、一層リアクティブプログラミングの導入や推進がされていくことが予想されます。

しかしながら、クライアントサイドだけに RxSwift を導入して満足していませんか？
サーバ上の最新のデータを取得するために、ポーリングを用いたり画面表示のたびに API の呼び出しをしていませんか？

本セッションでは、アプリケーション内に表示する未読件数バッヂの API を題材として
・Silent Notification
・Firebase Cloud Firestore
・GraphQL（AWS AppSync）
など用いて、サーバ上のデータ変更をリアクティブに受け取る方法への置き換えと、それぞれの特徴について紹介します。

この機にクライアントサイドだけに導入していたリアクティブプログラミングの考え方を、サーバ上のデータの変更にも広げてみませんか。
そして、通信やサーバ負荷になっている（かも知れない）ポーリングに別れを告げましょう。",https://fortee.jp/files/iosdc-japan-2019/speaker/0b20e034-92bf-4385-9474-10cdf0ff0716.jpg,tatsuhama50,https://fortee.jp/iosdc-japan-2019/proposal/f7657077-cf43-49f2-8546-bdba9955238f,,,False,,
RxSwift だけで満足してない？サーバ上のデータの変更もリアクティブに受けとる仕組み,辰濱健一,LT,"昨今リアクティブプログラミングが注目され、RxSwift を使った iOS アプリ開発が主流となっています。
そして、WWDC 2019 では Apple からも Combine Framework が発表されました。
これにより、一層リアクティブプログラミングの導入や推進がされていくことが予想されます。

しかしながら、クライアントサイドだけに RxSwift を導入して満足していませんか？
サーバ上の最新のデータを取得するために、ポーリングを用いたり画面表示のたびに API の呼び出しをしていませんか？

本セッションでは、GraphQL などを用いて、サーバ上のデータ変更もリアクティブに受け取る方法について紹介します。
この機にクライアントサイドだけに導入していたリアクティブプログラミングの考え方を、サーバ上のデータの変更にも広げてみませんか。",https://fortee.jp/files/iosdc-japan-2019/speaker/0b20e034-92bf-4385-9474-10cdf0ff0716.jpg,tatsuhama50,https://fortee.jp/iosdc-japan-2019/proposal/8416b0de-23bb-450f-8995-5f6fd2f01c15,,,False,,
明日からできる！デザインの視座をみんなであげる社内勉強会の取り組みと発見したAppleの工夫,まりーな,15m,"開発者もデザイナーもHuman Interface Guidelinesは一度は読んでおいてと言われるものだと思います。
しかし、Human Interface Guidelinesは抽象的に書かれており、具体性が見えにくく、とっつきにくい問題点があるなと思いました。また、英語で書かれているためせっかく読んだのに印象の残らず、すっと自分の中で消えてしまうのがもったいないなと感じました。

今回私が社内で企画したのは、Appleの純正アプリのなかで、Human Interface Guidelinesの文脈が具体的にどこに使われているのかを、みんなで探して発表するという社内勉強会です。iOSエンジニアだけではなくAndroidエンジニアや他部署のデザイナーまで巻き込み、皆でデザインの工夫を発見する感覚を養いました。

○発表の中身
今回の発表では効率的な企画の仕方、企画の回し方、「実施→振り返り→参加者の視座を上げる→参加しなかった社員に情報を伝える→社外に情報発信をするネタにする」というサイクルを回し、勉強会の１時間でいかに効率的にネタを発信情報にするかというのを発表します。
この勉強会で出てきた様々な発見をまとめ、今回聞いた方々のデザインの視座を上げるお手伝いをします。この発表を聞いた方は、明日から社内勉強会をやりたくなるような発表にしたいと考えています。


○目標
この発表を聞いた後、聴講者が次のアクションを起こせるようになるように下記ができるような発表をめざします。
・明日から、社内勉強会を企画できます。
・ビジネスサイドの人と、共通言語を持つことでやりとりしやすくなります
・HIGを皆でよんで知識を深められます
・社内で情報発信と人をつなげるのが得意な人になれます",https://fortee.jp/files/iosdc-japan-2019/speaker/0b6847d7-da24-423b-8dd1-1d6fbd8ddd76.jpg,marina10172013,https://fortee.jp/iosdc-japan-2019/proposal/649210be-16e0-4e2e-bfea-7d09a3a698e0,,,False,,
明日からできる！デザインの視座をみんなであげる社内勉強会のとりくみ,まりーな,LT,"開発者もデザイナーもHuman Interface Guidelinesは一度は読んでおいてと言われるものだと思います。
しかし、Human Interface Guidelinesは抽象的に書かれており、具体性が見えにくくとっつきにくい問題点があるなと思いました。また、英語で書かれているためせっかく読んだのに印象の残らず、すっと自分の中で消えてしまうのがもったいないなと感じました。

今回私が社内で企画したのは、Appleの純正アプリのなかで、Human Interface Guidelinesの文脈が具体的にどこに使われているのかを、みんなで探して発表するという社内勉強会です。普段使っている中で常に探そう、これは工夫なのではないかという感覚が研ぎ澄まされ発見する習慣をつけることができました。また、自分だけだと気がつけなかった工夫が、メンバーの発表によって気がつくことができます。


○発表の中身
今回の発表では、効率的な企画の仕方、企画の回し方、「実施→振り返り→参加者の視座を上げる→参加しなかった社員に情報を伝える→社外に情報発信をするネタにする」というサイクルを回し、勉強会の１時間でいかに効率的にネタを、発信情報のタネにするかというのをかいつまんで発表します。

○この発表をお聞きの皆様が得られる知見
・明日から、社内勉強会を企画できます。
・ビジネスサイドの人と、共通言語を持つことでやりとりしやすくなります
・HIGを皆でよんで知識を深められます
・社内で情報発信と人をつなげるのが得意な人になれます",https://fortee.jp/files/iosdc-japan-2019/speaker/0b6847d7-da24-423b-8dd1-1d6fbd8ddd76.jpg,marina10172013,https://fortee.jp/iosdc-japan-2019/proposal/9a84d1cb-145e-4f4c-98fc-6e04fc677032,,,False,,
広告流入の分析基盤の構築と、広告データに基づいたUIの検討,まりーな,15m,"○概要
アプリに出会う前のユーザーのことを考えてみてください。どうやって、このアプリに出会い、存在を認識し、アプリを入れようと思ってくれたのでしょう？
ユーザーがアプリの存在を知らない場合、広告から流入してきたというパターンが多いのではないでしょうか。インストール数を増加させることが、広告の達成目標になることが多いかとおもいます。果たしてそれで良いのでしょうか？

ユーザーがアプリをインストールするというのは大きな壁です。そのユーザーの裏側には、「アプリを入れて解決したいこと」があったはずです。ユーザそれぞれの物語をキーワードやキャンペーン情報で汲み取れないだろうかということを考えました。
広告の情報をインストール数を増やすことを目標にするだけではなく、UIの検討に使えるようにした取り組みをお話しします。

○発表の中身
まずはじめに、FirebaseとiAdFrameworkを連携し、BigQueryを用いて社内のデータ基盤に、ユーザーの行動と課金情報と流入元を紐付けられる基盤を構築した方法を説明します。
次に、紐づけた情報から、Apple Search Adsの流入元の広告によってユーザーの行動は違うのか、OSごとに行動に違いがあるのかについてお話します。
最後に、ユーザーがインストール時に検索したキーワードやキャンペーンのデータによってUIを変えた結果、より課金につながりやすくなったのかを検証した話をします。

○この発表をお聞きの皆様が得られる知見
・広告流入からインストール数アップだけではなく、課金につながる施策を打てているのか考える機会になる
・データの基盤構築を意識できる。
・FirebaseとiAdFrameworkの連携が楽なのでやってみたくなる。
・アプリの広告について知ることができる。",https://fortee.jp/files/iosdc-japan-2019/speaker/0b6847d7-da24-423b-8dd1-1d6fbd8ddd76.jpg,marina10172013,https://fortee.jp/iosdc-japan-2019/proposal/b7987e3e-4922-41f2-9554-fb840477e320,,,False,,
Appleのサブスクリプションモデルの考察,まりーな,LT,"~Apple news+の情報設計を考える~

○概要
2019年3月の発表会で紹介されたApple News+に着目して、Apple News+の情報設計を研究した成果を発表します。Appleはプラットフォーマーとして、各メディアの情報を個人の好みに合わせて届けています。
雑誌とデジタルという融合をAppleはいかに成し遂げたのか、紙メディアに、デジタルという分野からどんな新しい仕掛けを施したのかを探求しました。

○発表の中身
iOS 12.1の時代のApple NewsとiOS 12.2のApple News+でどんな違いがあるのか、なぜそのような工夫が生まれたのかUIの工夫を考察します。
また、サブスクリプションをしてもらうためにどのような工夫をしているのか、コンテンツを魅力的に見せる工夫を共有します。iPhone版とiPad版にどのような違いがあるのか、どうして違いがあるのかという考察をかいつまんで共有します。

○この発表をお聞きの皆様が得られる知見
・Appleのコンテンツの魅せ方の工夫を知り、普段作っているUIに応用できる。
・サブスクリプションするにあたり、Appleのどこが優れている点なのか知ることができる。
・iOS 12.1とiOS 12.2　２つのOSの比較をすることで、どこが変わったのか。変わった意図はなにかを知ることができる。",https://fortee.jp/files/iosdc-japan-2019/speaker/0b6847d7-da24-423b-8dd1-1d6fbd8ddd76.jpg,marina10172013,https://fortee.jp/iosdc-japan-2019/proposal/f7087f9e-137f-455e-a817-63dc213043ce,,,False,,
CuckooとMockingjayでレイヤー毎のUnit Test,かむい,LT,"日本のエンジニアによるiOSのUnitTestの書籍が発売され、今後Unit Testを書くプロジェクトが増えていくのではと思っています。
スタブ生成処理で支持されているOSSを取り上げ、Unit Testをさらに促進するHowToについてアウトプット出来ればと思っています。",https://fortee.jp/files/iosdc-japan-2019/speaker/8f61adea-824f-4410-82a3-6d4146491f27.jpg,kamui_project,https://fortee.jp/iosdc-japan-2019/proposal/ab6530d6-704b-486b-8be1-474c77c5e40d,,,False,,
iOS 11.1でUIAlertViewの選択肢がタップできなくなる絶望から復帰した物語,uhooi,LT_R,"約2年ほど前、iOS 11.1のβ版でアプリをテストしていたときのことでした。

「あれ？アラートの選択肢がタップできない」

発生しないこともあるので、最初は気のせいかと思いました。

しかし、気のせいではありませんでした。

調査した結果、「iOS 11.1以降で、UIAlertViewの選択肢がタップされるのをウェイトしている場合、アラート表示のトリガーとなるボタンなどを『素早く』タップすると、選択肢がタップできなくなる」ことがわかりました。

原因がよくわからず、アプリの広範囲に及ぶクリティカルな不具合。

iOS 11.1のリリースが迫る中、私たちがとった行動とは…？

※本セッションではObjective-Cのコードのみ扱います。ただし、Swiftのみ扱っている方でも理解しやすい内容となっています。

【アジェンダ】
・不具合の概要と発見した経緯
・不具合の調査結果
・対応策の検討と、実際に対応した方法

【想定する聞き手】
・クリティカルな不具合の発生時、どのような行動をとればいいか悩んでいる人
・レイヤーを気にせず、どんなクラスからでもUIAlertViewを表示している人
・UIAlertViewを使い続けている人(UIAlertControllerでもこの不具合は発生します)

【ゴール】
・クリティカルな不具合の発生時、どのような観点で行動すればいいかわかる
・iOSのβ版でテストするのも大切だということを理解する
・MVCなどのアーキテクチャに沿って実装することの重要性を認識する

クリティカルな不具合の発生時、アプリの規模やユーザー数、緊急度によって対応方法は変わってくると思います。
本セッションで紹介する対応方法はあくまで一例ですが、少しでもみなさんのお役に立てば幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/785cd411-35dc-440c-841a-09304078c653.jpg,the_uhooi,https://fortee.jp/iosdc-japan-2019/proposal/90c071a7-b6f0-41b7-85cb-dad6cf1f9662,,,False,,
ソーシャルライブサービスにおけるデジタル化粧の仕組みと実装,noppe,15m,"デジタル化粧は、映像を加工することで実際にメイクをしているように見せる技術です。
昨今では物理的なメイクを再現するだけでなく骨格や目の大きさを調整したりすることも出来るようになり、セルフィーを投稿する敷居を下げている技術の一つでもあります。
そんな「顔のAR」とも呼べるデジタル化粧はソーシャルライブでは無くてはならない存在となりました。

このセッションではソーシャルライブサービスの実例を通して、デジタル化粧機能の需要の傾向や仕組みを学びます。
また、高価なデジタル化粧SDKを利用せずにMLやMetalを使って実装するにはどうすれば良いかを紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/191c154d-44ab-48fa-b23a-d0c3ef31eeac.jpg,noppefoxwolf,https://fortee.jp/iosdc-japan-2019/proposal/14b44196-0f52-40b7-9924-588f5b0dc027,,,False,,
"Live performance with ""AudioKit""",酒井篤,LT,"try! Swift 2019でも「Swiftにおける音の成形」というセッションがあり、非常に興味深い内容でした。

その内容よりももっと平易な表現で、

AudioKitとは…？音の成形？つまり？
音が出ることで何が楽しいの？
興味はあるけどなんかムズそう…。
こんなの学んでも1円にもならないよね？

自分がAudioKitを触って遊んだ経験から、そういう疑問に回答していくようなLTをしたいと思います。

どうせ5分もあるし、AudioKitで作ったシンセサイザーでライブパフォーマンスできるかも？？
iPhone片手にLTしながら電子アンビエントノイズを披露できればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/2d2dcc5a-74a6-4c68-850c-94eaf86825a3.jpg,_atsushisakai,https://fortee.jp/iosdc-japan-2019/proposal/32347f5f-a2c3-4c6b-aa97-5e8262893b68,,,False,,
gomobileについて,李　泳浴,15m,"gomobileについて紹介します。
gomobileを利用してiOSアプリを構築する流れを紹介します。
最後にdemoもします。",https://fortee.jp/files/iosdc-japan-2019/speaker/567c8224-0f1f-4e68-adcb-8417cd177428.png,googo_dev,https://fortee.jp/iosdc-japan-2019/proposal/4c70c8dd-0c99-4917-ac31-e9904f45209c,,,False,,
モバイルアプリ開発者のための実践機械学習入門,Daiki Matsudate,15m,"モバイルアプリ向けの機械学習ライブラリの充実により、アプリ開発者が機械学習や深層学習を用いた機能を実装することがより簡単になりました。研究者ほどの専門的な知識がなくても、カメラで物体を検出したり、検出したものが何なのかを識別したり、自然言語処理を行ったりすることができます。
これにより、モバイルアプリ開発者でも、機械学習を活用した機能を、ある程度簡単に実装できるようになりました。

このような背景を踏まえ、我々アプリ開発者はユーザーにどのような機能を提供できるのか。まずは、どんなことが簡単にでき、どこから専門知識が必要なのかを理解するところから始めてみましょう。

このトークでは、画像認識や自然言語処理について例を交えながら、モバイルアプリ向け機械学習の現状を総括します。",https://fortee.jp/files/iosdc-japan-2019/speaker/3e8e4b99-1c45-4ca3-a1b9-945778a76795.jpg,d_date,https://fortee.jp/iosdc-japan-2019/proposal/d923cfa2-2867-45e4-ac17-1c157dbf1ef5,,,False,,
App Extensionでアプリの機能を拡張する,Daiki Matsudate,15m,"アプリの機能をより多くの場面で使ってもらえるように、iOSではApp Extensionという機能が提供されています。
いわゆるWidgetと呼ばれるToday Extensionは、ホーム画面に、アプリの機能の一部を提供します。Notification ExtensionはPush通知を受け取る直前に、例えば通知用のサムネイル画像をダウンロードし、通知に画像を表示することができます。
他にもActionやShareといったExtensionがあり、他のアプリとの連携を可能にします。
実はこうしたApp Extensionは9種類存在することはご存知でしょうか。

しかし、こうしたApp Extensionは機能開発の優先度としては低くなりがちにもかかわらず、実装にはハマりどころも多く、時間がかかってしまいます。

このトークでは、App Extensionをおさらいした上で、実装上のはまりどころ、コードやフレームワークの共有方法などのプラクティスをお話しし、Extensionの実装にかかる時間を最小化します。",https://fortee.jp/files/iosdc-japan-2019/speaker/3e8e4b99-1c45-4ca3-a1b9-945778a76795.jpg,d_date,https://fortee.jp/iosdc-japan-2019/proposal/4d3522c0-16b3-4405-bbbe-9a9e8a6dcb91,,,False,,
GitHubを最大限使い倒す,bannzai,iOS,"昨今のバージョン管理ではGitを使用し、リポジトリのホスティングサービスはGitHubを使用している組織・個人の方が多いと思います。もちろん組織や個人のgitリポジトリをホスティングできるだけでも価値はありますが、特に組織での開発ではIssueやPull Request等を利用したGitHubの基本的な機能を使用するプロダクトも多いはずです。

プロダクト開発に焦点をあてましたがOSSを公開する場所としてもGitHubは最もメジャーで有用な手段といえます。OSSを書いている人はもちろんなのですが、OSSを何かしらの形で利用したことがある・今後も利用する人にとってもGitHubに使い慣れていることはメリットと言えます。

Git・GitHubは広く認知されている技術・ツールといえます。GitHubを使いこなせることはプログラマーとしてのスキルの有無として捉えられるといっても過言ではないように思えます。

このトークではGitHubを使う上で基本的な、ちょっと裏技的な、便利な知識・機能・使い方をユースケースに沿って紹介していきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/3b7851eb-166d-416c-9080-26391a48d465.jpg,_bannzai_,https://fortee.jp/iosdc-japan-2019/proposal/c96b98d3-d43f-4a64-9f27-978650d729ce,,,False,,
Swiftプログラミングと論理 〜そして帰ってきた圏論〜,稲見 泰宏,iOS,"「プログラミング」と「論理」の世界には直接的な対応関係があり、
私たちが普段書いているSwiftにおいても例外ではありません。

例えば、論理の世界における命題「AかつB」はタプル型 `(A, B)` 、
「AならばB」は関数型 `A -> B` を使って書くことができます。
これらの型（命題）を組み合わせ、適用していくことで、
あたかも論理式（や数式）を証明するかのように、アプリのプログラムが完成します。

この、「型 ⇔ 命題」、「プログラム ⇔ 証明」に対応することを「Curry-Howard同型対応」と言います。
この背景を知るには、「直感主義論理」と「型付きラムダ計算」の両方を学ぶことが重要です。

そこで、この発表では、理論的基盤となる「古典命題論理・述語論理」「ラムダ計算」の基本をおさらいした後、
「直感主義命題論理」「Curry-Howard同型対応」について、実際にSwift言語を使ってお話しします。
また、Swiftがサポートする「多相型」、「Protocol (Witness)」、「Opaque Result Type」等にも触れ、
圏論の図式を使った、より手軽で簡単な解説も予定しています。

なお、今回の発表は、昨年のiOSDCの発表の続編になります。
事前の予習として、下記のスライドをご参考ください。

代数的データ型 https://speakerdeck.com/inamiy/algebraic-data-type-in-swift
圏論とSwiftへの応用 https://speakerdeck.com/inamiy/iosdc-japan-1",https://fortee.jp/files/iosdc-japan-2019/speaker/b1d24ab0-c7c0-4ab6-ac49-5cc397c240a0.jpg,inamiy,https://fortee.jp/iosdc-japan-2019/proposal/9529444c-a849-47cd-94a7-bf2b694320aa,,,False,,
2年半に渡るアプリ開発の中で変化したViewControllerの生成方法,imaizume,LT_R,"長く運用されているプロダクトほど、周囲を取り巻く環境は様々に変化するものです。
特にチームのエンジニアの出入りがあると、好みも変わりコーディング規約や設計方針が変わります。
私のプロダクトで変わったことの一つにViewControllerの生成方法があります。

初期の頃はUIViewControllerにextensionを定義することで簡潔な方法で生成していましたが、その後xibによる生成に移行しました。
しかし最近は再度Storyboardに戻した上でInstantiateというライブラリを用いた方法に変更しました。

このトークでは、そうしたViewController生成方法を変更した背景やメリットもデメリットについて紹介します。
みなさんの開発でも考えることの多いの内容だと思いますので、ぜひ「自分だったらどうする」を考えながら聞いていただければと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/e285018e-0897-4f61-bc6c-953a450af002.jpg,imaizume,https://fortee.jp/iosdc-japan-2019/proposal/3e2c32f1-0070-47ae-afaf-a7ca251a2581,,,False,,
2年半に渡るアプリ開発の中で始めたこと・止めたこと,imaizume,15m,"長く運用されているプロダクトほど、周囲を取り巻く環境は様々に変化するものです。
それは以下のようにアプリ開発にも影響を及ぼします。

- エンジニアの出入りがあると、好みも変わりコーディング規約や設計方針が変わる。
- 新しいライブラリやテストなどのツールを取り入れると、それに合わせて開発フローが変わる。
- 開発・QAが・リリースフローが変わると、タスクの運用やリリース戦略が変わる。

現在自分のいるプロダクトにはジョインして2年半が経ちますが、その間様々なフェーズを経験してきました。
そしてその中で、開発や運用に関する体制・ルールを様々に変えてきました。
結果、現在続いていることもあれば、うまく運用できなかったり続かなかったことも様々生まれました。

このトークでは、この2年半の間に自身のプロダクト開発において始めたことと止めたことを背景とともにお伝えします。
みなさんの開発でも考えることの多いの内容だと思いますので、ぜひ「自分だったらどうする」を考えながら聞いていただければと思います。

以下はトークの内容です。

- ViewControllerの生成方法: extension、xibを経てInstantiateへ
- コードレビュー: 仕様まで見るべきか実装だけを見るべきか
- アプリ設計: 間違ったVIPERからそれなりのMVPへ
- extension: なんでもextensionにすればいいってもんじゃない
- XCode: 社内でただ一人でもAppCodeを使う理由",https://fortee.jp/files/iosdc-japan-2019/speaker/e285018e-0897-4f61-bc6c-953a450af002.jpg,imaizume,https://fortee.jp/iosdc-japan-2019/proposal/8d3da870-a82d-4617-b58f-aa0fd6057fe8,,,False,,
少人数のプロダクションiOS/Android開発にFlutterを使って楽をした話,kikuchy,15m,"我々のチームにはモバイルアプリエンジニアが2人。

あるとき、我々のサービスのモバイルアプリのソースコードを書き直す計画が持ち上がりました。
2人でiOS/Androidアプリの両方を開発せねばなりません。
2人です。

そんなときに、クロスプラットフォーム開発フレームワーク・Flutterを採用することで、
約半年でiOS/Androidの両アプリをまるっと書き直し、リリースまでこぎつけることができました。

Flutterを使用してプロダクション品質のアプリケーションを仕上げるためのノウハウをお伝えします。

アジェンダ
1. Flutterが少人数チームにとって福音となる理由
2. Swift/Objective-Cアプリと比較して良いところ/悪いところ/変わらないところ
3. どうしても気合が必要になるところ
4. 以前のiOSアプリから無事にアップデートさせるには",https://fortee.jp/files/iosdc-japan-2019/speaker/c353cba8-fa14-4834-8ee1-fa1ebf227a41.png,kikuchy,https://fortee.jp/iosdc-japan-2019/proposal/94aae1fd-969f-4b94-b790-b528a65ce18d,,,False,,
少人数のプロダクションiOS/Android開発にFlutterを使って楽をした話,kikuchy,30m,"我々のチームにはモバイルアプリエンジニアが2人。

あるとき、我々のサービスのモバイルアプリのソースコードを書き直す計画が持ち上がりました。
2人でiOS/Androidアプリの両方を開発せねばなりません。
2人です。

そんなときに、クロスプラットフォーム開発フレームワーク・Flutterを採用することで、
約半年でiOS/Androidの両アプリをまるっと書き直し、リリースまでこぎつけることができました。

Flutterを使用してプロダクション品質のアプリケーションを仕上げるためのノウハウをお伝えします。

アジェンダ（予定）
1. Flutterが少人数チームにとって福音となる理由
2. Flutter基本のキ
3. Swift/Objective-Cアプリと比較して良いところ/悪いところ/変わらないところ
4. プロダクションでFlutterを使うための設計
5. どうしても気合が必要になるところ
6. 以前のiOSアプリから無事にアップデートさせるには",https://fortee.jp/files/iosdc-japan-2019/speaker/c353cba8-fa14-4834-8ee1-fa1ebf227a41.png,kikuchy,https://fortee.jp/iosdc-japan-2019/proposal/b5951329-15f9-497b-810c-bb7e4ff652d7,,,False,,
スナップショットテスト実戦投入,imaizume,15m,"SnapshotTestingやiOSSnapshotTestCaseなど、
スクリーンショットによる差分検知フレームワークが近年注目されています。
これらは指定した画面のスクリーンショットを自動撮影し、
予期せぬ表示上のデグレを検知してくれる画期的なツールです。

一方私のプロダクトでは、状態再現の手間から来るQAコストの増加や
新しいUI作成時の仕様認識のズレなどが課題となっていました。

そこで改善のためSnapshotTestingを導入しQAコストの削減に取り組むことにました。

しかし当然ながら、単純にViewを渡すだけではうまくいきません。
なぜなら導入までに、下記のような下準備が必要なためです。

- API通信をモックする
- 必要な状態をモックできるレスポンスを考える
- アプリ内フラグやログインをモックする
- UIのモックが可能な設計にする
- 自動テストとの連携

なかなか一筋縄ではいかない導入でしたが、
結果として画面のカタログを作成しデグレ検知に成功しました。
本トークではスナップショットテストの導入にあたり、
注意すべき点や知っておくと良い点についてお話します。
導入のメリットに見合うかどうか、自身のプロダクトが抱えている課題を解決できそうか、
その参考となる情報を提供できればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/e285018e-0897-4f61-bc6c-953a450af002.jpg,imaizume,https://fortee.jp/iosdc-japan-2019/proposal/6c77df58-00f6-4623-8fe4-6bfac879fb00,,,False,,
あなたのプロダクトにテストを入れるとき知っておいてほしいこと,imaizume,15m,"品質を落とさないためのテストコードの重要性は、多くのソフトウェアエンジニアの知るところと思われます。
しかし「わかる」と「できる」は違います。

実際にプロダクトへ自動テストを導入し、継続してテストを書くことは、決して簡単なことではありません。
私のプロダクトでもジョインしてからの2年以上に渡り、テストコードが存在しないどころか実行すらできない状態でした。

しかし現在では単体テストをチーム全員が書くようになり、毎push時に自動テストが走っています。
またカバレッジの計測やSnapshotTestingを用いたデグレ検知にも取り組んでいます。
つまり「テストがなかったプロダクトへテストを導入することに成功した」と断言して良いでしょう。

このトークでは、私がテスト文化を定着させるまでに経験した様々な課題やそれらをどう乗り切ったかについて解説します。
特にテスト導入の初期には様々な障害が私達を待ち受けています。
その際の知見をお伝えすることで、これからテストコードを書き始めたいと思っている方に役立つ情報を提供できると思います。
またマニュアルデバッグやデグレが辛いという方にとってもより効率的にアプリのQAを行うヒントとなるのではないかと思います。

トーク内容は以下のとおりです。

- アプリテスト初心者が最初のテストを書けない理由と対策
- 継続的にテストコードを書けない理由と対策
- テストを書く目的と実現したいこと
- 実際に自動テストで使っているツール・環境の紹介",https://fortee.jp/files/iosdc-japan-2019/speaker/e285018e-0897-4f61-bc6c-953a450af002.jpg,imaizume,https://fortee.jp/iosdc-japan-2019/proposal/275ec7f3-b452-424b-ae04-ed7ec9f961a1,,,False,,
フィードデータの同期処理をページングからCloud Firestoreに変えてとても良かった理由,imaizume,LT_R,"チャット画面のメッセージ履歴やタイムライン画面など
リアルタイムに更新されるデータ、いわゆるフィードを扱う場合
アプリ・サーバー間でのデータ同期処理で悩むことはありませんか?

新規取得したデータと取得済みデータのマージ処理やページング管理、さらにパフォーマンスとの兼ね合いなど
様々な状態を考慮しているうち徐々にアプリ側の状態管理は複雑してしまいます。
またその複雑性は、サーバー側でのAPI設計にも大きく依存しています。

そこで最近注目されているのがFirebaseのCloud Firestoreです。
クライアント側は数行の実装をするだけでデータを同期でき、
通信が不安定なところでも整合性を保ちながら数十ミリ秒以内にデータの更新が届きます。

本トークでは、私が実際に経験したアプリ内メッセージ一覧画面のフィードを例に
ページング実装によって起きる問題を紹介しつつ、
それらがCloud Firestoreでどう解決するのかを導入時注意点と併せて紹介します。

リアルタイムに変化するリストデータを扱う方や
これからアプリ内でこうしたデータを扱う機能を作る予定の方には
設計・実装の参考となる知識をお届けいたします。",https://fortee.jp/files/iosdc-japan-2019/speaker/e285018e-0897-4f61-bc6c-953a450af002.jpg,imaizume,https://fortee.jp/iosdc-japan-2019/proposal/e8017800-53e8-4796-8563-e55f01905ff3,,,False,,
リアルタイム更新されるリストデータを同期するためのAPI設計とアプリ実装方法,imaizume,15m,"チャット画面のメッセージ履歴やタイムライン画面など
リアルタイムに更新されるリストデータを扱う場合
アプリ・サーバー間でのデータ同期の設計で悩むことはありませんか?

新規取得したデータと取得済みデータのマージ処理やページング管理、さらにパフォーマンスとの兼ね合いなど
様々な状態を考慮しているうち徐々にアプリ側の状態管理は複雑してしまいます。
またその複雑性は、サーバー側でのAPI設計にも大きく依存しています。

本トークではこうしたデータの同期方法での典型的な3つのAPI設計とアプリ実装パターンをご紹介します。

1. ページング: 現在のページの次のページを読み込み、必要に応じてリフレッシュ。
2. 最終読み込み位置の指定: 読み込んだフィードの最古・最新より先にあるデータの取得をリクエスト。
3. Firebase Cloud Firestore: リアルタイム性を持ちながら短いコードで同期を実現するソリューション。

私が実際に経験したアプリ内メッセージ一覧画面のリストの実装を題材に、
各実装の特徴や注意すべきポイント、さらにはサーバー側やサービス運用における視点からも解説いたします。

リアルタイムに変化するリストデータを扱う方や
これからアプリ内でこうしたデータを扱う機能を作る予定の方には
設計・実装の参考となる知識をお届けいたします。",https://fortee.jp/files/iosdc-japan-2019/speaker/e285018e-0897-4f61-bc6c-953a450af002.jpg,imaizume,https://fortee.jp/iosdc-japan-2019/proposal/b22b88fe-e575-453a-b62e-170052832f89,,,False,,
Sync CoreData with CloudKit.  全CoreDataユーザー歓喜の自動同期機能！,よっしー,LT_R,CoreDataはiOS3.0から存在するSQLiteのORMです。対して、CloudKitはiOS8から利用可能になったiOS専用のmBaasのようなサービスです。この2つに対していつもこう思っていました。「CoreDataの変更がCloudKitに適応されてくれたら嬉しいよね？」と...。これを実現するためにバッチのデータ取得や自作コンフリクト解決を実装していたのはいい思い出ですが、iOS13でついに NSPersistentCloudKitContainerというAPIで公式対応され、コンフリクト自動解決も行ってくれるようになりました！このAPIが何を解決してくれるのか？サンプルベースで概要と熱いパッションをお伝えします。,https://fortee.jp/files/iosdc-japan-2019/speaker/ad1b4807-d927-4b8e-b2c2-dee1958010f0.jpeg,seijin4486,https://fortee.jp/iosdc-japan-2019/proposal/3c2848b5-d5d4-4311-aa9f-89446f7febd8,,,False,,
iOSエンジニアでもできるIoTガジェット作成、基板発注もう何も怖くない,Jumpei Ono,LT_R,"iOSエンジニアなら一度は憧れるスマホ連携IoTガジェット。
iOSとの連携が簡単なマイコンや、簡単に基板を設計、発注する方法をご紹介します。
自分だけのオリジナルIoTガジェットを作る楽しみが広がると嬉しいです！",https://fortee.jp/files/iosdc-japan-2019/speaker/5c73e810-f74d-46b6-9b89-6932100b4e97.jpg,takoikatakotako,https://fortee.jp/iosdc-japan-2019/proposal/e173193d-08c9-4bde-8e78-173222da38f2,,,False,,
Swift製 WebフレームワークVaporのススメ,Jumpei Ono,LT_R,"サーバーサイドは何の言語を使って書いていますか?
Rubyですか? GOですか? Javaですか?
Swift でサーバーサイドを書きたいですよね?
私は個人開発アプリのAPIにSwift製のWebフレームワークVaporを採用しました。
その中で分かったVaporの良い所、改善の余地がある所、その他オススメの構成など、体験談をご紹介します",https://fortee.jp/files/iosdc-japan-2019/speaker/5c73e810-f74d-46b6-9b89-6932100b4e97.jpg,takoikatakotako,https://fortee.jp/iosdc-japan-2019/proposal/8def4fae-0524-4e30-9abb-144e382b0d86,,,False,,
何故に私達（特に私）はアプリのアニメーションやUI表現に魅了されるのか？そして共存と向き合いを考える,酒井文也,15m,"私達が普段からよく利用しているアプリや平素での開発を通じて、アニメーションやユーザーインタラクションを利用した表現やUI実装に向き合う機会は、どのような局面においてもあるかと思います。

今回の発表では下記5つのトピック

1. iOSアプリ開発におけるアニメーションやUI表現はなぜ必要なのか？
2. アプリの見え方や使用感 / 触り心地という観点でのもたらす効果は？
3. 実装に至るまでに考慮しておくべき点はどの部分か？
4. コードに落とし込む際にポイントとなるのはどこか？
5. アプリにおける「触り心地」と「機能」との両立をいかにバランスを取るか？

（時間があれば、開発者の観点から見た「アニメーションのやりがいや魅力」とはもお話できればと思います）

という着眼点から、サンプルコードやアプリ事例から考察したものや考えを、お話倒していければと思います。
そして皆様の平素の開発において、豊かなUI表現を実装していくためのアイデアやヒントにほんの少しでもなれば嬉しく思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/84f53b23-5836-41dc-9bb2-3c17b18319d3.jpg,fumiyasac,https://fortee.jp/iosdc-japan-2019/proposal/2c494fea-5fa2-4335-9527-c2bca1ecf41f,,,False,,
iOS開発でありがちなConflictの解消による弊害とそれを解決するGitテクニック,417.72KI,LT,"XcodeGenの登場により、我々は.xcodeprojをGit管理する必要が無くなりConflict問題から解放される術を得ました。

しかし、それと同時にbranch切り替え時にファイルの追加/削除を気にしなければならなくなりました。
なぜならそれらは.xcodeprojが把握していたものだからです。
.xcodeprojが変更されないため、ファイルが増えたり減ったりしていてもプロジェクトには反映されないのです。

CocoaPodsやCarthageでも同じことが言えます。
PodsやCarthageフォルダをGit管理していない場合、Podfile.lockやCartfile.resolvedが変わっていないか気にする必要があるのです。

このセッションでは、この問題を解決するために使ったGit hooksという仕組みについて簡単に話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/3ec83c33-0b05-4920-a512-b1199523d6ce.jpg,417_72ki,https://fortee.jp/iosdc-japan-2019/proposal/1e03d3ca-0427-4238-bbe3-94b177005d86,,,False,,
iPhone/iPad向け画面の統合への道のり,ヴァンサン,15m,"「自分のアプリをiPad対応したり最適化したい。
　でもiPhoneに比べてユーザー数が多くないから、
　それに掛けるリソースがあまりない。」

または

「昔iPad対応をしたが、
　iPadとiPhoneの条件分岐が原因で考慮すべきことが増え、
 開発速度に支障がよく出ていて困っている。」

上記のどちらかで悩んだ事がある人はいませんか？
どちらも私達のチームが遭遇したことです。

どうやったらiPhoneのために考えて作られた画面をiPadでも自然に使えるように形へ修正できるのか。
その修正を進めている間できるだけ他の開発者の開発速度を落とさないように工夫したこととは。
歴史あるアプリをReadable Width、画面回転、画面分割、に対応させるために何をやったのか。

実際の作業の進め方、その方針や、遭遇した困難の解決策を詳しく説明したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/5c87d6e3-3af0-406f-a88b-d63dcf8c003d.png,vincentisambart,https://fortee.jp/iosdc-japan-2019/proposal/acc47bc7-e782-4cd1-bcb7-76dbe61fd127,,,False,,
Heart of Swift,Yuta Koshizawa,30m,"Value SemanticsとProtocol-Oriented ProgrammingはSwiftの根幹をなす概念です。Swiftの言語そのものや標準ライブラリ、SwiftUIの設計とも密接に関わっており、Swiftという言語を特徴づけるHeart（心、中心）と言えます。

Value SemanticsとProtocol-Oriented Programmingについては、WWDC 2015でのSwift Core Teamメンバーによる解説がよく知られています。しかし当時はSwift 2ベータの時期で、解説に用いられたコードには現在Swift 5で動作しないものも多いです。

また、Swift 5.1で導入されるOpaque Result Type（ORT）や、その後を見据えて議論されているリバースジェネリクス、Generalized Existential、any修飾子との関係など、現在ではより広い視野でValue SemanticsとProtocol-Oriented Programmingを考えることができます。

iOSアプリ開発についても、WWDC 2019で発表されたSwiftUIによって、iOS 13以降状況が大きく変化しそうです。これまではUIKitを用いたクラスベースの開発が必須でした。しかし、SwiftUIではprotocolとstructが中心になり、ORTが多用されます。それらを使いこなすために、Value SemanticsとProtocol-Oriented Programmingの理解がますます重要になるでしょう。

本トークでは、それらの関係を示しながらSwift 5.1時代のValue SemanticsとProtocol-Oriented Programmingを解説し、SwiftのHeartを描き出します。",https://fortee.jp/files/iosdc-japan-2019/speaker/10643a54-a90d-495b-a6c3-413b82a8ce81.gif,koher,https://fortee.jp/iosdc-japan-2019/proposal/8c0509d1-ec1d-4225-8e04-e92726f997d4,,,False,,
"""Conflict""って何ですか？ と聞かれる未来",かむい,15m,"WWDC 2019でSwiftUIが登場し、.storyboardや.xibで悩みの種だったConflict問題が軽減される未来を感じました。
.xcodeprojのConflict問題の解決手段として登場したXcodeGenと合わせると、将来Conflictが存在しないという理想郷が現れるのでしょうか。
このトークではSwiftUIとXcodeGenとを掛け合わせ、Conflictが無くなる未来について検証をしていければと思っています。",https://fortee.jp/files/iosdc-japan-2019/speaker/8f61adea-824f-4410-82a3-6d4146491f27.jpg,kamui_project,https://fortee.jp/iosdc-japan-2019/proposal/b087a20d-61d8-45bc-85dc-d259b45a9d07,,,False,,
All About Test of Flutter,kikuchy,15m,"メルカリさん、DeNAさんのカンファレンスアプリに採用される、SwiftUIとの比較が取り沙汰されるなど、iOSエンジニアからも注目度の高いFlutter。
業務でも使用される例もちらほらと聞こえるようになり、普及してきた様子が伺えます。

しかし、テストは書かれているでしょうか？
また、Flutterアプリケーションに対するテストの知見は一般化されているでしょうか？

本セッションでは、Flutter記述言語であるDartの基本的なテストの記述方法から、
応用的なアサーション方法、Flutter特有のモジュールのテスト方法まで、幅広く解説します。

本セッションの内容だけで自動テストを書き始められるようになっていただくのが目標です。

以下、アジェンダです。

1. （Dartのテストを）全く知らない人向けの単体テストの記述/実行の基礎
2. テストのコストで「書く/書かない」を決める
3. Tips（統合テストの記述の仕方、便利なライブラリ紹介など）",https://fortee.jp/files/iosdc-japan-2019/speaker/c353cba8-fa14-4834-8ee1-fa1ebf227a41.png,kikuchy,https://fortee.jp/iosdc-japan-2019/proposal/5e2e3c7e-a230-4744-9aed-006487a33447,,,False,,
All About Test of Flutter,kikuchy,30m,"メルカリさん、DeNAさんのカンファレンスアプリに採用される、SwiftUIとの比較が取り沙汰されるなど、iOSエンジニアからも注目度の高いFlutter。
業務でも使用される例もちらほらと聞こえるようになり、普及してきた様子が伺えます。

しかし、テストは書かれているでしょうか？
また、Flutterアプリケーションに対するテストの知見は一般化されているでしょうか？

本セッションでは、Flutter記述言語であるDartの基本的なテストの記述方法から、
応用的なアサーション方法、Flutter特有のモジュールのテスト方法まで、幅広く解説します。

本セッションの内容だけで自動テストを書き始められるようになっていただくのが目標です。

以下、アジェンダです。

1. （Dartのテストを）全く知らない人向けのテストの記述/実行の基礎
2. 単体テスト
3. WIdgetテスト
4. Integrationテスト
5. 設計のアドバイス（依存性注入、依存性逆転の原則、テストのコスト）
6. Tips（便利なライブラリ紹介など）",https://fortee.jp/files/iosdc-japan-2019/speaker/c353cba8-fa14-4834-8ee1-fa1ebf227a41.png,kikuchy,https://fortee.jp/iosdc-japan-2019/proposal/8aa20b31-fec9-46b4-8f7f-727557e24c23,,,False,,
30分でわかるアプリ内課金,はやたん,15m,"ついに弊チームのプロダクトにもアプリ内課金の波がやって参りました。
アプリ内課金って実装したこと無い方って、意外と多いんじゃないですか？

アプリ内課金なんて実装したことの無い僕たちが学んだノウハウお伝えします！

プロポーザルを書いている今は未経験！
そんな未経験な僕が未来の自分に期待を込めた挑戦的なプロポーザルです。",https://fortee.jp/files/iosdc-japan-2019/speaker/a12cb0af-ebd6-47c4-85f1-61d29198ddc6.jpg,hayatan_,https://fortee.jp/iosdc-japan-2019/proposal/54f9f8c7-29b7-4eb2-9b94-0fbdb71939f1,,,False,,
5分でわかるアプリ内課金,はやたん,LT,"ついに弊チームのプロダクトにもアプリ内課金の波がやって参りました。
アプリ内課金って実装したこと無い方って、意外と多いんじゃないですか？

アプリ内課金なんて実装したことの無い僕たちが学んだノウハウお伝えします！

プロポーザルを書いている今は未経験！
そんな未経験な僕が未来の自分に期待を込めた挑戦的なプロポーザルです。",https://fortee.jp/files/iosdc-japan-2019/speaker/a12cb0af-ebd6-47c4-85f1-61d29198ddc6.jpg,hayatan_,https://fortee.jp/iosdc-japan-2019/proposal/2ed6cbaf-0344-40d1-8aab-db0b9bdfd8b0,,,False,,
Xcodeプロジェクトのコンフリクトという概念が存在しない素晴らしい世界,はやたん,LT,"XcodeGen を使って我々のチームはコンフリクトのない素晴らしい世界の住人になれました。
まだ使ったこと無い皆さんには是非聞いて欲しい話。",https://fortee.jp/files/iosdc-japan-2019/speaker/a12cb0af-ebd6-47c4-85f1-61d29198ddc6.jpg,hayatan_,https://fortee.jp/iosdc-japan-2019/proposal/e6373bf8-6bab-4fbc-ae4c-c85311201cdb,,,False,,
動画アプリの投げ銭機能における消耗型課金の仕組みと実装,Takeshi Ihara,15m,"近年、ユーザーがクリエイターに直接お金を払ういわゆる投げ銭機能を提供しているサービスが増えてきました。
自分が開発している動画アプリでも投げ銭機能を実装することになり、それに伴い投げ銭するためのアプリ内通貨の購入機能が必要でした。
しかし、まだまだ事例は少なく参考になる情報などが少ない状況です。

プレミアム機能を使うための月額課金プランをすでにネイティブ実装していたので、レシート検証の共通化などを行うためアプリ内通貨の購入機能もネイティブ実装することになりました。
一部の処理は共通化できますが、月額課金プランはAuto-Renewable Subscriptions、アプリ内通貨の購入機能はConsumableと呼ばれる課金方式で実装するため、リトライ処理など課金トランザクションの扱いの差異などを意識して実装する必要があります。
しかしよくネイティブ実装される課金方式は、自動更新型のAuto-Renewable Subscriptionsや非消耗型のNon-Consumableです。
Auto-Renewable Subscriptionsは特定のコンテンツにアクセスできる手段として、Non-Consumableはアプリ内の特定の機能にアクセスする手段としてよく使われます。
消耗型のConsumableはゲームアプリ内の通貨などでよく用いられますが、Unityやcocos-2dxなどのフレームワークで開発されることが多く、ネイティブで実装されることは少ないです。
事実、課金のネイティブ実装を検索しても、多くヒットするのはAuto-Renewable SubscriptionsやNon-Consumableです。

このセッションでは、公式ドキュメントを参考にしながらConsumableのネイティブ実装をした話を他の課金方式と比較しながら紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/1cc2bd19-6233-4020-b390-cb498db4a7b5.jpg,nonchalant0303,https://fortee.jp/iosdc-japan-2019/proposal/d2ce8e9f-6294-45da-912f-2246dba78401,,,False,,
ARを使って会社のミッション・ビジョンを浸透させてみた(LT版),iida hayato,LT,"今回集まられるiOSエンジニアの皆様は日々会社のミッション・ビジョン(以下MV)の浸透に頭を悩ませていると思います
このトークではMV浸透のためにARを使ったコンテンツを制作したお話をさせていただきます。

特にiOSに限らずARのコンテンツを企画、開発していく際のポイントについて話したいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/35825456-7786-4582-96b4-825d56c6b960.png,iida_0213,https://fortee.jp/iosdc-japan-2019/proposal/1d27c1ca-3350-4032-8950-126103cb1d63,,,False,,
ARを使って会社のミッション・ビジョンを浸透させてみた,iida hayato,15m,"今回集まられるiOSエンジニアの皆様は日々会社のミッション・ビジョン(以下MV)の浸透に頭を悩ませていると思います
このトークではMV浸透のためにARを使ったコンテンツを制作したお話をさせていただきます。
コンテンツを決めるまでの迷走の過程や
最終的な成果物と、それがどのような結果になったのか
ARアプリを企画、開発していく際のポイントについてお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/35825456-7786-4582-96b4-825d56c6b960.png,iida_0213,https://fortee.jp/iosdc-japan-2019/proposal/321702bf-93c2-4280-9e0c-2ef01fd580aa,,,False,,
iOS開発におけるAppSyncを活用したクライアント駆動開発,paper_and_paper,15m,Restful APIのエンドポイントが複数存在する場合、それぞれに対応したクライアント部分を開発する必要があり、またAPI仕様が変更になると改修作業も面倒でした。本トークでは、昨年度から導入したAWSAppSyncを用いて、アプリ側が主導してアプリ・バックエンド間のAPIを設計し、実際の受託案件に導入してみて感じたメリットとデメリットについて紹介します。,https://fortee.jp/files/iosdc-japan-2019/speaker/125d8e18-83ff-41c6-81c1-58a951017e49.jpg,paper_and_paper,https://fortee.jp/iosdc-japan-2019/proposal/4cdee6af-933b-4937-bc77-eab874d42c34,,,False,,
Grpcとhttpの速度比較,樋口雅拓,LT_R,Grpcはhttpに比べて速度的に有利だと言われています。では、実際どの程度有利なのかserver及びclientのswift実装説明を交えながら計測結果を示します。,https://fortee.jp/files/iosdc-japan-2019/speaker/11bd93dd-88ea-4f50-b5f5-2d296d7755e6.png,mahiguch1,https://fortee.jp/iosdc-japan-2019/proposal/31bc7b74-1051-40e1-8581-9cb02f2be77c,,,False,,
修飾子を漏れなく設定するためにXcode Source Editor Extensionを活用してみる,明渡  麻衣花,LT_R,"クラスは基本的にfinal修飾子で作成して、無闇に継承できないようにしたい！
プロパティは基本的にアクセス修飾子をprivateに設定して、無闇にアクセスできないようにしたい！
・・・という意図のコーディングルールの下で日々開発に励んでいるのですが、ケアレスミスが多いので非常によくつけ忘れます。
「気をつけるとか不確実すぎるし、何か建設的な改善策はないだろうか？」と調べてみたところ、Xcode Source Editor Extensionを活用するとよさそうなので作ってみることに。
「Xcode Source Editor Extensionの存在はぼんやりと知っているけど、具体的に活用する場面が思い浮かばない」という方が実際に活用するイメージが浮かぶような発表を目指します。",https://fortee.jp/files/iosdc-japan-2019/speaker/60b0f596-2e76-47ab-87c8-ee558a535301.jpg,m_yamada0617,https://fortee.jp/iosdc-japan-2019/proposal/190fc530-d175-4fa1-b4b0-20e4097d953e,,,False,,
テストせずにリファクタリングすることは可能か？を検証してみた (Swift編),栗山徹,LT,"「20万行超のコードベースをテストせずにリファクタリングリリースした話」というブログ記事があります。「コードの変更前後でAST(抽象構文木)が変化しなければテストは不要ではないか？」という考えのもと、ASTが変化しない修正をテストせずにデプロイした、という内容です。

記事ではPythonが題材でしたが、この話、Swiftでも同じようなことが可能なのでしょうか？

本セッションでは、コメントの削除や変数名のリネームなどを題材に、テストの必要が無い ( = ASTの変更がない) リファクタリングが可能かどうかを検証した結果をご紹介します。

本セッションが皆さんの日々のテスト戦略のお役に立てれば幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/28aa5805-bf54-4d46-91f0-a5e860c38dde.jpg,kotetu,https://fortee.jp/iosdc-japan-2019/proposal/0effc4e9-3ebb-4252-be77-6a757d1be8f2,,,False,,
たったひとつのViewControllerをすごく慎重にリファクタリングした話,八十嶋祐樹,15m,"ユビレジのiPadアプリでは、起動時に一番最初に呼ばれるRootViewControllerが様々な起動処理を行っており、画面表示に関する処理だけでなくロジックなども全て扱う巨大で複雑なものとなっていました。いわゆるFatViewControllerと呼ばれるものです。

今後のメンテナンスなどを考えてリファクタリングを行いましたが、起動処理に問題が起きれば当然全てのユーザーに影響が出る部分なため、通常より慎重に進めなくてはいけませんでした。最終的に半年以上の期間をかけ、46個のプルリクエストに分けレビューを行うこととなりました。

このトークでは、安全に作業をすることを優先してリファクタリングを行ったその方法を、実際の事例を元にお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/0fe88c04-f466-4d49-9116-d5756a5be069.png,yaso_san,https://fortee.jp/iosdc-japan-2019/proposal/cb101c0b-60f6-42ed-9def-d433a9e3d121,,,False,,
ストアの最適化七転八起,まりーな,LT,"○概要
ユーザーがアプリに出会うためには、そもそもインストールしてくれないとはじまりません。普段iOSの中身を作っていると、インストール以前のユーザーのことを考える機会は少ないかと思います。この発表では、インストール以前のユーザーのことを考えるきっかけになってほしいため、ストアの最適化を行った話をします。
AndroidのGoogle Play ConsoleではストアのABテストを行えます。iOSDCというiOSの知見を共有する場ですが、AndroidのGoogle Play Consoleで様々な施策を行った結果を共有します。これをApp Storeで申請する際に、Androidの話ではありますが参考にしていただければと思います。
また、Apple Storeでの各社のスクリーンショットから、スクリーンショットを魅力的に見せるための工夫をまとめ、パターン化して研究した話を共有します。
Apple Search Adsやユニバーサルアプリキャンペーンで活用できるような情報を提供します。

○目標
この発表を聞いた後、聴講者が次のアクションを起こせるようになるように下記ができるような発表をめざします。
・ただ申請をするのではなく、iOSエンジニアからインストール数向上のために提案をいえるようになる
・アプリの流入前のユーザーに興味をもてるようになる
・ストアのスクリーンショットのパターンがわかる",https://fortee.jp/files/iosdc-japan-2019/speaker/0b6847d7-da24-423b-8dd1-1d6fbd8ddd76.jpg,marina10172013,https://fortee.jp/iosdc-japan-2019/proposal/9c341098-47a8-4f71-9a89-a5f26e138c07,,,False,,
何故に私達（特に私）はアプリのアニメーションやUI表現に魅了されるのか,酒井文也,LT_R,"私達が普段からよく利用しているアプリや平素で開発
・iOSアプリ開発におけるアニメーションやUI表現はなぜ必要なのか？
・アプリの見え方や使用感 / 触り心地という観点でのもたらす効果は？
・実装に至るまでに考慮しておくべき点はどの部分か？
・コードに落とし込む際にポイントとなるのはどこか？
という点を、LT5分間という短い時間の中で考察したものや考えを、お話倒していければと思います。
そして皆様の平素の開発において、豊かなUI表現を実装していくためのアイデアやヒントにほんの少しでもなれば嬉しく思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/84f53b23-5836-41dc-9bb2-3c17b18319d3.jpg,fumiyasac,https://fortee.jp/iosdc-japan-2019/proposal/4d48fa01-81d3-4d53-855c-cdfbde194c99,,,False,,
RxSwift/ReactiveSwift のよくあるバグを実行前に発見するためのツールと基礎,Kuniwak,30m,"RxSwift/ReactiveSwift を使っているプロジェクトでは、一度はわかりづらい Rx のバグを埋め込んでデバッグに苦労したことはないでしょうか？
例えば、次のようなバグのいずれかは一度は体験したことがあるのではないでしょうか：

* Single の元ストリームの complete を忘れてイベントが発火しない
* zip と combineLatest を間違えてイベントがまったく発火しない
* ストリームが空になる可能性があるが、後続の処理が考慮できておらずエラーになる
* ストリームの合流にバグがあってイベントが無限に発火する
* ...

これらのバグを、アプリやテストを実行することなく発見する方法として「形式手法」と呼ばれる技法を紹介します。

この形式手法とは、失敗時の損害が巨大なシステムや、通信プロトコルの設計などの分野で使われている技術です。しかし、iOS アプリ開発者にとっては馴染みの薄いものでしょう。そこで、この発表ではツールの使い方やその基礎を含めた形式手法の実践的な応用方法を紹介します。発表時間が30分の場合は、ツールの使い方と基礎が中心になり、60分の場合は複数の実用例を加えて紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/e871a2d6-8b5d-4d2b-869a-79cb2295796a.png,orga_chem,https://fortee.jp/iosdc-japan-2019/proposal/d4ea2ecc-a1b4-4ab7-84b2-61a030790a77,,,False,,
RxSwift/ReactiveSwift のよくあるバグを実行前に発見するためのツールと基礎,Kuniwak,15m,"RxSwift/ReactiveSwift を使っているプロジェクトでは、一度はわかりづらい Rx のバグを埋め込んでデバッグに苦労したことはないでしょうか？
例えば、次のようなバグのいずれかは一度は体験したことがあるのではないでしょうか：

* Single の元ストリームの complete を忘れてイベントが発火しない
* zip と combineLatest を間違えてイベントがまったく発火しない
* ストリームが空になる可能性があるが、後続の処理が考慮できておらずエラーになる
* ストリームの合流にバグがあってイベントが無限に発火する
* ...

これらのバグを、アプリやテストを実行することなく発見する方法として「形式手法」と呼ばれる技法を紹介します。

この形式手法とは、失敗時の損害が巨大なシステムや、通信プロトコルの設計などの分野で使われている技術です。しかし、iOS アプリ開発者にとっては馴染みの薄いものでしょう。そこで、この発表ではツールの使い方やその基礎を含めた形式手法の実践的な応用方法を紹介します。発表時間が30分の場合は、ツールの使い方と基礎が中心になり、60分の場合は複数の実用例を加えて紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/e871a2d6-8b5d-4d2b-869a-79cb2295796a.png,orga_chem,https://fortee.jp/iosdc-japan-2019/proposal/a5deb18e-a187-4a25-9676-01ed3e1be63d,,,False,,
テストのプロと体験する最善のテストライブコーディング,Kuniwak,30m,"iOSDC 2018 ではテスト（コードによる動作確認）に関連するトークが投票で2位に選ばれ、iOS アプリ開発者のテストへの関心が高まっているようです。

一方で、私の周りには「テストで困っている」「テストがつらい」といった声をよく耳にします。
そして、これらの背景に、身の回りにテストに熟練したメンバーがおらず、うまくいっている実例がわからないということがあるようです。

そこでこの発表では、テストに熟練したプロがある程度複雑なアプリをテストしていくライブコーディングを実演します。ライブコーディングでは、以下の重要な3点を中心にテーマにする予定です：

* テストがつらくなっていくのはなぜで、どのように解消できるか
* どのようにテスト対象を設計（あるいは再設計）するか
* どのようなリズムでテストを書いて実行するか",https://fortee.jp/files/iosdc-japan-2019/speaker/e871a2d6-8b5d-4d2b-869a-79cb2295796a.png,orga_chem,https://fortee.jp/iosdc-japan-2019/proposal/6646c514-69fc-4286-b254-153f55339b20,,,False,,
ARKitの壁認識で、壁にぶち当たった話,shibatom,LT,"ARKitってうまい具合に、床や壁を認識してくれるんでしょ？

そんなふうに考えていた時期が私にもありました..。

壁にARで仮想のポスターを貼るアプリを開発する際に
ぶち当たった壁。それは壁の認識。

「ほ と ん ど の 壁 は 特 徴 量 が 少 な く て 認 識 で き な い！」
※ ARKitの水平面、垂直面認識には一定以上の特徴量が必要です。

では、どうやったら壁にARでポスターを貼れるのか….。

文字通り壁の為に、壁に向き合い続けた1ヶ月間で得られた
ARKit開発にまつわるTipsや教訓を5分でまとめてご紹介します。

【対象の方】

- そろそろARKitにちょっと触れてみたい
- ARKitの床、壁認識の方法に興味がある
- ARKitのUI事情に興味がある
- ARKitで仮想の壁をつくる方法に興味がある（ニッチ）",https://fortee.jp/files/iosdc-japan-2019/speaker/abb7f802-1efb-4425-a811-d0decc006044.jpg,shibatom_dev,https://fortee.jp/iosdc-japan-2019/proposal/b6608d85-d7c6-4c71-8560-c38ded225d3d,,,False,,
あなたのiOSアプリ、tvOSに対応してみませんか？コーディングなしで。,日向強,LT_R,"iOSのアプリをリリースされたみなさん、リリースおめでとうございます！
そのアプリ、tvOSに対応してみてはいかがでしょうか？

実は、あなたのそのアプリ、
swift/Objective-Cのコードを一つも修正することなく、tvOSに対応できるかもしれません。

このLTでは、コードなどの資源をなるべく共通で利用することのできる、
iOS/tvOSのクロスプラットフォームを実現するための手法についてお話できればと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/55d625b3-9c4f-435f-aeec-6bd386be51f3.jpg,coffeegyunyu,https://fortee.jp/iosdc-japan-2019/proposal/5e0b61f5-201c-4250-bfc1-327879453b86,,,False,,
BLEでiOS/Android間でそこそこ大きなサイズのデータ通信を実現する (L2CAPもあるよ),日向強,15m,"みなさん、iOSやAndroidなど、端末同士のデータ交換にはどのような方法を使っていますか？
ログインや登録を必要としない、パケット代もかからない、モバイルデバイスで広く採用されている、OSを問わない、
そんな理由でBluetoothを採用しようとした人は結構いらっしゃるのではないでしょうか。

しかし、いざ採用したとしても、一度に少量しかデータを送れない、機種によって安定しない、データを正しく受け取れない…
そんな経験から、BLEの採用を見送った方も多いのではないのでしょうか。

そんなBLEですが、
iOS、Androidの各OSで内部的に行われている処理を読み解くと、
データを送るための処理を最適化するための道筋が見えてきます。

このトークでは、BLEの処理に対して各OSで何が行われているのか？何ができるのか？
その上で最適なデータ通信を行うためには何をすればいいのか？を語りたいと思います。

また、iOS11より、通常のBLE通信とはまた違った選択肢「L2CAP」でのデータ通信が行えるようになりました。
こちらの方式はほぼ公式ドキュメントが存在しない状況ですが、Android Qにも採用される予定の技術であり、
そちらも合わせて語りたいと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/55d625b3-9c4f-435f-aeec-6bd386be51f3.jpg,coffeegyunyu,https://fortee.jp/iosdc-japan-2019/proposal/b40d595d-7b06-45c1-b13d-30a2a5d64e9f,,,False,,
完全に同じ開発環境を素早く用意できる（もしくはできない）技術,Hiroyuki Aoki,LT_R,"開発環境の構築って面倒ですよね。
Xcodeのインストールは時間がかかるし、その他いろんなツールに関して手順書を用意しておいても、ちょっと違うバージョンがうっかり入っちゃうとかよくあります。

このLTでは、毎月数十台のMacをセットアップし続けてきた経験から、Appleの提供する標準機能だけで全く同じ構成のmacOS環境を準備するために行ってきたいくつかの方法と、それぞれの特徴についてお話しします。
また、Sierra -> High Sierra -> Mojaveと毎年バージョンアップされるに伴って利用できる技術が変わっており、現在進行形で困っていることについても話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/82e33214-c96b-460a-9abc-b12228c28982.jpeg,Solti,https://fortee.jp/iosdc-japan-2019/proposal/973963ea-c6b2-46aa-a15b-1b34af099c84,,,False,,
iOSアプリに「意識」は宿るのか？ディープラーニングの先にある人工知能（AI）,我妻幸長,iOS,"人工知能技術の発展により、端末による物体の判別や自然言語処理など、iOSの様々な可能性が広がってきました。これらのうちほとんどは、現在隆盛のディープラーニング技術をベースにしています。しかしながら、このようなディープラーニングベースの人工知能はあくまで「ツール」としての人工知能です。ヒトの知能のもっとも高度な部分は大脳が担っていますが、大脳が扱う「意識」は、例えば夢を見ているときのように入力が出力が無くても自発的な活動を続けています。むしろ、大脳への入力や出力は、そのとてつもなく高度な機能の本質ではないのかもしれません。また、ディープラーニングは出力に対応する正解が必要な教師あり学習ですが、高度な自律性、汎用性を有する実際の大脳では正解データのない教師なし学習が行われています。より自律的、より汎用的な人工知能をiOSアプリが搭載するためには、このようなより天然の知能に近い仕組みをアプリが備える必要があります。
そのために、本発表ではアプリが「意識」を備えるためには何が必要なのか、様々な可能性を示していきます。脳科学と人工知能の関係性から始めて、単純なルールから一筋縄ではいかない複雑な因果関係が生まれるカオスや複雑系、さらに意識を扱う理論である統合情報理論、グローバル・ワークスペース理論などを解説していきます。その上で、自律的な動作をする「意識のようなもの」へつながるアルゴリズムを探っていきます。
果たして、スマートフォンはヒトにとって単なる「ツール」であり続けるのでしょうか、それとも、ドラえもんのようなヒトにとって大事な「パートナー」になるのでしょうか。本発表では、従来の「ツール」として有用なディープラーニングを離れて、生き物のような自律性を持つ「パートナー」としての人工知能の可能性を探求します。",https://fortee.jp/files/iosdc-japan-2019/speaker/b109497b-ee36-411f-b6f6-f08af9fa35ef.jpg,yuky_az,https://fortee.jp/iosdc-japan-2019/proposal/820ac4b7-ebd1-44f9-b351-b223066a3838,,,False,,
簡単なアプリを作れるようになった！からその先に進むために,ろく,LT_R,"入門書を読み終わり、簡単なアプリが作れるようになった！
でもこの後はどうしたらいい？とりあえずアプリを作ったらいいの？

こんなことを思った時期が少なくとも私にはありました
コードをたくさん書くこともとても重要ですが、iOSアプリ開発の世界の広げ方はこれだけではないようです

Swift上級者のコードを覗く、設計について考えてみる、技術書典で技術書を買って読んでみる、有名なライブラリやツールを導入して使ってみる、レビューをもらう、勉強会に参加する、勉強会運営にJOINしてみる、カンファレンスにスタッフとして参加してみる、などなど…

この一年間でSwift初級から中級くらいになるために私がやってきたことや、そこからどのような知見が得られたのかを素直に紹介していきたいと思います
iOSアプリ開発の世界にJOINしたばかりの方々の世界が広がると嬉しいです！",https://fortee.jp/files/iosdc-japan-2019/speaker/857b901b-82a5-4137-b029-7874e6da357d.jpg,66nylon_y,https://fortee.jp/iosdc-japan-2019/proposal/f5466ec7-0975-475e-a053-747780c257bb,,,False,,
Material Designを見るだけでエンジニアのデザイン力をそれっぽくする話,Matarai Kaoru,LT,"「Material DesignってどうせAndroidエンジニアやデザイナーが見るものでしょ」と思った方！
「エンジニアだけど、デザインもやらなきゃいけないけど、、」と悩んでいる方！
「HIGも見てるつもりだけど具体的にパーツ間のマージンはどのくらい開けるのがベストなの？」と考えている方！

私も以前はそのように思っていた一人ではありますが、実際に中身を見てみるとコンポーネントごとに使うカラーや
配置、マージンなどHIGよりも更に細かい指標が載っているので非常に参考になりました。
完全主観によるトークとなりますがデザイン力を少しでも上げるために行ったことをいくつか話せたらと思います。",https://fortee.jp/files/iosdc-japan-2019/speaker/94e5344f-1e4b-45f8-aa04-186a349e70b9.png,mcz9mm,https://fortee.jp/iosdc-japan-2019/proposal/fa250ba0-cfe2-4279-a493-a274c32ee212,,,False,,
2つのアプリを2週間でAppStoreとPlayStoreにリリースするためにしたこと,usayuki,LT_R,"2つの側アプリを2週間でリリースするために行ったことを紹介します
※下準備にかかった時間は含まれません",https://fortee.jp/files/iosdc-japan-2019/speaker/61bea7f1-547c-491a-93a0-cc5dbf3511b0.jpg,usayukisan,https://fortee.jp/iosdc-japan-2019/proposal/56649942-856e-40d3-a098-27dd7cdb510d,,,False,,
テストケースで Ambiguous Layout を発見する,tarunon,15m,"我々の開発において「アプリケーションのパフォーマンス」というものは非常に重要であるにも関わらず、優先順位は常に最下位に位置づけられがちです。顧客の体験を最も確実に向上させる手段の一つが、パフォーマンスの改善なのですが、我々は常に新規機能を開発しています。
メモリリークやAutolayoutのエラーというものは一度発生すると永劫そこに留まり、アプリケーションのパフォーマンスを蝕んでいきます。
どのようにこれらを防ぐのでしょうか。コードレビューで発見できるでしょうか。或いは発生したそれを修正するための時間を確保出来るでしょうか。
これらの問題は、コンパイラでは発見出来ません。コンパイラで発見できないものを防ぐ最も賢い手段の一つは、テストケースを書くことです。コードレビューではありません。それでは世界は救えません。

メモリリークに関しては""try! swift 2019""で伝説の失敗に終わった私のデモとともに追放されました。(されたはずです)
今回は最高峰の黒魔術を以て、我々の世界からAmbiguous Layoutを駆逐します。ご期待下さい。",https://fortee.jp/files/iosdc-japan-2019/speaker/2c2481a2-9dc3-4a94-b7ea-03fbccc0c352.jpg,tarunon,https://fortee.jp/iosdc-japan-2019/proposal/780f096f-bc18-49ec-b345-860f0054bdcb,,,False,,
Kubernetesではじめる「ネイティブ」アプリケーション開発,laiso,iOS,"iOSエンジニアにとってこの先最も重要な技術はなんでしょうか？

そうだね、Kubernetes だね。

Kubernetes はDocker などでコンテナ化されたソフトウェアを扱うための統合的なツール群・プラットフォームです。コンテナ技術の一角として、近年急速に発展して注目を集めています。

コンテナ技術の発展の背景にはアプリケーション開発の複雑化があります。そしてコンテナ技術の仕組みや使い方を知ることは、今後より大規模化していくiOSアプリケーションのソフトウェアアーキテクチャを考えていくことになる私たちの参考にもなるはずです。

このトークではKubernetesとサーバーサイドSwiftによるアプリのバックエンド開発ガイドを通して、iOSエンジニアの皆さんへコンテナ時代のサーバーサイド開発のたのしさについてお伝えします。",https://fortee.jp/files/iosdc-japan-2019/speaker/39075007-354d-45ac-8a92-65df0e761110.jpg,laiso,https://fortee.jp/iosdc-japan-2019/proposal/22da4e84-0123-4b63-b3d3-c12d03eb9520,,,False,,
iOS/Android両OS対応 アプリ内課金とアプリ決済・ApplePay&AndroidPay導入入門,yutaabe200,30m,"当トークではiOS/Androidにアプリ内課金なりアプリ決済導入なりの手法に関して、
・これから実装しようと考えている方
・実装にハードルを感じている方
・iOS(またはAndroid)はわかるが、Android(またはiOS)はどうなっているか興味のある方
などの方を対象に「課金・決済」の判断から開発・導入、運用に関してわかった気になれることを目的としたトークです。

アプリで決済周りの導入を行う際「アプリ内課金」か「(他決済サービスによる)アプリ決済」を検討するかと思います。
In-App Purchasesでは「アプリ内のデジタルコンテンツ」に限られており、これから有料化しようとしている課金対象がそれに該当するかどうか判断しなければなりません。これらは単純な「ゲームのコイン」や「広告表示の停止」などであれば迷うこともないかと思いますが、時には判断が難しい場合もあります。
さらにIn-App Purchasesに守備範囲外だったものに対して決済導入を考えるとその時点でかなりのハードルを感じる開発者も多いでしょう。

このトークではまずiOS/Android両OSのIn-App Purchasesの概要・種類・注意点を事例と実装を用いながら説明し、アプリ決済を導入する際の決済サービスの紹介・実装、さらにはApplePay・AndroidPayの活用・実装を紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/936ca423-06f9-4d39-ab15-2ad22fb1aa99.jpg,yutaabe200,https://fortee.jp/iosdc-japan-2019/proposal/33fd31c0-45ec-4425-b4fa-cd94c81cacdf,,,False,,
「型を使う」の意味について考えよう ~型安全と心理的安全を求めて~,shiz,15m,"Swiftは型を持つ言語です。
私たちはSwiftを使っている限り型を必ず使用しています。

しかし、型をいつも意識してコードを書くことはあまり多くないのではないでしょうか？

私はこれまでに仕事で複数の言語を扱ってきましたが、
型というものを当然あるものとしてあまり意識してきませんでした。

しかし、iOSエンジニアとして働くために
Swiftという言語と向き合う時間を増やしていく中で
型に関しての意識が強くなり
型を意識して使うことでより安全に安心して開発を進めることができると思うようになりました。

今回は

「型ってなんだろう？」
「型を使うことで何が良いんだろう？」
「型を意識したコードの書き方ってどういうものがあるんだろう？」

などについてお話ししたいと思います。
※コンパイラの話は出てきません。

私ようにこれまで型について何となく使っていたという方が

「型があるって良いな」
「型をもっと意識して使ってみよう」

と思えるきっかけになり
より安全に安心した開発を進めるための一助になりましたら幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/ffc6767a-50b9-45b1-bfe7-e630be836f3c.jpg,stzn3,https://fortee.jp/iosdc-japan-2019/proposal/240f936a-6a27-497e-a67a-479d210641ba,,,False,,
実践 Auto-Renewable Subscriptions,ロクネム,30m,"本トークでは、Auto-Renewable Subscriptionsと呼ばれる定期的に新しいコンテンツが配信される種類のApp内課金について、ハマりポイントや実装前に知りたかったようなノウハウを織り交ぜて説明します。

また、Auto-Renewable Subscriptionsを導入したプロジェクトではClean Architectureを採用しており、StoreKit frameworkの実装もRxSwiftでラップし、アーキテクチャに適用して実装しています。このような実装に落とし込む際の工夫についても詳しくご紹介します。

そして、今年のWWDCのセッション『In-App Purchases and Using Server-to-Server Notifications』では、サーバー間通知の仕様のアップデートがアナウンスされ、レシートの取り回しの方針が今秋から大きく変わることが判明しました。本トークではそちらについてもお話しします。

【アジェンダ】
1. In-App Purchasesについて
2. Auto-Renewable Subscriptions導入の経緯
3. Auto-Renewable Subscriptionsの大まかな処理の流れ
4. StoreKit frameworkの各メソッド定義と実装方法
    ・RxSwiftを用いたCleanArchitectureによる実装
5. Sandboxテスターによる動作確認方法
6. サーバーサイドの設計
    ・状態更新通知
    ・Sandboxレシートのハンドリング
    ・Grace Periodの実装
    ・WWDC19で発表されたサーバー間通知の新しい仕様について
7. リジェクトについて気をつけたいポイント",https://fortee.jp/files/iosdc-japan-2019/speaker/6e380c5d-3558-4a21-b216-3d3d6e175fb3.jpg,_rockname,https://fortee.jp/iosdc-japan-2019/proposal/60a5ace5-cedc-4b87-9044-ba1068a4d0d5,,,False,,
詳解 Auto-Renewable Subscriptions,ロクネム,15m,"本トークでは、Auto-Renewable Subscriptionsと呼ばれる、定期的に新しいコンテンツが配信される種類のApp内課金について、実際に実装する上でハマったことや実装前に知りたかったようなノウハウを織り交ぜて説明します。
また、今年のWWDCのセッション『In-App Purchases and Using Server-to-Server Notifications』では、サーバー間通知の仕様のアップデートがアナウンスされ、レシートの取り回しの方針が今秋から大きく変わることが判明しました。本トークではそちらについてもご紹介いたします。

【アジェンダ】
1. In-App Purchasesについて
2. Auto-Renewable Subscriptions導入の経緯
3. Auto-Renewable Subscriptionsの大まかな処理の流れ
4. StoreKit frameworkの各メソッド定義と実装方法
5. Sandboxテスターによる動作確認方法
6. サーバーサイドの設計
  ・状態更新通知
  ・Sandboxレシートのハンドリング
  ・Grace Periodの実装
  ・WWDC19で発表されたサーバー間通知の新しい仕様について
7. リジェクトについて気をつけたいポイント",https://fortee.jp/files/iosdc-japan-2019/speaker/6e380c5d-3558-4a21-b216-3d3d6e175fb3.jpg,_rockname,https://fortee.jp/iosdc-japan-2019/proposal/723b458a-2b5d-41a1-bec5-2cd5ccf722c0,,,False,,
広告配信処理のiOSアプリ機能としての実装,樋口雅拓,15m,"一般的に広告はサーバから最適なものを取得し、アプリではそれを表示しています。本件では最適な広告を取得する処理をアプリ機能として実装した事について共有します。
メディアアプリの開発は簡単で退屈と思われがちです。それは多くの機能をサーバ側で実装し、アプリでは表示するだけのように見えるためです。しかし、アプリ側に機能を実装することで、より良いユーザ体験を届けることができます。

# 具体的にどんな内容を話すか
広告システムは、入稿、配信、計測、レポートの4機能で構成されています。これを順番に説明していき、アプリ機能として実装している配信と計測について以下の部分を重点的に話します。
広告は画面ごとに同じものが表示されているように見えますが、閲覧者ごとに違うものが表示されています。例えば真珠のネックレスの広告は「奈良県にいる宝飾品に興味がある50代女性」だけに表示されるよう設定されています。この制約条件の実装方法について話します。
また、Cellが表示された回数を代理店や広告主にレポートする必要があるため、計測の定義や実装について話します。

# 聴講者が得られるもの
広告メディアアプリについて理解が深まります。また、サーバ処理をアプリ機能として実装するモチベーションが湧きます。

# 聴講対象
* メディアアプリ開発は簡単で退屈だと思っている方
* メディアアプリに興味がある方
* アドテクに興味がある方
* サーバ処理をアプリ実装することでユーザ体験を向上させたい方",https://fortee.jp/files/iosdc-japan-2019/speaker/11bd93dd-88ea-4f50-b5f5-2d296d7755e6.png,mahiguch1,https://fortee.jp/iosdc-japan-2019/proposal/634695ce-45f7-4012-9acf-b6d385ac468b,,,False,,
Getting Started with Swift WebAssembly,kateinoigakukun,LT,"巷ではServer Side SwiftやSwift for TensorFlowが盛り上がっていますが、Swift on WebAssemblyにも大きな動きがありました。しかし、SwiftのWasm対応は、まだまだKotlin NativeやRustに遅れをとっている状態です。LLVMをバックエンドに採用しているSwiftならシュッと対応できそうですが、なぜここまで難航しているのでしょうか？
このトークではSwift on Wasmのランタイムがどのように実現されているか「軽く」お話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/c2a2395e-55ec-4f9c-ad12-6f33f401bbf1.png,kateinoigakukun,https://fortee.jp/iosdc-japan-2019/proposal/3c48cd53-0539-4793-8367-11a4d9efbc9f,,,False,,
Swiftに初めてコントリビュートしようとした人の気持ち、みなさん知りたいですよね？,ひろん,LT,"2015年の冬にAppleがSwiftをオープンソース化してから、もう3年以上が経過しました。オープンソース化によって、私たち開発者は様々なメリットを受けられるようになりました。例えば、「不具合の原因を追いかけやすい」、「多くの声を反映した改善が行われやすい」、「仕様変更の議論が外から見えるのでそれに備えやすい」などが一般に言われています。しかし、もっと単純に「私たちだって参加できる」ということも大きなメリットのひとつです。

iOSDCに参加しているお祭り好きのみなさん、当然Swiftにだって参加したいですよね？

世の中には息をするようにSwiftにコントリビュートしている人たちもいます。では、そうでない人たちはどうすればいいでしょうか。後者の一人である私は、今年、Swiftに初めてコントリビュートしようとしました。本トークではその経験をみなさんに共有します。コントリビュートの内容そのものよりも、その過程で私はどんなことを考え、どんな気持ちでいたのかという部分に重点を置き、それをドキュメンタリー風にしてお届けします。",https://fortee.jp/files/iosdc-japan-2019/speaker/859f8fae-4a2c-4f94-995a-d6b2310243e4.jpg,hironytic,https://fortee.jp/iosdc-japan-2019/proposal/217c7b6d-eff9-43b5-8dbe-c268972f7a73,,,False,,
日本のサマータイムに苦しめられた話,uhooi,LT_R,"みなさんは以下の4日が何の日かご存知でしょうか？
・1948年5月2日
・1949年4月3日
・1950年5月7日
・1951年5月6日

正解は「日本におけるサマータイムの開始日」です。

実は日本でも1948〜1951年の4シーズンのみ、サマータイムが実施されていたことがあります。
Appleは日本のサマータイムを忠実に再現しており、タイムゾーンをJST(日本標準時)にすることで確認できます。

実際の業務で、サマータイムの開始日の文字列が日付型に変換できず、アプリが強制終了することがありました。
原因の追求とサマータイムの仕組みの調査に苦戦したので、本セッションではそのときのできごとを実際に対応した時間軸に沿って話します。
iOSのバージョンによって挙動が異なる点も苦しめられた一つです。

※本セッションではObjective-Cのコードのみ扱います。ただし、Swiftのみ扱っている方でも理解しやすい内容となっています。

【アジェンダ】
・日本のサマータイムについて
・サマータイムによる不具合の内容
・不具合の調査結果
・対応策の検討と、実際に対応した方法

【想定する聞き手】
・日本にサマータイムが導入されていたことを知らない人
・iOSアプリ開発でサマータイムを考慮したことがない人

【ゴール】
・日本で導入されていたサマータイムの境界日時を知り、取り扱いに気をつける日時だと認識する
・iOSにおける日本のサマータイムの実装を知る


「キング・クリムゾン…1時間もの時間が消し飛び、この世には「サマータイムが発生した」という「結果」だけが残るッ！！」",https://fortee.jp/files/iosdc-japan-2019/speaker/785cd411-35dc-440c-841a-09304078c653.jpg,the_uhooi,https://fortee.jp/iosdc-japan-2019/proposal/c677f8b6-25a1-4e87-beb1-689ef498a692,,,False,,
色の難しい話に負けない体づくり60分,しもとり,30m,"カラーコードとUIColor (or SwiftUI Color) さえわかれば色の話は十分だと思っていませんか？残念ながら違います！私たちが色に関するガイドラインを覗いたとき、謎の数式と用語も私たちを覗き返してくるのです。そこから逃げ出して曖昧な理解のままアプリを作ったら、きっと使いにくいものになってしまうでしょう。

本セッションでは、知っておくと心強い光と色の知識をみなさんと一緒に確認していきます。
色の決まりや仕組みを理解することで、ドキュメントやガイドラインの意図を正しく掴むことにつながり、私たちが気をつけるべき点をしっかり抑えることができるようになります。小難しい話の並んだドキュメントももう怖くありません。
もちろん、色のお話はiOSやiPhoneだけのものではありません。他のアプリやスライド資料などを作るときにも役立ちます。読みにくいスライドで聴衆のみなさんをがっかりさせてしまった……ということがないように、この機会に色への意識を変えていきましょう！

【対象】

- RGBカラーコードまではわかるぞ！という方
- 発表資料の質をワンランク上げていきたい方
- ガイドライン中の謎の用語と英語で手が止まっちゃう方
- 色に関する注意事項の丸暗記が苦手な方、卒業したい方

【取り扱うテーマ】

- で、コントラスト比って何でしたっけ？
- HIG Colorに載っている謎の虹色画像は何者？
- 色覚異常の方は何色の区別が苦手なんだっけ……？
- ダークモードっていうのが最近の流行りなの？なんで？
- イラレにiPhoneのスクショを配置したらヤバイ色になった助けて！

また、これらの問題の理解に必要となる光の仕組みや色の定義の説明、関連するガイドラインの紹介も行います。",https://fortee.jp/files/iosdc-japan-2019/speaker/8ed08430-b3c3-497c-80ef-a67fc56e4ad3.jpg,S_Shimotori_pub,https://fortee.jp/iosdc-japan-2019/proposal/760a3747-b7d3-4b1a-a141-85a93a31f66d,,,False,,
FirebaseでGrowth基盤を作っちゃお,giiiita,LT_R,"FirebaseにはCloudFireStore、CloudFunctionsなど開発面で便利な機能が多くある一方でアプリの成長面を支える機能も多数あります。

本LTでは、
Analytics機能に含まれるAudiencesに着目しアプリをグロースさせていく基盤をどのように作成していくかについて説明し
Cloud MessagingやA/BTesting機能などと連携することで実現できることについてお話します！

翌日から実際手を動かしてみようと思えるよう熱をあなたに届けます！",https://fortee.jp/files/iosdc-japan-2019/speaker/54c146bf-6d33-4a77-a319-db693659761f.jpg,giiiita_7,https://fortee.jp/iosdc-japan-2019/proposal/2af36056-cb07-4125-a718-f5dbe40e627f,,,False,,
1リポジトリで類似したアプリを複数かつ、並行開発するための設計・運用,matsuokah,15m,"1リポジトリで複数アプリを並行実装する旨味や課題、開発のスケーラビリティを考慮したプロジェクト構成の設計について話します

◯ 共通部分のEmbedded Framework化
　▷ レイヤリングを意識してフレームワークを分けることで、抽象的な実装に近づけることができます。
　▷ また、レイヤー毎に切り出すことで再利用性が高いフレームワークを設計することができます

◯ XcodeGenによるディレクトリベースの構成管理
　▷ 共通部の実装とそれぞれの特殊部を共存できる構成管理にすることで、それぞれの開発の行き来がスムーズになります
　▷ iOSエンジニアの7人の並行開発が円滑になりました

◯ Bitriseを用いたビルドの並列化とリポジトリの運用ルール
◯ 共通アセットと特異アセットの抽出と使える仕組みをSwiftGenで実現した話
◯ xcconfigのレイヤリング
◯ 共通実装の使い回しと特殊化",https://fortee.jp/files/iosdc-japan-2019/speaker/a4265750-e81a-4833-a12c-0aa12de6373a.jpg,matsuokah_,https://fortee.jp/iosdc-japan-2019/proposal/a53d5831-036a-4f11-aeb9-88b719753ba5,,,False,,
【スタートアップ開発者必見】Firebaseとalgoliaとstripeを使って１人で本格的なiOSアプリを作る方法,KBOY,30m,ここ1年以上すべてのiOSアプリをFirebaseで作っています。なぜならフリーランスとして受ける案件が全てスタートアップで、ミニマムに高速に作ることが求められるからです。そしてデザイン意外は全て僕１人で作ってきました。しかし、Firebaseだと検索機能が弱かったり、決済機能はないですよね。でも大丈夫！algoliaとstripeを組み合わせればLIKE検索もできるし、決済機能もつけれます。開発者はあなた１人だけで十分です。スタートアップのエンジニアや個人開発者必見のトークとなるでしょう。,https://fortee.jp/files/iosdc-japan-2019/speaker/67bc9ca7-139f-4429-9234-bf9ea772cfca.jpg,kboy_silvergym,https://fortee.jp/iosdc-japan-2019/proposal/7c04765b-006a-4ee3-8291-4c22c022bdcf,,,False,,
エンジニア系YouTuberになった件,KBOY,LT,昨年は「KBOY@筋肉エンジニア」として「ARKitのための3D算数」という発表をした僕ですが、なんと今年はYouTuberとなってiOSDCに帰ってきました。2019年1月からスタートしたエンジニア系YouTuberですが、どんな苦悩があって、どのように成長してきたのか？5分でまとめます。「KBOYのエンジニアTV」のチャンネル登録よろしくです。,https://fortee.jp/files/iosdc-japan-2019/speaker/67bc9ca7-139f-4429-9234-bf9ea772cfca.jpg,kboy_silvergym,https://fortee.jp/iosdc-japan-2019/proposal/3b6b846b-e715-4638-924f-d53bd0be68b0,,,False,,
環境設定をYAMLで管理したかったのでツールを自作してみた,417.72KI,15m,"「AdHocビルドでは検証環境向けたいからこのURL、Releaseビルドでは本番環境向けたいからこのURLをセットする」
「Releaseビルドとそれ以外でログの出し方を変えたい」
といった設定、皆さんはどうしていますか？

R.swiftというツールの登場により、画像やstrings等のリソースをほぼ全て静的に扱えるようになりましたが、
これのベースになっているAndroidにはRの他にBuildConfigという自動生成ファイルがあり、
これを使ってデバッグ時とリリース時で環境を切り替えることができます。

このBuildConfigと同じことをiOSでも実現したいと思い、
YAMLファイルを読み取ってPlistとSwiftファイルを自動生成するBuildConfig.swiftというツールを開発しました。

このセッションでは、以下についてお話できればと思います。
- デバッグ、ステージング、リリースで変わるもの
- なぜYAMLで管理するのか
- BuildConfig.swiftについて",https://fortee.jp/files/iosdc-japan-2019/speaker/3ec83c33-0b05-4920-a512-b1199523d6ce.jpg,417_72ki,https://fortee.jp/iosdc-japan-2019/proposal/b75b3880-c0fb-44a9-976a-d3cb3db40d99,,,False,,
はじめてのこんとりびゅーと ~OSSは怖くない!~,417.72KI,LT,"OSSへのContributeというと始めは気が引けるものです。
しかし業務でどうしても欲しい機能があったため、勇気を出して自分で実装してPRを出してみました。
その時の体験談をお話しします。",https://fortee.jp/files/iosdc-japan-2019/speaker/3ec83c33-0b05-4920-a512-b1199523d6ce.jpg,417_72ki,https://fortee.jp/iosdc-japan-2019/proposal/e97657c7-871c-40aa-9c54-297456b49f34,,,False,,
雰囲気でやっていくRxSwift,ひろん,15m,"全て熟知する必要はありません。雰囲気さえ掴めば自
然とRxSwiftが使えるようになります。本トークでは、
わたしが普段思い描いているRxSwiftの動作イメージを
かんたんなポンチ絵とともにゆるく共有します。それ
らは正確性よりもイメージを優先したものですが、み
なさんの理解をきっと助けます。さあ雰囲気でやって
いきましょう！

RxSwiftというオープンソースライブラリがあります。UIとデータのバインディング機構を持たないiOSプログラミングにおいて、MVVMアーキテクチャーを実現するためによく使われているライブラリであり、今さら？と思う人がいるくらいには普及してきたと言っていいでしょう。
しかし、手続き型プログラミングに慣れた人にとってRxSwiftのリアクティブプログラミングの考え方は取っ付きづらいこともあります。その原因は、何がどう動いているのかを想像しづらい点にあると思います。
RxSwiftの人気が出始めたSwiftがまだ2〜3の頃、データの流れるストリームを川に例える話をよく見かけました。私も当初はそのようなイメージで触り始めましたが、それでは引っかかる点もあり、現在は全く違ったイメージを持っています。
本トークではRxSwiftの初心者を対象に、私の持つRxSwiftの動作イメージを紹介します。「オブザーバーパターン」や「関数型プログラミング」といったキーワードは登場しません。プログラムの動作の雰囲気をゆる〜く解説します。",https://fortee.jp/files/iosdc-japan-2019/speaker/859f8fae-4a2c-4f94-995a-d6b2310243e4.jpg,hironytic,https://fortee.jp/iosdc-japan-2019/proposal/7323e5d6-7f2e-492e-abec-c83207485bbe,,,False,,
ダックタイピングとidでUserDefaultsをモック化する,417.72KI,15m,"~黒魔術がObjecitve-C Runtime APIだけだといつから錯覚していた？~

iOSで黒魔術といえばObjecitve-C Runtime APIが注目されがちですが、
当然それ以外にも色々な黒魔術が存在します。

ダックタイピングはオブジェクトの型を見るのではなく、オブジェクトそのものがメソッドを持つかどうかという考え方に基づいた手法です。
RubyやPythonではポリモーフィズムを実現する手段として使われている一方、iOS(特にSwift)ではあまり馴染みのない考え方だと思います。

しかし、実はObjective-Cでこのダックタイピングの考え方に基づいた設計/実装が行われています。

本セッションでは、そのダックタイピングの考え方が使われている例に触れつつ、
Obj-Cの特徴であるid型と組み合わせてUserDefaultsをテスト用のオブジェクトに差し替えた話をします。
(UserDefaultsをprotocolでラップする話ではありません)",https://fortee.jp/files/iosdc-japan-2019/speaker/3ec83c33-0b05-4920-a512-b1199523d6ce.jpg,417_72ki,https://fortee.jp/iosdc-japan-2019/proposal/873b4cdb-4c92-4111-bf0b-67a67dbb242e,,,False,,
UIKeyCommandを用いた新たなデバッグ手法,フンジン,LT,"iOSアプリ開発に行うにあたり、どうしても避けて通れないのがSimulatorとの付き合いですね。
普段Slackやブラウザなどで当たり前のように使用しているショートカットがいざデバッグ業務になるとなかなかショートカットを使えずにUIButtonなどをポチポチとしている方も多いかと思います。

そこで今回アプリのデバッグをするにあたってUIKeyCommandを用いた新たなデバッグ手法について紹介します。",https://fortee.jp/files/iosdc-japan-2019/speaker/034620eb-754f-4afb-9cd5-36b154e00f7e.jpg,fufunzin,https://fortee.jp/iosdc-japan-2019/proposal/52bd8185-1b11-4f09-8cb7-5dcd120f0abf,,,False,,
拝啓、新潟初のモバイルカンファレンスの主催をすることになりました。,yutaabe200,LT,"私がiOSコミュニティに本格的に参加するようになったのは去年の「iOSDC 2018」がはじまりでした。
そこでいろいろな方に出会い、多くの知見・情報を教えていただきました。
そして、それを雪国に持ち帰った結果、新潟のアプリ開発会社3社主催・協賛で新潟初のモバイルカンファレンスを開催する流れになぜか(?)なり、その主催を行っている真っ最中なので、それまでの経緯と開催に向けた意気込みと、ほんの少しだけ紹介をさせてください。",https://fortee.jp/files/iosdc-japan-2019/speaker/936ca423-06f9-4d39-ab15-2ad22fb1aa99.jpg,yutaabe200,https://fortee.jp/iosdc-japan-2019/proposal/5b8b3562-7525-431a-8b6d-80a3e618490f,,,False,,
Swiftクリーンコードアドベンチャー　~日々の苦悩を乗り越え、確かな選択をするために~,shiz,15m,"Swiftは多くのプログラミング言語の良い所を採用しており
多種多様な方法でコードを書くことが可能であるため
同じ問題に対しても人によってコードの書き方は大きく異なります。

そうした状況の中で

「これは正しい書き方なのだろうか？」
「もっと上手い書き方があるのではないだろうか？」
「いったい何が良いコードなのか？」

と悩むことは多いのではないでしょうか。

私は毎日悩み続けています。

そんな中
これが正解というものはありませんが
数あるコードの中でも
多くの方から良いコードと呼ばれている
いわゆる「クリーンコード」は存在します。

今回は
私が日々苦悩する中で出会ってきたコードを題材に

どのような状況で、どのような書き方がされ、なぜそう書かれたのか

を見ていき

「クリーンコード」とはどういうものなのか？
なぜ「クリーンコード」は必要なのか？
「クリーンコード」を書くためにはどうすればよいのか？

などについて
みなさまと一緒に
コードの世界を探検する中で発見していきたいと思います。

今回の発表を通して

「こういうときはこういう理由でこうすれば良い」

といった「確かな選択」ができる回数が増え
日々の苦悩を乗り越えるための一助になりましたら幸いです。",https://fortee.jp/files/iosdc-japan-2019/speaker/ffc6767a-50b9-45b1-bfe7-e630be836f3c.jpg,stzn3,https://fortee.jp/iosdc-japan-2019/proposal/0c06aeca-5b6a-4bbe-aeeb-7531740975c5,,,False,,
圧倒的ワンライナー,bannzai,LT,Swiftの表現力を活かした圧倒的ワンライナーを紹介します。,https://fortee.jp/files/iosdc-japan-2019/speaker/3b7851eb-166d-416c-9080-26391a48d465.jpg,_bannzai_,https://fortee.jp/iosdc-japan-2019/proposal/b4b9b461-3f04-4ba9-b1b6-ef58a1603084,,,False,,
コンポーネント指向を取り入れ、UI開発を柔軟に。 そしてiOS版のStorybookを開発するまで,muukii,15m,"Webアプリの開発ではReactやVueなどコンポーネント指向を取り入れた開発の仕方が存在しています。
この考え方をiOS開発に取り入れたときに、開発の考え方がどのように変わり、どのようなメリット(デメリットも）が得られるか、をメインにお話します。

ここで少し触れておくと、
コンポーネント指向を取り入れることで、UIコンポーネントの再利用、持ち運び、カスタマイズが行いやすくなるメリットがあります。
また、Webアプリ開発の技術としてStorybookというUIコンポーネントを管理・閲覧するシステムがあり、
このアイデアをiOSアプリ開発でも活用することを考え、iOS版のStorybookを開発することも可能になりました。
その具体的な方法や使い方の紹介にも触れていきます。",https://fortee.jp/files/iosdc-japan-2019/speaker/7bd5c0c6-aa8b-4aa2-96c0-5ce5f5ccbdcb.jpg,muukii_app,https://fortee.jp/iosdc-japan-2019/proposal/8c5e71c1-d83d-4f74-9386-af4e04cdc602,,,False,,
ファミコンエミュレータづくりの魅力,マスクドPHPer,iOS,"「ファミコンエミュレータを作る」と聞いて何を思い浮かべますか？
多くの方は何をどうしたら良いのか全く想像が付かないと思いますし、私もそうでした。

2016年2月にPHPで書かれたゲームボーイエミュレータ php-terminal-gameboy-emulator が話題になりました。このとき、PHPならばということでコードを読んでみました。エミュレータのコードを読んだのは初めての経験だったのですが、大きな衝撃を受けました。それ以前からCPUやメモリ、この頃のゲーム機に共通する仕様のことは知っていたのですが、php-terminal-gameboy-emulator のコードに見たものはその仕様がそのままPHPのコードとして表現されたものだったのです！

そしてその2年後、あるカンファレンスでファミコンエミュレータに関するトークを聞いた時に、2度目の衝撃が私を襲いました。そこで紹介されたコードはその場で初めて見るにもかかわらず、断片を見るだけで内容が理解できたのです。

このトークでは2度目の衝撃を受けて私が書いたファミコンエミュレータを題材に、エミュレータのコードの特長や設計、そしてその魅力をお伝えします。
エミュレータは決して難しいものではなく新しい言語の学習や設計の練習にちょうどよいテーマでもあります。このトークを聞けばきっと一度エミュレータを書いてみたくなるでしょう。",https://fortee.jp/files/iosdc-japan-2019/speaker/7fed16ad-21ab-4960-aa8d-21405d415bd1.png,MaskedPHPer,https://fortee.jp/iosdc-japan-2019/proposal/d5cc827a-6da3-4ba4-8d2e-04a2b86b93e4,,,False,,
ファミコンの画面描画を知る,マスクドPHPer,iOS,"ファミコンの画面は8x8ピクセルで定義されたキャラクタを敷き詰めた画像（BG）の上にやはり8x8ピクセルで定義されたキャラクタ（スプライト）を重ねて描画されています。その名の通り多くの場合BGでゲームの背景を、スプライトでゲームの主人公や敵キャラを表現することになります。

この「BGとスプライトでゲーム画面を描画する」という設計はファミコンに限らず、PCエンジン, ゲームボーイ, メガドライブ等々、PlayStationより前のゲーム機に共通する設計でした。
すでに発売されているゲーム機より高い性能、より良い表現を求められるであろうゲーム機の設計においてなぜ画面描画に関する設計は共通になっているのでしょうか。それには当時の技術的な制約、出力先である家庭用テレビの仕様が影響していました。

このトークでは私が書いたファミコンエミュレータのソースコードを題材に、ファミコンの画面描画の仕組みや、画面描画をエミュレータでどの様に設計・実装しているのかを解説します。
そして、このトークを通してエミュレータのコードが「得体の知れない難しいもの」ではなく読んで楽しく、書いてみたくなるものであることをお伝えします！",https://fortee.jp/files/iosdc-japan-2019/speaker/7fed16ad-21ab-4960-aa8d-21405d415bd1.png,MaskedPHPer,https://fortee.jp/iosdc-japan-2019/proposal/356e5825-9a1f-4ad1-a987-88337f374acb,,,False,,
あなたの知らないプロジェクトテンプレートの世界,usayuki,LT_R,"普段何気なく使用しているプロジェクトテンプレートの中がどうなっているのか知っていますか？
このトークではSingle View Appを例にテンプレートの中身について解説します",https://fortee.jp/files/iosdc-japan-2019/speaker/61bea7f1-547c-491a-93a0-cc5dbf3511b0.jpg,usayukisan,https://fortee.jp/iosdc-japan-2019/proposal/46e51c7e-3411-4620-b219-714be5f91728,,,False,,
Implement JVM by PHP,めもり〜,iOS,"みなさんは、 JVM (Java Virtual Machine) をご存知でしょうか。ご存知のかたもいれば、いらっしゃらない方もいらっしゃると思います。
JVM は java ファイルをコンパイルしたあとに生成される中間コードを実行するための仮想マシンのことを言います。
そして JVM は JVM Spec (Java Virtual Machine Specification) と呼ばれる Oracle がウェブ上に一般公開しているドキュメントに則って実装されています。
つまり、どのような言語がベースでも開発を行うことは可能であり、それが C でも Java でも、なんなら PHP でも実装可能です。
ということで普段 PHP を良く好んで使う私が、 PHP で JVM を実装したトークをします。
なぜ PHP? と思ったそこのあなた！世間一般ではウェブ言語と認知されている PHP ですが、実はウェブだけに限らず、様々なアプローチで PHP は有効活用できるのです。
なんということでしょうか。 30 億のデバイスで PHP が走る日も近いというワケです。
それではお楽しみに。",https://fortee.jp/files/iosdc-japan-2019/speaker/6404e310-caca-448f-ad00-efa2dbf50da8.jpg,m3m0r7,https://fortee.jp/iosdc-japan-2019/proposal/da8cd705-4d9e-4834-bee6-c4a75814b613,,,False,,
本当は怖くないFlutterを使ったクロスプラットフォーム開発,shogo.yamada,15m,"Google製クロスプラットフォームで開発できるFlutter。

Flutterの基本的な仕組みから、実装方法、
「クロスプラットフォームだから安定してないのでないか」や「OSに依存した処理があると実装できなかったりするのではないか」などクロスプラットフォームを採用することメリット、デメリットなどをお話します。

実際にFlutter製アプリを３本AppStoreにリリースしており、その際に起きた事件や、Flutterを採用してよかった点なども実体験からお話します。",https://fortee.jp/files/iosdc-japan-2019/speaker/596f7f8e-5e17-4169-94a0-1537045765b3.jpg,yshogo87,https://fortee.jp/iosdc-japan-2019/proposal/d372c057-36f6-45f8-9560-11f040280788,,,False,,
Clean ArchitectureとMinimal Cake Patternで送る静的DI,417.72KI,15m,"DIには実行時に依存性を解決する動的DIとコンパイル(ビルド)時に依存性を解決する静的DIがありますが、静的DIを実現する手法の1つとしてMinimal Cake Patternというデザインパターンが提案されました。

Clean Architectureを語る上で避けて通れないDIですが、多くの場合DIコンテナに頼るか自分でRouter等をゴリゴリ作ることになるため、コンテナの学習コストがかかる・コンテナにロックインされる・FatViewControllerとか目じゃないGodRouterが出来上がる等、本質的でないリスクが発生します。
一方でMinimal Cake PatternはSwiftのprotocol extensionを応用しているだけなので、コンテナを始めとするライブラリに頼ることなく言語仕様のみでシンプルに実装することができます。

このセッションでは、Minimal Cake PatternとClean Architectureを組み合わせて実際に開発した際に得られた知見を、デモを混じえて共有できればと考えています。",https://fortee.jp/files/iosdc-japan-2019/speaker/3ec83c33-0b05-4920-a512-b1199523d6ce.jpg,417_72ki,https://fortee.jp/iosdc-japan-2019/proposal/7475d8cd-283d-4e19-a7a5-f271a3c55e21,,,False,,
普通に書くと即メモリーリーク！こんなに大変だけど俺はXamarin.iOSを使い続けるぜ！,Tomohiro Suzuki,iOS,"皆さん、Xamarin の名前くらいは聞いた事がありますよね！

『ああ、C#で、iOSアプリが開発できるやつね。』

6年前、Objective-Cから逃げたくて手を出した、Xamarin.iOSは私に幸福をもたらすはずだった...

だがしかしそこに待ち受けていたのは底なし沼だった！

気づけばどんどん深掘りされる技術！
その底にたどり着いた時に膨大な、これ必要か⁉︎的な知識を得ている事に気づきました！

今明かされるXamarin.iOSの全貌！

●普通に書くと即メモリーリーク！
●幻の大地か！ネイティブとマネージド、2つの世界を行き来してメモリーリークのチェック！
●情報がないのでSwiftのコードを読む日々
●Swiftじゃダメだ！Objective-Cを理解せねば！
●あれ？俺何のためにXamarin.iOS始めたんだっけ？
●それでも俺はXamarin.iOSをやめない！",https://fortee.jp/files/iosdc-japan-2019/speaker/f31abae2-5cbb-4604-9692-e1a3a32c153f.jpg,hiro128_777,https://fortee.jp/iosdc-japan-2019/proposal/aaf65ef8-345a-4d5c-856b-9aff5368810c,,,False,,
14回の Reject と 2回の国際電話から学ぶ汗と涙の iOS Design,akkey,15m,"朝7時、 +1 から始まる見覚えのない電話番号からの着信で目を覚ました。寝ぼけながらも iPhoneXS の画面をよく見ると San Jose と表示されている。これは、某アプリの Reject 回数が10回を超え、当初のリリース予定日から1ヶ月経過したとある土曜日のことです。

iOSDC ではこの貴重な体験を包み隠さず全てお話します。数々の都市伝説と噂を持つ Apple の App Review ですが、14回 Reject されたとしても決して悪者扱いしてはいけません。 Apple の Review は、私達のプロダクトの質をグッと高めるきっかけになります（きっと）。
このトークでは、プロダクト品質を高めることにつながる「きっかけ」を見つけていただけたらと思います。

※ トークに機密事項は含まれませんのでご安心ください",https://fortee.jp/files/iosdc-japan-2019/speaker/3910fe9b-0da0-46f5-a083-4492fea2e3c4.jpg,AkkeyLab,https://fortee.jp/iosdc-japan-2019/proposal/3961a148-1c82-4ba2-8cb2-19d3c141209b,,,False,,
コードを、デザインする,星野恵瑠,30m,"ジョブズは言った、「デザインは見た目やオーラではなく、どう動くか、です」と。

我々は長い間、様々な設計パターンやアーキテクチャーの話をしてきたが、しかしそう言った具体的な話はあくまで目的を実現するための「メソッド」であって「アプローチ」ではない。言い換えればプログラミングが続く限り、そう言ったアーキテクチャーは無限に新しいものが出てくるだろう。

しかしそんな激しい「変化」の中でも「不変」なものがある。それは「アプローチ」である。どんなアーキテクチャーでも最終的には「こうすれば読みやすい」「こうすればメンテしやすい」と言う命名や責務分割などの基本ルールに回帰できる。

このトークでは、初心者・中級者エンジニア向けに、「こうすれば機能を実現できる」から「こうすれば機能を保守できる」への道しるべになることを祈る。",https://fortee.jp/files/iosdc-japan-2019/speaker/27291157-656c-4144-993e-c4bf232df3ce.jpg,lovee,https://fortee.jp/iosdc-japan-2019/proposal/8e98e996-397a-4d35-ac19-f0ed65e84769,,,False,,
